./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	text <- .ddg.get('ddg.activity')
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	text <- .ddg.get('ddg.entity')
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	text <- .ddg.get('ddg.wasInformedBy')
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	text <- .ddg.get('ddg.wasGeneratedBy')
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	text <- .ddg.get('ddg.used')
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	Sys.setenv("R_HISTSIZE" = lines)
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
		# Short circuits evaluation.
^~
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	if (Sys.getenv("RSTUDIO") != "" && Sys.info()['sysname'] == "Windows") {
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	# Matching any of these classes automatically classifies the
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	# Note that is.vector returns TRUE for lists, so we need to check
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	prev.device <- .ddg.get("prev.device")
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	# Try to output graphic value.
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	# Create the right size data frame from input frame.
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	# Read from specified file.
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	# pdfs require a separate procedure.
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	# Get original file location.
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	# Calculate location of original file.
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
		expr =
^~
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
		expr =
^~
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	# Delete the temporary history file if we made it.
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	# Get the environment for the variable call.
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	if (!.ddg.is.init()) return(invisible())
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	if (!.ddg.is.init()) return(invisible())
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	if (!.ddg.is.init()) return(invisible())
^
./R/RDataTracker.R:2:1: style: Use two spaces to indent, never tabs.
	if (!.ddg.is.init()) return(invisible())
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
		return(.ddg.is.set(".ddg.initialized") && .ddg.get(".ddg.initialized"))
^~
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
		.ddg.set(var, paste("##------", date(), "------##"))
^~
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	curr.device <- dev.cur()
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	tryCatch({
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
		.ddg.snapshot.node(name, "csv", value, dscope=scope, from.env=from.env)
^~
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	new.vars.set <- rbind(vars.set,.ddg.create.empty.vars.set(size))
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	num.dev.to.capture <- dev.to.capture()
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	history <- readLines(hist.file)
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	# USED TO STORE ENTIRE HISTORY IN SEP. FILE.
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	# Get both the last command and new commands.
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	if (!is.null(new.command)) {
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	if (fext == "pdf") dev.copy2pdf(file=dpfile)
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	file.name <- basename(fname)
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	file.loc <- normalizePath(fname, winslash="/", mustWork = FALSE)
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
				# If pname is not provided, get from function call.
^~~~
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
				if (is.null(value)) {
^~~~
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	if (.ddg.is.set('ddg.history.file')) unlink(.ddg.get('ddg.history.file'))
^
./R/RDataTracker.R:3:1: style: Use two spaces to indent, never tabs.
	# Write out the graphic.
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
		timestamp(quiet=TRUE)
^~
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	graph.classes <- list("gg", "ggplot")
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	device.list <- dev.list()
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
		.ddg.snapshot.node(name, fext, NULL, dscope=scope, from.env=from.env)
^~
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	}, error = function(e) {
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	if (num.dev.to.capture > 1) {
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	# Write history out to temporary file
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	returns <- .ddg.get(".ddg.return.values")
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
		.ddg.add.abstract.node("Start", new.command, env, called=paste(called, "-> .ddg.open.new.command.node"))
^~
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	file.loc <- normalizePath(fname, winslash="/", mustWork = FALSE)
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
				if (is.null(pname)) {
^~~~
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
					arg <- substitute(expr)
^~~~~
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	# Look up the value if one was not provided.
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	# Look up the value if one was not provided.
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	scope <- if (!is.null(dname)) .ddg.get.scope(dname)
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	# If no value is provided, get value in calling environment.
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	# If no value is provided, get value in calling environment.
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	# If no value is provided, get value in calling environment.
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	if (is.null(dname)) {
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	.ddg.write.graphic(dname, 'Graphical Plot. Not saved in script.', graphic.fext)
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.function.name(pname)
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.function.name(pname)
^
./R/RDataTracker.R:4:1: style: Use two spaces to indent, never tabs.
	# Write a new timestamp if we're turning on the console so
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	return(is.object(value) && any(class(value) %in% graph.classes))
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	}, error = function(e) {
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
		# warning(paste("Attempted to write", name, "as .csv snapshot but failed. Out as RDataObject.", e))
^~
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	vars.set <- data.frame(variable=character(var.table.size),
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	# Update first/last writer.
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
		# Make the capture device active (store info on previous
^~
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	unused.returns <- returns[!returns$return.used & returns$return.node.id > 0, ]
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	# At the moment, all other graphic types can be done by
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	# Copy file.
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
					if (is.character(arg)) {
^~~~~
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	# Clear the environment.
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	  env <- .ddg.get.env(name, for.caller, calls)
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	env <- parent.frame()
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	env <- parent.frame()
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
			 else NULL
^~~
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	env <- parent.frame()
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	env <- parent.frame()
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	env <- parent.frame()
^
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
		dname <- basename(filename)
^~
./R/RDataTracker.R:5:1: style: Use two spaces to indent, never tabs.
	if (interactive() && .ddg.enable.console()) {
^
./R/RDataTracker.R:5:3: style: Use two spaces to indent, never tabs.
  	if (length(pname) > 1) {
  ^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	else {
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	return((!.ddg.is.graphic(value) &&
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	# We've switched devices .
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
		# warning(paste("Attempted to write", name, "as", fext, "snapshot. Trying jpeg", ".", e))
^~
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
^~
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
			first.writer=numeric(var.table.size),
^~~
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	new.vars.set$first.writer <- ifelse(new.vars.set$first.writer == size + 1, size*2 + 1, new.vars.set$first.writer)
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	# Find the timestamp specified in the history.  There may be
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	# ddg.grab.timestamp <- .ddg.get(".ddg.grab.timestamp.history")
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
		# Now the new command becomes the last command, and new command
^~
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	loc.value <-
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	if (file.exists(file.loc)) {
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
						tryCatch (arg <- parse(text=expr),
^~~~~~
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	.ddg.env <- new.env(parent=emptyenv())
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.value(dname, dvalue, env, "ddg.exception")
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.value(dname, dvalue, env, "ddg.url")
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	invisible(.ddg.file.copy("File", filename, dname, scope))
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.value(dname, dvalue, env, "ddg.data.out")
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.value(dname, dvalue, env, "ddg.exception.out")
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.value(dname, dvalue, env, "ddg.url.out")
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
		scope <- NULL
^~
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.function.name(pname)
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	# Check for NULL.
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	# Check for NULL.
^
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
		.ddg.console.node()
^~
./R/RDataTracker.R:6:1: style: Use two spaces to indent, never tabs.
	if (!.ddg.enable.console()) .ddg.write.timestamp.to.history()
^
./R/RDataTracker.R:6:5: style: Use two spaces to indent, never tabs.
    	print(sys.calls())
    ^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
		.ddg.set(var, timestamp(prefix = "##-ddg-- ", quiet=TRUE))
^~
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	       !is.list(value) &&
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	if (prev.device != curr.device) {
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
		tryCatch({
^~
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	})
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
			last.writer=numeric(var.table.size),
^~~
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
		prev.device <- dev.cur()
^~
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	# ddg.tmp.history.file <- paste(hist.file,".tmp", sep="")
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	else {
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
		if (dtype == "File") paste(" Location=\"", file.loc, "\"", sep="")
^~
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	  # Create file node in DDG.
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
						error = function(e) {})
^~~~~~
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	if(is.null(pname)) {
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	if(is.null(pname)) {
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:7:1: style: Use two spaces to indent, never tabs.
	.ddg.set(".ddg.enable.console", TRUE)
^
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
	       is.vector(value) &&
^
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
		# Update device.
^~
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
			.ddg.snapshot.node(name, "jpeg", NULL, dscope=scope, from.env=from.env)
^~~
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
			possible.first.writer=numeric(var.table.size),
^~~
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
		dev.set(num.dev.to.capture)
^~
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
		# If jpg, we need to change it to jpeg for the function call.
^~
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
		else ""
^~
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
	  dpfile.out <- .ddg.file.node(dtype,fname,dname, dscope)
^
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
					}
^~~~~
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
	if (is.character(dname)) {
^
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
	if (is.character(dname)) {
^
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
	# Convert name to a string if necessary.
^
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
	# Create output exception node.
^
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
	else {
^
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
	# Create the data flow edge from oepration node to the file node.
^
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
		msg <- "Cannot call ddg.start with NULL value from top-level."
^~
./R/RDataTracker.R:8:1: style: Use two spaces to indent, never tabs.
		msg <- "Cannot call ddg.finish with NULL value from top-level."
^~
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	       length(value) == 1) ||
^
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
		.ddg.set("prev.device", curr.device)
^~
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
		}, error = function(e) {
^~
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	# Determine type for value, and save accordingly.
^
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
			possible.last.writer=numeric(var.table.size),
^~~
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	return(new.vars.set)
^
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	history.timestamp.line <- tail(which(history == timestamp), 1)
^
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	if (.ddg.is.set(".ddg.history.file") &&
^
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	# See which of these are called from the command we are
^
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
		.ddg.set(".ddg.last.cmd", new.command)
^~
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
		fext = ifelse(fext == "jpg", "jpeg", fext)
^~
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
					# Look up function call.
^~~~~
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
					else expr <- deparse(arg)
^~~~~
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	# If no environment found, name does not exist, so scope is
^
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
		dscope = environmentName(.GlobalEnv)
^~
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	if (!is.character(dname)) dname <- deparse(substitute(dname))
^
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	.ddg.data.node("Exception", dname, dvalue, "ddg.library")
^
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	.ddg.proc2data(pname,dname)
^
./R/RDataTracker.R:9:1: style: Use two spaces to indent, never tabs.
	# Set the console to off.
^
./R/RDataTracker.R:9:2: style: Use two spaces to indent, never tabs.
 		scope <- .ddg.get.scope (dname)
 ^~
./R/RDataTracker.R:9:3: style: Use two spaces to indent, never tabs.
  	.ddg.insert.error.message(msg)
  ^
./R/RDataTracker.R:9:3: style: Use two spaces to indent, never tabs.
  	.ddg.insert.error.message(msg)
  ^
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
				 is.null(value))
^~~~
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
			 # warning(paste("Attempted to write", name, "as jpeg snapshot. Failed.", e, "Defaulting to saving RObject and .txt file."))
^~~
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
	if (.ddg.is.graphic(value)) .ddg.write.graphic(name, value, graphic.fext, scope=scope, from.env=from.env)
^
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
		# Capture it as a jpeg.
^~
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
	    is.character(.ddg.get(".ddg.history.file")) &&
^
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
		.ddg.set(".ddg.possible.last.cmd", NULL)
^~
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
	# Add number to file name.
^
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
					call <- sys.call(-4)
^~~~~
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
					value <- tryCatch (
^~~~~
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:10:1: style: Use two spaces to indent, never tabs.
	.ddg.set(".ddg.enable.console", FALSE)
^
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
		# Previous device still accessible.
^~
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
	else if (.ddg.is.simple(value)) .ddg.save.simple(name, value, scope=scope, from.env=from.env)
^
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
		name <- if (!is.null(cmd.abbrev) && cmd.abbrev != "") paste0("graphic", substr(cmd.abbrev,1,10)) else "graphic"
^~
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
	if (length(history.timestamp.line) == 0) {
^
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
	    .ddg.get(".ddg.history.file") == hist.file) {
^
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
	unused.calls <- unused.returns$ddg.call
^
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
		# First, we create a string, then convert it to an actual R
^~
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
	dfile <- paste(.ddg.dnum()+1, "-", file.name, sep="")
^
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
							eval(arg, env),
^~~~~~~
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
	else {
^
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
	# Save the complex data in appropriate format.
^
./R/RDataTracker.R:11:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.function.name(pname)
^
./R/RDataTracker.R:11:3: style: Use two spaces to indent, never tabs.
  		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
  ^~
./R/RDataTracker.R:12:1: style: Use two spaces to indent, never tabs.
		if (prev.device %in% device.list) return(prev.device)
^~
./R/RDataTracker.R:12:1: style: Use two spaces to indent, never tabs.
	else if (.ddg.is.csv(value)) .ddg.write.csv(name, value, scope=scope, from.env=from.env)
^
./R/RDataTracker.R:12:1: style: Use two spaces to indent, never tabs.
	# Initialize first writer.
^
./R/RDataTracker.R:12:1: style: Use two spaces to indent, never tabs.
		.ddg.snapshot.node(name, fext="jpeg", data=NULL)
^~
./R/RDataTracker.R:12:1: style: Use two spaces to indent, never tabs.
		error.msg <- paste("Part of history is missing. DDG may be incomplete! Tried reading from",
^~
./R/RDataTracker.R:12:1: style: Use two spaces to indent, never tabs.
					# Discard everything after left parenthesis to get
^~~~~
./R/RDataTracker.R:12:1: style: Use two spaces to indent, never tabs.
							error = function(e) {
^~~~~~~
./R/RDataTracker.R:12:1: style: Use two spaces to indent, never tabs.
		# If dname is not a string, use its name rather than its value.
^~
./R/RDataTracker.R:12:1: style: Use two spaces to indent, never tabs.
	.ddg.save.data(dname, dvalue, "ddg.data.out", graphic.fext, env=env)
^
./R/RDataTracker.R:12:1: style: Use two spaces to indent, never tabs.
	# Create output file node called filename and copy file.
^
./R/RDataTracker.R:12:3: style: Use two spaces to indent, never tabs.
  	})
  ^
./R/RDataTracker.R:13:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:13:1: style: Use two spaces to indent, never tabs.
	})
^
./R/RDataTracker.R:13:1: style: Use two spaces to indent, never tabs.
	vars.set$first.writer <- var.table.size + 1
^
./R/RDataTracker.R:13:1: style: Use two spaces to indent, never tabs.
		                   hist.file, "but could not find timestamp:", timestamp)
^~
./R/RDataTracker.R:13:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:13:1: style: Use two spaces to indent, never tabs.
	uses <- sapply(unused.calls, function(call) {grepl(call, command.text, fixed=TRUE)})
^
./R/RDataTracker.R:13:1: style: Use two spaces to indent, never tabs.
		strFun <- paste(fext, "(filename=dpfile, width=800, height=500)", sep="")
^~
./R/RDataTracker.R:13:1: style: Use two spaces to indent, never tabs.
								# if (is.character(expr)) return (expr)
^~~~~~~~
./R/RDataTracker.R:13:1: style: Use two spaces to indent, never tabs.
		dname <- deparse(substitute(dname))
^~
./R/RDataTracker.R:13:1: style: Use two spaces to indent, never tabs.
	# Create data flow edge from procedure node to exception node.
^
./R/RDataTracker.R:14:1: style: Use two spaces to indent, never tabs.
	vars.set$possible.first.writer <- var.table.size + 1
^
./R/RDataTracker.R:14:1: style: Use two spaces to indent, never tabs.
		# Make the previous device active again.
^~
./R/RDataTracker.R:14:1: style: Use two spaces to indent, never tabs.
	# Clear the saved warning
^
./R/RDataTracker.R:14:1: style: Use two spaces to indent, never tabs.
		parseFun <- function(){eval(parse(text=strFun))}
^~
./R/RDataTracker.R:14:1: style: Use two spaces to indent, never tabs.
								if (warn) {
^~~~~~~~
./R/RDataTracker.R:14:1: style: Use two spaces to indent, never tabs.
		dscope <- .ddg.get.scope(dname)
^~
./R/RDataTracker.R:14:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.function.name(pname)
^
./R/RDataTracker.R:14:1: style: Use two spaces to indent, never tabs.
	.ddg.proc2data(pname, dname)
^
./R/RDataTracker.R:15:1: style: Use two spaces to indent, never tabs.
	# No switching, or previous is not accessible (NULL or removed).
^
./R/RDataTracker.R:15:1: style: Use two spaces to indent, never tabs.
	else if (.ddg.is.function(value)) .ddg.save.simple(name, "#ddg.function", scope=scope, from.env=from.env)
^
./R/RDataTracker.R:15:1: style: Use two spaces to indent, never tabs.
		dev.set(prev.device)
^~
./R/RDataTracker.R:15:1: style: Use two spaces to indent, never tabs.
	# USED TO STORE ENTIRE HISTORY IN SEP. FILE.
^
./R/RDataTracker.R:15:1: style: Use two spaces to indent, never tabs.
		dev.copy(parseFun)
^~
./R/RDataTracker.R:15:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:16:1: style: Use two spaces to indent, never tabs.
	return(0)
^
./R/RDataTracker.R:16:1: style: Use two spaces to indent, never tabs.
	else if (error) stop("Unable to create data (snapshot) node. Non-Object value to", fname, ".")
^
./R/RDataTracker.R:16:1: style: Use two spaces to indent, never tabs.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
^~
./R/RDataTracker.R:16:1: style: Use two spaces to indent, never tabs.
		history.timestamp.line <- 0
^~
./R/RDataTracker.R:16:1: style: Use two spaces to indent, never tabs.
	# Read in changes and writ eout to extended file.
^
./R/RDataTracker.R:16:1: style: Use two spaces to indent, never tabs.
	# The following line is here to get around R CMD check, which
^
./R/RDataTracker.R:16:1: style: Use two spaces to indent, never tabs.
	# Create data flow edge from operation node to data node.
^
./R/RDataTracker.R:16:4: style: Use two spaces to indent, never tabs.
  #	scope <- sub('<environment: (.*)>', '\\1', capture.output(.ddg.where(name, sys.frame(fnum))))
   ^
./R/RDataTracker.R:17:1: style: Use two spaces to indent, never tabs.
	else {
^
./R/RDataTracker.R:17:1: style: Use two spaces to indent, never tabs.
		# We're done, so create the edge.
^~
./R/RDataTracker.R:17:1: style: Use two spaces to indent, never tabs.
		    if (is.null(env)) {
^~
./R/RDataTracker.R:17:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:17:1: style: Use two spaces to indent, never tabs.
		# Turn it off (this switches back to prev device).
^~
./R/RDataTracker.R:17:1: style: Use two spaces to indent, never tabs.
	dtime <- .ddg.timestamp()
^
./R/RDataTracker.R:17:1: style: Use two spaces to indent, never tabs.
	# Create input URL node.
^
./R/RDataTracker.R:17:1: style: Use two spaces to indent, never tabs.
	.ddg.proc2data(pname, dname)
^
./R/RDataTracker.R:17:1: style: Use two spaces to indent, never tabs.
	.ddg.lookup.function.name(pname)
^
./R/RDataTracker.R:18:1: style: Use two spaces to indent, never tabs.
		error.msg <- paste("Unable to create data (snapshot) node. Non-Object value to", fname, ".")
^~
./R/RDataTracker.R:18:1: style: Use two spaces to indent, never tabs.
	return(vars.set)
^
./R/RDataTracker.R:18:1: style: Use two spaces to indent, never tabs.
		if(is.null(cmd.abbrev)) .ddg.lastproc2data(name, all=FALSE)
^~
./R/RDataTracker.R:18:1: style: Use two spaces to indent, never tabs.
		      env <- .ddg.get.env(var, calls=stack)
^~
./R/RDataTracker.R:18:1: style: Use two spaces to indent, never tabs.
	# newlines <- .ddg.loadhistory(ddg.tmp.history.file,ddg.grab.timestamp)
^
./R/RDataTracker.R:18:1: style: Use two spaces to indent, never tabs.
	# Note that return.node.id is not a variable in the subset call,
^
./R/RDataTracker.R:18:1: style: Use two spaces to indent, never tabs.
		dev.off()
^~
./R/RDataTracker.R:18:1: style: Use two spaces to indent, never tabs.
	.ddg.data.node("URL", dname, dvalue, dscope)
^
./R/RDataTracker.R:19:1: style: Use two spaces to indent, never tabs.
		.ddg.insert.error.message(error.msg)
^~
./R/RDataTracker.R:19:1: style: Use two spaces to indent, never tabs.
		else .ddg.proc2data(cmd.abbrev, name)
^~
./R/RDataTracker.R:19:1: style: Use two spaces to indent, never tabs.
	# Need to check if the timestamp line is the last line in the file
^
./R/RDataTracker.R:19:1: style: Use two spaces to indent, never tabs.
	# write(newlines, file=hist.file, append=TRUE)
^
./R/RDataTracker.R:19:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:19:1: style: Use two spaces to indent, never tabs.
	# Set the node label.
^
./R/RDataTracker.R:19:1: style: Use two spaces to indent, never tabs.
	# Create data flow edge from operation node to file node.
^
./R/RDataTracker.R:20:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:20:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:20:1: style: Use two spaces to indent, never tabs.
		    scope <- .ddg.get.scope(var, calls=stack, env=env)
^~
./R/RDataTracker.R:20:1: style: Use two spaces to indent, never tabs.
	# explicitly.  If we don't do that and take the vector, we will
^
./R/RDataTracker.R:20:1: style: Use two spaces to indent, never tabs.
	# insert timestamp to history
^
./R/RDataTracker.R:20:1: style: Use two spaces to indent, never tabs.
	return.node.id <- NULL
^
./R/RDataTracker.R:20:1: style: Use two spaces to indent, never tabs.
	if (is.null(dname)) dname <- file.name
^
./R/RDataTracker.R:20:1: style: Use two spaces to indent, never tabs.
	.ddg.proc2data(pname, dname, scope)
^
./R/RDataTracker.R:21:1: style: Use two spaces to indent, never tabs.
		    val <- tryCatch(eval(parse(text=var), env),
^~
./R/RDataTracker.R:21:1: style: Use two spaces to indent, never tabs.
	# get the last line in the file since R will create a descending
^
./R/RDataTracker.R:21:1: style: Use two spaces to indent, never tabs.
	# .ddg.write.timestamp.to.history(var=".ddg.grab.timestamp.history")
^
./R/RDataTracker.R:22:1: style: Use two spaces to indent, never tabs.
	invisible()
^
./R/RDataTracker.R:22:1: style: Use two spaces to indent, never tabs.
					error = function(e) {
^~~~~
./R/RDataTracker.R:22:1: style: Use two spaces to indent, never tabs.
	# Extracts for the return value nodes.
^
./R/RDataTracker.R:22:1: style: Use two spaces to indent, never tabs.
	# Get scope if necessary.
^
./R/RDataTracker.R:22:1: style: Use two spaces to indent, never tabs.
	return (saved.file)
^
./R/RDataTracker.R:23:1: style: Use two spaces to indent, never tabs.
	if (history.timestamp.line == history.lines) return (vector())
^
./R/RDataTracker.R:23:1: style: Use two spaces to indent, never tabs.
	new.uses <- subset(unused.returns, uses, return.node.id)
^
./R/RDataTracker.R:23:1: style: Use two spaces to indent, never tabs.
	if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
^
./R/RDataTracker.R:24:1: style: Use two spaces to indent, never tabs.
	if (!is.null(.ddg.last.cmd) && (!is.null(.ddg.possible.last.cmd) || initial)) {
^
./R/RDataTracker.R:25:1: style: Use two spaces to indent, never tabs.
	# NEED the paren around sum.
^
./R/RDataTracker.R:25:1: style: Use two spaces to indent, never tabs.
		cmd.abbrev <- .ddg.add.abstract.node("Finish", .ddg.last.cmd, env=env, called=paste(called, "-> .ddg.close.last.command.node"))
^~
./R/RDataTracker.R:25:1: style: Use two spaces to indent, never tabs.
	# Not from environment.
^
./R/RDataTracker.R:25:1: style: Use two spaces to indent, never tabs.
					  pname <- as.character(call[[1]])
^~~~~
./R/RDataTracker.R:26:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.env <- new.env(parent=emptyenv())
^~~~~~~~
./R/RDataTracker.R:26:1: style: Use two spaces to indent, never tabs.
		else {
^~
./R/RDataTracker.R:26:1: style: Use two spaces to indent, never tabs.
	return(history[(history.timestamp.line+1):history.lines])
^
./R/RDataTracker.R:26:1: style: Use two spaces to indent, never tabs.
	# Create an edge from each of these to the last procedure node.
^
./R/RDataTracker.R:26:1: style: Use two spaces to indent, never tabs.
	from.env <- FALSE
^
./R/RDataTracker.R:26:27: style: Put spaces around all infix operators.
.ddg.env <- new.env(parent=emptyenv())
                         ~^~
./R/RDataTracker.R:27:1: style: Use two spaces to indent, never tabs.
				return (TRUE)
^~~~
./R/RDataTracker.R:27:1: style: Use two spaces to indent, never tabs.
			# Find the first empty row
^~~
./R/RDataTracker.R:27:1: style: Use two spaces to indent, never tabs.
			  tryCatch(.ddg.save.data(var, val, fname=".ddg.create.data.set.edges.for.cmd", error=TRUE, scope=scope, stack=stack, env=env),
^~~
./R/RDataTracker.R:27:1: style: Use two spaces to indent, never tabs.
	lapply (new.uses$return.node.id,
^
./R/RDataTracker.R:27:1: style: Use two spaces to indent, never tabs.
		# Add link from a function return node if there is one.
^~
./R/RDataTracker.R:27:1: style: Use two spaces to indent, never tabs.
				}
^~~~
./R/RDataTracker.R:28:1: style: Use two spaces to indent, never tabs.
			         error = function(e){.ddg.data.node("Data", var, "complex", scope)})
^~~
./R/RDataTracker.R:28:1: style: Use two spaces to indent, never tabs.
			function(data.num) {
^~~
./R/RDataTracker.R:28:1: style: Use two spaces to indent, never tabs.
		.ddg.link.function.returns(.ddg.last.cmd)
^~
./R/RDataTracker.R:29:1: style: Use two spaces to indent, never tabs.
				proc.num <- .ddg.pnum()
^~~~
./R/RDataTracker.R:29:1: style: Use two spaces to indent, never tabs.
		# .ddg.link.function.returns(.ddg.last.cmd$text)
^~
./R/RDataTracker.R:29:1: style: Use two spaces to indent, never tabs.
				# Convert pname to a string if necessary.
^~~~
./R/RDataTracker.R:30:1: style: Use two spaces to indent, never tabs.
		
^~
./R/RDataTracker.R:30:1: style: Use two spaces to indent, never tabs.
				else if (!is.character(pname)) {
^~~~
./R/RDataTracker.R:31:1: style: Use two spaces to indent, never tabs.
				# Record in edges table
^~~~
./R/RDataTracker.R:31:1: style: Use two spaces to indent, never tabs.
		# Create outflowing edges.
^~
./R/RDataTracker.R:32:1: style: Use two spaces to indent, never tabs.
				etype <- "df.in"
^~~~
./R/RDataTracker.R:33:1: style: Use two spaces to indent, never tabs.
				# TODO - add some sort of warning to the user that the node
^~~~
./R/RDataTracker.R:33:1: style: Use two spaces to indent, never tabs.
				node1 <- paste("d", data.num, sep="")
^~~~
./R/RDataTracker.R:33:1: style: Use two spaces to indent, never tabs.
		#vars.set <- .ddg.find.var.assignments(.ddg.last.cmd)
^~
./R/RDataTracker.R:34:1: style: Use two spaces to indent, never tabs.
				node2 <- paste("p", proc.num, sep="")
^~~~
./R/RDataTracker.R:35:1: style: Use two spaces to indent, never tabs.
			# Set the variable.
^~~
./R/RDataTracker.R:35:1: style: Use two spaces to indent, never tabs.
				.ddg.record.edge(etype, node1, node2)
^~~~
./R/RDataTracker.R:35:1: style: Use two spaces to indent, never tabs.
		#.ddg.create.data.set.edges.for.cmd(vars.set, .ddg.last.cmd$abbrev, .ddg.last.cmd$expr, 1, env, for.finish.node = TRUE)
^~
./R/RDataTracker.R:36:1: style: Use two spaces to indent, never tabs.
			vars.set$variable[var.num] <- var
^~~
./R/RDataTracker.R:36:24: style: Put spaces around all infix operators.
ddg.MAX_HIST_LINES <- 2^14
                      ~^~
./R/RDataTracker.R:37:1: style: Use two spaces to indent, never tabs.
			if (!is.null(main.var.assigned) && var == main.var.assigned) {
^~~
./R/RDataTracker.R:37:1: style: Use two spaces to indent, never tabs.
			# The variable is not set at all in this console block.
^~~
./R/RDataTracker.R:37:1: style: Use two spaces to indent, never tabs.
				if (.ddg.debug.lib()) {
^~~~
./R/RDataTracker.R:38:1: style: Use two spaces to indent, never tabs.
				vars.set$first.writer[var.num] <- i
^~~~
./R/RDataTracker.R:38:1: style: Use two spaces to indent, never tabs.
					print(paste(".ddg.link.function.returns:", command))
^~~~~
./R/RDataTracker.R:38:1: style: Use two spaces to indent, never tabs.
		# No previous command.
^~
./R/RDataTracker.R:39:1: style: Use two spaces to indent, never tabs.
				vars.set$last.writer[var.num] <- i
^~~~
./R/RDataTracker.R:39:1: style: Use two spaces to indent, never tabs.
			else {
^~~
./R/RDataTracker.R:39:1: style: Use two spaces to indent, never tabs.
					print(paste("DF ", node1, " ", node2, sep=""))
^~~~~
./R/RDataTracker.R:40:1: style: Use two spaces to indent, never tabs.
			}
^~~
./R/RDataTracker.R:40:1: style: Use two spaces to indent, never tabs.
				}
^~~~
./R/RDataTracker.R:40:1: style: Use two spaces to indent, never tabs.
		.ddg.set(".ddg.last.cmd", NULL)
^~
./R/RDataTracker.R:41:1: style: Use two spaces to indent, never tabs.
			else {
^~~
./R/RDataTracker.R:41:1: style: Use two spaces to indent, never tabs.
			}
^~~
./R/RDataTracker.R:41:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:42:1: style: Use two spaces to indent, never tabs.
				vars.set$possible.first.writer[var.num] <- i
^~~~
./R/RDataTracker.R:42:1: style: Use two spaces to indent, never tabs.
		}
^~
./R/RDataTracker.R:42:1: style: Use two spaces to indent, never tabs.
				# Set the return value as being used.
^~~~
./R/RDataTracker.R:43:1: style: Use two spaces to indent, never tabs.
				vars.set$possible.last.writer[var.num] <- i
^~~~
./R/RDataTracker.R:43:1: style: Use two spaces to indent, never tabs.
		else {
^~
./R/RDataTracker.R:43:1: style: Use two spaces to indent, never tabs.
				returns$return.used[returns$return.node.id == data.num] <- TRUE
^~~~
./R/RDataTracker.R:44:1: style: Use two spaces to indent, never tabs.
			}
^~~
./R/RDataTracker.R:44:1: style: Use two spaces to indent, never tabs.
				.ddg.set(".ddg.return.values", returns)
^~~~
./R/RDataTracker.R:45:1: style: Use two spaces to indent, never tabs.
		}
^~
./R/RDataTracker.R:45:1: style: Use two spaces to indent, never tabs.
			})
^~~
./R/RDataTracker.R:45:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.init.tables()
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:45:3: warning: no visible global function definition for ‘.ddg.init.tables’
  .ddg.init.tables()
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:46:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:47:1: style: Use two spaces to indent, never tabs.
			# error.msg <- paste("Unable to find data node for",var, ". Command", parse(text=cmd.expr), "appears to use it for procedure node", cmd, ".")
^~~
./R/RDataTracker.R:48:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.set <- function(var, value) {
^~~~~~~~
./R/RDataTracker.R:48:5: style: Use two spaces to indent, never tabs.
    	# .ddg.insert.error.message(error.msg)
    ^
./R/RDataTracker.R:49:1: style: Use two spaces to indent, never tabs.
		}
^~
./R/RDataTracker.R:49:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.env[[var]] <- value
  ^~~~~~~~
./R/RDataTracker.R:50:1: style: Use two spaces to indent, never tabs.
	return(vars.set)
^
./R/RDataTracker.R:50:1: style: Use two spaces to indent, never tabs.
	}
^
./R/RDataTracker.R:50:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(invisible(.ddg.env[[var]]))
                   ^~~~~~~~
./R/RDataTracker.R:53:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.set <- function(var) {
^~~~~~~~~~~
./R/RDataTracker.R:54:27: style: Put spaces around all infix operators.
  return(exists(var, envir=.ddg.env))
                         ~^~
./R/RDataTracker.R:54:28: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(exists(var, envir=.ddg.env))
                           ^~~~~~~~
./R/RDataTracker.R:54:28: warning: no visible binding for global variable ‘.ddg.env’
  return(exists(var, envir=.ddg.env))
                           ^~~~~~~~
./R/RDataTracker.R:57:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.get <- function(var) {
^~~~~~~~
./R/RDataTracker.R:57:1: style: Use two spaces to indent, never tabs.
	if (!.ddg.is.set("ddg.debug.lib")) .ddg.set("ddg.debug.lib", FALSE)
^
./R/RDataTracker.R:58:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.set(var)) {
       ^~~~~~~~~~~
./R/RDataTracker.R:60:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.insert.error.message(error.msg)
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:60:5: warning: no visible global function definition for ‘.ddg.insert.error.message’
    .ddg.insert.error.message(error.msg)
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:63:1: style: Use two spaces to indent, never tabs.
	# Used to control sourcing. If already defined, don't change
^
./R/RDataTracker.R:64:12: style: Words within variable and function names should be separated by '_' rather than '.'.
    return(.ddg.env[[var]])
           ^~~~~~~~
./R/RDataTracker.R:64:12: warning: no visible binding for global variable ‘.ddg.env’
    return(.ddg.env[[var]])
           ^~~~~~~~
./R/RDataTracker.R:65:1: style: Use two spaces to indent, never tabs.
	if (!.ddg.is.set("from.source")) .ddg.set("from.source", FALSE)
^
./R/RDataTracker.R:67:1: style: Use two spaces to indent, never tabs.
	# Set current number of checkpoints.
^
./R/RDataTracker.R:68:1: style: Use two spaces to indent, never tabs.
	.ddg.set("ddg.checkpoint.num", 0)
^
./R/RDataTracker.R:70:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.clear <- function() {
^~~~~~~~~~
./R/RDataTracker.R:71:1: style: Use two spaces to indent, never tabs.
	.ddg.set("ddg.checkpoints",
^
./R/RDataTracker.R:72:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.init.tables()
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:72:3: warning: no visible global function definition for ‘.ddg.init.tables’
  .ddg.init.tables()
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:73:16: style: Use two spaces to indent, never tabs.
              #	.ddg.data2proc(deparse(arg), pname)
               ^
./R/RDataTracker.R:74:16: style: Use two spaces to indent, never tabs.
              #	if (.ddg.debug.lib()) print(paste("param:", deparse(arg)))
               ^
./R/RDataTracker.R:76:1: style: Use two spaces to indent, never tabs.
	# Record last command from the preceding console block.
^
./R/RDataTracker.R:77:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.debug.lib <- function() {
^~~~~~~~~~~~~~
./R/RDataTracker.R:77:1: style: Use two spaces to indent, never tabs.
	.ddg.set(".ddg.last.cmd", NULL)
^
./R/RDataTracker.R:78:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.debug.lib"))
          ^~~~~~~~
./R/RDataTracker.R:78:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.debug.lib"))
          ^~~~~~~~
./R/RDataTracker.R:79:1: style: Use two spaces to indent, never tabs.
	# Record value returned by calls to ddg.return.
^
./R/RDataTracker.R:81:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.break <- function() {
^~~~~~~~~~
./R/RDataTracker.R:82:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.break"))
          ^~~~~~~~
./R/RDataTracker.R:82:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.break"))
          ^~~~~~~~
./R/RDataTracker.R:85:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.break.ignore <- function() {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:85:1: style: Use two spaces to indent, never tabs.
	.ddg.set(".ddg.return.values",
^
./R/RDataTracker.R:86:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.break.ignore"))
          ^~~~~~~~
./R/RDataTracker.R:86:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.break.ignore"))
          ^~~~~~~~
./R/RDataTracker.R:87:1: style: Use two spaces to indent, never tabs.
					return.used = logical(size),
^~~~~
./R/RDataTracker.R:88:1: style: Use two spaces to indent, never tabs.
					return.node.id = integer(size),
^~~~~
./R/RDataTracker.R:89:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.path <- function() {
^~~~~~~~~
./R/RDataTracker.R:89:1: style: Use two spaces to indent, never tabs.
					stringsAsFactors=FALSE))
^~~~~
./R/RDataTracker.R:90:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.path"))
          ^~~~~~~~
./R/RDataTracker.R:90:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.path"))
          ^~~~~~~~
./R/RDataTracker.R:93:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.data.dir <- function() {
^~~~~~~~~~~~~
./R/RDataTracker.R:93:1: style: Use two spaces to indent, never tabs.
	# Record the current command to be opened during console execution
^
./R/RDataTracker.R:95:1: style: Use two spaces to indent, never tabs.
	.ddg.set(".ddg.possible.last.cmd", NULL)
^
./R/RDataTracker.R:97:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.path.data <- function() {
^~~~~~~~~~~~~~
./R/RDataTracker.R:97:1: style: Use two spaces to indent, never tabs.
	# Keep track of history.
^
./R/RDataTracker.R:98:1: style: Use two spaces to indent, never tabs.
	.ddg.set(".ddg.history.timestamp", NULL)
^
./R/RDataTracker.R:98:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(paste(.ddg.path(), .ddg.data.dir() , sep="/"))
               ^~~~~~~~~
./R/RDataTracker.R:98:16: warning: no visible global function definition for ‘.ddg.path’
  return(paste(.ddg.path(), .ddg.data.dir() , sep="/"))
               ^~~~~~~~~
./R/RDataTracker.R:98:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(paste(.ddg.path(), .ddg.data.dir() , sep="/"))
                            ^~~~~~~~~~~~~
./R/RDataTracker.R:98:29: warning: no visible global function definition for ‘.ddg.data.dir’
  return(paste(.ddg.path(), .ddg.data.dir() , sep="/"))
                            ^~~~~~~~~~~~~
./R/RDataTracker.R:98:45: style: Commas should never have a space before.
  return(paste(.ddg.path(), .ddg.data.dir() , sep="/"))
                                           ~^
./R/RDataTracker.R:98:50: style: Put spaces around all infix operators.
  return(paste(.ddg.path(), .ddg.data.dir() , sep="/"))
                                                ~^~
./R/RDataTracker.R:100:1: style: Use two spaces to indent, never tabs.
	# Keep track of the last device seen (0 implies NULL).
^
./R/RDataTracker.R:101:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.path.debug <- function() {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:101:1: style: Use two spaces to indent, never tabs.
	.ddg.set("prev.device", 0)
^
./R/RDataTracker.R:102:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(paste(.ddg.path(), "/debug", sep=""))
               ^~~~~~~~~
./R/RDataTracker.R:102:16: warning: no visible global function definition for ‘.ddg.path’
  return(paste(.ddg.path(), "/debug", sep=""))
               ^~~~~~~~~
./R/RDataTracker.R:102:30: warning: Do not use absolute paths.
  return(paste(.ddg.path(), "/debug", sep=""))
                             ^~~~~~
./R/RDataTracker.R:102:42: style: Put spaces around all infix operators.
  return(paste(.ddg.path(), "/debug", sep=""))
                                        ~^~
./R/RDataTracker.R:103:1: style: Use two spaces to indent, never tabs.
	# Store path of current script.
^
./R/RDataTracker.R:104:1: style: Use two spaces to indent, never tabs.
	.ddg.set("ddg.r.script.path", NULL)
^
./R/RDataTracker.R:105:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.path.scripts <- function() {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:106:1: style: Use two spaces to indent, never tabs.
	# Store path of current ddg.
^
./R/RDataTracker.R:106:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(paste(.ddg.path(), "/scripts", sep=""))
               ^~~~~~~~~
./R/RDataTracker.R:106:16: warning: no visible global function definition for ‘.ddg.path’
  return(paste(.ddg.path(), "/scripts", sep=""))
               ^~~~~~~~~
./R/RDataTracker.R:106:30: warning: Do not use absolute paths.
  return(paste(.ddg.path(), "/scripts", sep=""))
                             ^~~~~~~~
./R/RDataTracker.R:106:44: style: Put spaces around all infix operators.
  return(paste(.ddg.path(), "/scripts", sep=""))
                                          ~^~
./R/RDataTracker.R:107:1: style: Use two spaces to indent, never tabs.
	.ddg.set("ddg.path", NULL)
^
./R/RDataTracker.R:109:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.save.debug <- function() {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:109:1: style: Use two spaces to indent, never tabs.
	# No ddg initialized.
^
./R/RDataTracker.R:110:1: style: Use two spaces to indent, never tabs.
	.ddg.set(".ddg.initialized", FALSE)
^
./R/RDataTracker.R:110:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.save.debug"))
         ^~~~~~~~
./R/RDataTracker.R:110:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.save.debug"))
         ^~~~~~~~
./R/RDataTracker.R:112:1: style: Use two spaces to indent, never tabs.
	# No history file.
^
./R/RDataTracker.R:113:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.dnum <- function() {
^~~~~~~~~
./R/RDataTracker.R:113:1: style: Use two spaces to indent, never tabs.
	.ddg.set(".ddg.history.file", NULL)
^
./R/RDataTracker.R:114:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.dnum"))
          ^~~~~~~~
./R/RDataTracker.R:114:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.dnum"))
          ^~~~~~~~
./R/RDataTracker.R:115:1: style: Use two spaces to indent, never tabs.
	# Console is disabled.
^
./R/RDataTracker.R:116:1: style: Use two spaces to indent, never tabs.
	.ddg.set(".ddg.enable.console", FALSE)
^
./R/RDataTracker.R:117:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.pnum <- function() {
^~~~~~~~~
./R/RDataTracker.R:118:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.pnum"))
          ^~~~~~~~
./R/RDataTracker.R:118:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.pnum"))
          ^~~~~~~~
./R/RDataTracker.R:121:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.enum <- function() {
^~~~~~~~~
./R/RDataTracker.R:122:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.enum"))
          ^~~~~~~~
./R/RDataTracker.R:122:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.enum"))
          ^~~~~~~~
./R/RDataTracker.R:125:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.data.nodes <- function() {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:126:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.data.nodes"))
          ^~~~~~~~
./R/RDataTracker.R:126:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.data.nodes"))
          ^~~~~~~~
./R/RDataTracker.R:129:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.proc.nodes <- function() {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:130:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.proc.nodes"))
          ^~~~~~~~
./R/RDataTracker.R:130:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.proc.nodes"))
          ^~~~~~~~
./R/RDataTracker.R:133:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.edges <- function() {
^~~~~~~~~~
./R/RDataTracker.R:134:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.edges"))
          ^~~~~~~~
./R/RDataTracker.R:134:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.edges"))
          ^~~~~~~~
./R/RDataTracker.R:137:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.initial.env <- function() {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:138:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.initial.env"))
         ^~~~~~~~
./R/RDataTracker.R:138:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.initial.env"))
         ^~~~~~~~
./R/RDataTracker.R:141:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.enable.console <- function() {
^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:142:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get(".ddg.enable.console"))
          ^~~~~~~~
./R/RDataTracker.R:142:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get(".ddg.enable.console"))
          ^~~~~~~~
./R/RDataTracker.R:145:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.annotate.on <- function() {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:146:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.annotate.on"))
          ^~~~~~~~
./R/RDataTracker.R:146:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.annotate.on"))
          ^~~~~~~~
./R/RDataTracker.R:149:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.annotate.off <- function() {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:150:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get("ddg.annotate.off"))
          ^~~~~~~~
./R/RDataTracker.R:150:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get("ddg.annotate.off"))
          ^~~~~~~~
./R/RDataTracker.R:153:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.sourced <- function() {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:154:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get(".ddg.is.sourced"))
          ^~~~~~~~
./R/RDataTracker.R:154:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get(".ddg.is.sourced"))
          ^~~~~~~~
./R/RDataTracker.R:157:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.source.parsed <- function() {
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:158:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get(".ddg.source.parsed"))
         ^~~~~~~~
./R/RDataTracker.R:158:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get(".ddg.source.parsed"))
         ^~~~~~~~
./R/RDataTracker.R:161:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.parsed.num <- function() {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:162:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get(".ddg.parsed.num"))
         ^~~~~~~~
./R/RDataTracker.R:162:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get(".ddg.parsed.num"))
         ^~~~~~~~
./R/RDataTracker.R:165:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.sourced.scripts <- function() {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:166:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get(".ddg.sourced.scripts"))
         ^~~~~~~~
./R/RDataTracker.R:166:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get(".ddg.sourced.scripts"))
         ^~~~~~~~
./R/RDataTracker.R:169:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.next.script.num <- function() {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:170:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get(".ddg.next.script.num"))
         ^~~~~~~~
./R/RDataTracker.R:170:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get(".ddg.next.script.num"))
         ^~~~~~~~
./R/RDataTracker.R:173:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.script.num.stack <- function() {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:174:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get(".ddg.script.num.stack"))
         ^~~~~~~~
./R/RDataTracker.R:174:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get(".ddg.script.num.stack"))
         ^~~~~~~~
./R/RDataTracker.R:177:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.enable.source <- function() {
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:178:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.is.set("from.source") && .ddg.get("from.source"))
         ^~~~~~~~~~~
./R/RDataTracker.R:178:10: warning: no visible global function definition for ‘.ddg.is.set’
  return(.ddg.is.set("from.source") && .ddg.get("from.source"))
         ^~~~~~~~~~~
./R/RDataTracker.R:178:40: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.is.set("from.source") && .ddg.get("from.source"))
                                       ^~~~~~~~
./R/RDataTracker.R:178:40: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.is.set("from.source") && .ddg.get("from.source"))
                                       ^~~~~~~~
./R/RDataTracker.R:181:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.start.proc.time <- function() {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:182:1: style: lines should not be more than 80 characters.
  if (.ddg.is.set(".ddg.proc.start.time")) return (.ddg.get(".ddg.proc.start.time"))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:182:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.set(".ddg.proc.start.time")) return (.ddg.get(".ddg.proc.start.time"))
      ^~~~~~~~~~~
./R/RDataTracker.R:182:52: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.set(".ddg.proc.start.time")) return (.ddg.get(".ddg.proc.start.time"))
                                                   ^~~~~~~~
./R/RDataTracker.R:186:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.statement.num <- function() {
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:187:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.statement.num"))
         ^~~~~~~~
./R/RDataTracker.R:187:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.statement.num"))
         ^~~~~~~~
./R/RDataTracker.R:190:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.statements <- function() {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:191:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.statements"))
         ^~~~~~~~
./R/RDataTracker.R:191:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.statements"))
         ^~~~~~~~
./R/RDataTracker.R:194:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.statement <- function(i) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:195:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.statements <- .ddg.statements()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:195:21: warning: no visible global function definition for ‘.ddg.statements’, Did you mean 'ddg.statements'?
  ddg.statements <- .ddg.statements()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:199:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.loop.num <- function() {
^~~~~~~~~~~~~
./R/RDataTracker.R:200:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.loop.num"))
         ^~~~~~~~
./R/RDataTracker.R:200:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.loop.num"))
         ^~~~~~~~
./R/RDataTracker.R:203:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.loops <- function() {
^~~~~~~~~~
./R/RDataTracker.R:204:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.loops"))
         ^~~~~~~~
./R/RDataTracker.R:204:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.loops"))
         ^~~~~~~~
./R/RDataTracker.R:218:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.set.warning <- function(w) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:219:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.warning", w)
  ^~~~~~~~
./R/RDataTracker.R:219:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.warning", w)
  ^~~~~~~~
./R/RDataTracker.R:222:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.clear.warning <- function() {
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:223:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.warning", NA)
  ^~~~~~~~
./R/RDataTracker.R:223:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.warning", NA)
  ^~~~~~~~
./R/RDataTracker.R:226:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.get.warning <- function () {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:227:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.get(".ddg.warning"))
          ^~~~~~~~
./R/RDataTracker.R:227:11: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.get(".ddg.warning"))
          ^~~~~~~~
./R/RDataTracker.R:230:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.warning.occurred <- function() {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:231:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.is.set(".ddg.warning") && !is.na(.ddg.get(".ddg.warning")))
          ^~~~~~~~~~~
./R/RDataTracker.R:231:11: warning: no visible global function definition for ‘.ddg.is.set’
  return (.ddg.is.set(".ddg.warning") && !is.na(.ddg.get(".ddg.warning")))
          ^~~~~~~~~~~
./R/RDataTracker.R:231:49: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.is.set(".ddg.warning") && !is.na(.ddg.get(".ddg.warning")))
                                                ^~~~~~~~
./R/RDataTracker.R:231:49: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.is.set(".ddg.warning") && !is.na(.ddg.get(".ddg.warning")))
                                                ^~~~~~~~
./R/RDataTracker.R:236:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.inc <- function(var) {
^~~~~~~~
./R/RDataTracker.R:237:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  value <- .ddg.get(var)
           ^~~~~~~~
./R/RDataTracker.R:237:12: warning: no visible global function definition for ‘.ddg.get’
  value <- .ddg.get(var)
           ^~~~~~~~
./R/RDataTracker.R:238:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(var, value + 1)
  ^~~~~~~~
./R/RDataTracker.R:238:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(var, value + 1)
  ^~~~~~~~
./R/RDataTracker.R:241:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.dec <- function(var) {
^~~~~~~~
./R/RDataTracker.R:242:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  value <- .ddg.get(var)
           ^~~~~~~~
./R/RDataTracker.R:242:12: warning: no visible global function definition for ‘.ddg.get’
  value <- .ddg.get(var)
           ^~~~~~~~
./R/RDataTracker.R:243:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(var, value - 1)
  ^~~~~~~~
./R/RDataTracker.R:243:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(var, value - 1)
  ^~~~~~~~
./R/RDataTracker.R:246:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.append <- function(...) {
^~~~~~~~~~~
./R/RDataTracker.R:247:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  text <- .ddg.get("ddg.txt")
          ^~~~~~~~
./R/RDataTracker.R:247:11: warning: no visible global function definition for ‘.ddg.get’
  text <- .ddg.get("ddg.txt")
          ^~~~~~~~
./R/RDataTracker.R:248:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib() && length(text) > 1) stop()
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:248:7: warning: no visible global function definition for ‘.ddg.debug.lib’
  if (.ddg.debug.lib() && length(text) > 1) stop()
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:249:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.txt", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:249:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.txt", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:249:43: style: Put spaces around all infix operators.
  .ddg.set("ddg.txt", paste(text, ..., sep=""))
                                         ~^~
./R/RDataTracker.R:252:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.append.inc <- function(...) {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:253:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  increment <- .ddg.get("ddg.increment")
               ^~~~~~~~
./R/RDataTracker.R:253:16: warning: no visible global function definition for ‘.ddg.get’
  increment <- .ddg.get("ddg.increment")
               ^~~~~~~~
./R/RDataTracker.R:254:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.increment", paste(increment, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:254:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.increment", paste(increment, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:254:54: style: Put spaces around all infix operators.
  .ddg.set("ddg.increment", paste(increment, ..., sep=""))
                                                    ~^~
./R/RDataTracker.R:257:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.append.activity <- function(...){
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:258:10: warning: no visible global function definition for ‘.ddg.get’
	text <- .ddg.get('ddg.activity')
         ^~~~~~~~
./R/RDataTracker.R:258:14: style: Put spaces around all infix operators.
	text <- .ddg.get('ddg.activity')
            ~^~~
./R/RDataTracker.R:258:17: style: Words within variable and function names should be separated by '_' rather than '.'.
	text <- .ddg.get('ddg.activity')
                ^~~~~~~~
./R/RDataTracker.R:258:26: style: Only use double-quotes.
	text <- .ddg.get('ddg.activity')
                         ^~~~~~~~~~~~~~
./R/RDataTracker.R:259:5: style: Place a space before left parenthesis, except in a function call.
  if(text!=""){
    ^
./R/RDataTracker.R:259:10: style: Put spaces around all infix operators.
  if(text!=""){
        ~^~~
./R/RDataTracker.R:262:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.activity", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:262:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.activity", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:262:48: style: Put spaces around all infix operators.
  .ddg.set("ddg.activity", paste(text, ..., sep=""))
                                              ~^~
./R/RDataTracker.R:265:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.append.entity <- function(...){
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:266:10: warning: no visible global function definition for ‘.ddg.get’
	text <- .ddg.get('ddg.entity')
         ^~~~~~~~
./R/RDataTracker.R:266:14: style: Put spaces around all infix operators.
	text <- .ddg.get('ddg.entity')
            ~^~~
./R/RDataTracker.R:266:17: style: Words within variable and function names should be separated by '_' rather than '.'.
	text <- .ddg.get('ddg.entity')
                ^~~~~~~~
./R/RDataTracker.R:266:26: style: Only use double-quotes.
	text <- .ddg.get('ddg.entity')
                         ^~~~~~~~~~~~
./R/RDataTracker.R:267:5: style: Place a space before left parenthesis, except in a function call.
  if(text!=""){
    ^
./R/RDataTracker.R:267:10: style: Put spaces around all infix operators.
  if(text!=""){
        ~^~~
./R/RDataTracker.R:270:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.entity", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:270:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.entity", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:270:46: style: Put spaces around all infix operators.
  .ddg.set("ddg.entity", paste(text, ..., sep=""))
                                            ~^~
./R/RDataTracker.R:273:1: style: Variable and function names should be all lowercase.
.ddg.append.wasInformedBy <- function(...){
^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:273:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.append.wasInformedBy <- function(...){
^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:274:10: warning: no visible global function definition for ‘.ddg.get’
	text <- .ddg.get('ddg.wasInformedBy')
         ^~~~~~~~
./R/RDataTracker.R:274:14: style: Put spaces around all infix operators.
	text <- .ddg.get('ddg.wasInformedBy')
            ~^~~
./R/RDataTracker.R:274:17: style: Words within variable and function names should be separated by '_' rather than '.'.
	text <- .ddg.get('ddg.wasInformedBy')
                ^~~~~~~~
./R/RDataTracker.R:274:26: style: Only use double-quotes.
	text <- .ddg.get('ddg.wasInformedBy')
                         ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:275:5: style: Place a space before left parenthesis, except in a function call.
  if(text!=""){
    ^
./R/RDataTracker.R:275:10: style: Put spaces around all infix operators.
  if(text!=""){
        ~^~~
./R/RDataTracker.R:278:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.wasInformedBy", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:278:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.wasInformedBy", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:278:53: style: Put spaces around all infix operators.
  .ddg.set("ddg.wasInformedBy", paste(text, ..., sep=""))
                                                   ~^~
./R/RDataTracker.R:281:1: style: Variable and function names should be all lowercase.
.ddg.append.wasGeneratedBy <- function(...){
^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:281:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.append.wasGeneratedBy <- function(...){
^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:282:10: warning: no visible global function definition for ‘.ddg.get’
	text <- .ddg.get('ddg.wasGeneratedBy')
         ^~~~~~~~
./R/RDataTracker.R:282:14: style: Put spaces around all infix operators.
	text <- .ddg.get('ddg.wasGeneratedBy')
            ~^~~
./R/RDataTracker.R:282:17: style: Words within variable and function names should be separated by '_' rather than '.'.
	text <- .ddg.get('ddg.wasGeneratedBy')
                ^~~~~~~~
./R/RDataTracker.R:282:26: style: Only use double-quotes.
	text <- .ddg.get('ddg.wasGeneratedBy')
                         ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:283:5: style: Place a space before left parenthesis, except in a function call.
  if(text!=""){
    ^
./R/RDataTracker.R:283:10: style: Put spaces around all infix operators.
  if(text!=""){
        ~^~~
./R/RDataTracker.R:286:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.wasGeneratedBy", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:286:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.wasGeneratedBy", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:286:54: style: Put spaces around all infix operators.
  .ddg.set("ddg.wasGeneratedBy", paste(text, ..., sep=""))
                                                    ~^~
./R/RDataTracker.R:289:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.append.used <- function(...){
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:290:10: warning: no visible global function definition for ‘.ddg.get’
	text <- .ddg.get('ddg.used')
         ^~~~~~~~
./R/RDataTracker.R:290:14: style: Put spaces around all infix operators.
	text <- .ddg.get('ddg.used')
            ~^~~
./R/RDataTracker.R:290:17: style: Words within variable and function names should be separated by '_' rather than '.'.
	text <- .ddg.get('ddg.used')
                ^~~~~~~~
./R/RDataTracker.R:290:26: style: Only use double-quotes.
	text <- .ddg.get('ddg.used')
                         ^~~~~~~~~~
./R/RDataTracker.R:291:5: style: Place a space before left parenthesis, except in a function call.
  if(text!=""){
    ^
./R/RDataTracker.R:291:10: style: Put spaces around all infix operators.
  if(text!=""){
        ~^~~
./R/RDataTracker.R:294:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.used", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:294:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.used", paste(text, ..., sep=""))
  ^~~~~~~~
./R/RDataTracker.R:294:44: style: Put spaces around all infix operators.
  .ddg.set("ddg.used", paste(text, ..., sep=""))
                                          ~^~
./R/RDataTracker.R:297:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.add.rows <- function(df, new.rows) {
^~~~~~~~~~~~~
./R/RDataTracker.R:298:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  table <- .ddg.get(df)
           ^~~~~~~~
./R/RDataTracker.R:298:12: warning: no visible global function definition for ‘.ddg.get’
  table <- .ddg.get(df)
           ^~~~~~~~
./R/RDataTracker.R:299:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(df, rbind(table, new.rows))
  ^~~~~~~~
./R/RDataTracker.R:299:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(df, rbind(table, new.rows))
  ^~~~~~~~
./R/RDataTracker.R:302:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.push <- function(x, value) {
^~~~~~~~~
./R/RDataTracker.R:306:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.pop <- function(x) {
^~~~~~~~
./R/RDataTracker.R:310:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.add.ddgstatement <- function(parsed.stmt) {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:311:23: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.statements <- c(.ddg.statements(), parsed.stmt)
                      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:311:23: warning: no visible global function definition for ‘.ddg.statements’, Did you mean 'ddg.statements'?
  ddg.statements <- c(.ddg.statements(), parsed.stmt)
                      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:312:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.statements", ddg.statements)
  ^~~~~~~~
./R/RDataTracker.R:312:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.statements", ddg.statements)
  ^~~~~~~~
./R/RDataTracker.R:315:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.add.loop <- function() {
^~~~~~~~~~~~~
./R/RDataTracker.R:316:18: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.loops <- c(.ddg.loops(), 0)
                 ^~~~~~~~~~
./R/RDataTracker.R:316:18: warning: no visible global function definition for ‘.ddg.loops’, Did you mean 'ddg.loops'?
  ddg.loops <- c(.ddg.loops(), 0)
                 ^~~~~~~~~~
./R/RDataTracker.R:317:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.loops", ddg.loops)
  ^~~~~~~~
./R/RDataTracker.R:317:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.loops", ddg.loops)
  ^~~~~~~~
./R/RDataTracker.R:325:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.get.initial.env <- function() {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:327:26: style: Put spaces around all infix operators.
  e.ls <- ls(e, all.names=TRUE)
                        ~^~
./R/RDataTracker.R:329:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  not.ddg.func <- function (name) {
  ^~~~~~~~~~~~
./R/RDataTracker.R:333:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  x <- Filter (not.ddg.func, e.ls)
               ^~~~~~~~~~~~
./R/RDataTracker.R:335:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.initial.env <- data.frame(x)
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:336:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  colnames(ddg.initial.env) <- "ddg.name"
           ^~~~~~~~~~~~~~~
./R/RDataTracker.R:338:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.initial.env", ddg.initial.env)
  ^~~~~~~~
./R/RDataTracker.R:338:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.initial.env", ddg.initial.env)
  ^~~~~~~~
./R/RDataTracker.R:338:31: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.initial.env", ddg.initial.env)
                              ^~~~~~~~~~~~~~~
./R/RDataTracker.R:347:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.init.tables <- function() {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:350:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.get.initial.env()
  ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:350:3: warning: no visible global function definition for ‘.ddg.get.initial.env’
  .ddg.get.initial.env()
  ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:352:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.proc.nodes", data.frame(ddg.type = character(size),
  ^~~~~~~~
./R/RDataTracker.R:361:23: style: Put spaces around all infix operators.
          ddg.startCol= numeric(size),
                     ~^
./R/RDataTracker.R:362:22: style: Put spaces around all infix operators.
          ddg.endLine= numeric(size),
                    ~^
./R/RDataTracker.R:363:21: style: Put spaces around all infix operators.
          ddg.endCol= numeric(size),
                   ~^
./R/RDataTracker.R:364:27: style: Put spaces around all infix operators.
          stringsAsFactors=FALSE))
                         ~^~
./R/RDataTracker.R:366:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.data.nodes", data.frame(ddg.type = character(size),
  ^~~~~~~~
./R/RDataTracker.R:374:56: style: Put spaces around all infix operators.
          ddg.current = logical(size), stringsAsFactors=FALSE))
                                                      ~^~
./R/RDataTracker.R:376:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.edges", data.frame(ddg.num = numeric(size),
  ^~~~~~~~
./R/RDataTracker.R:379:53: style: Put spaces around all infix operators.
          ddg.to = character(size), stringsAsFactors=FALSE))
                                                   ~^~
./R/RDataTracker.R:382:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.pnum", 0)
  ^~~~~~~~
./R/RDataTracker.R:382:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.pnum", 0)
  ^~~~~~~~
./R/RDataTracker.R:383:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.dnum", 0)
  ^~~~~~~~
./R/RDataTracker.R:383:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.dnum", 0)
  ^~~~~~~~
./R/RDataTracker.R:384:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.enum", 0)
  ^~~~~~~~
./R/RDataTracker.R:384:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.enum", 0)
  ^~~~~~~~
./R/RDataTracker.R:388:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.txt", "")
  ^~~~~~~~
./R/RDataTracker.R:388:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.txt", "")
  ^~~~~~~~
./R/RDataTracker.R:392:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.increment", "")
  ^~~~~~~~
./R/RDataTracker.R:392:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.increment", "")
  ^~~~~~~~
./R/RDataTracker.R:395:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.activity", "")
  ^~~~~~~~
./R/RDataTracker.R:395:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.activity", "")
  ^~~~~~~~
./R/RDataTracker.R:396:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.entity", "")
  ^~~~~~~~
./R/RDataTracker.R:396:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.entity", "")
  ^~~~~~~~
./R/RDataTracker.R:397:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set('ddg.wasInformedBy', "")
  ^~~~~~~~
./R/RDataTracker.R:397:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set('ddg.wasInformedBy', "")
  ^~~~~~~~
./R/RDataTracker.R:397:12: style: Only use double-quotes.
  .ddg.set('ddg.wasInformedBy', "")
           ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:398:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set('ddg.wasGeneratedBy', "")
  ^~~~~~~~
./R/RDataTracker.R:398:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set('ddg.wasGeneratedBy', "")
  ^~~~~~~~
./R/RDataTracker.R:398:12: style: Only use double-quotes.
  .ddg.set('ddg.wasGeneratedBy', "")
           ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:399:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set('ddg.used', "")
  ^~~~~~~~
./R/RDataTracker.R:399:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set('ddg.used', "")
  ^~~~~~~~
./R/RDataTracker.R:399:12: style: Only use double-quotes.
  .ddg.set('ddg.used', "")
           ^~~~~~~~~~
./R/RDataTracker.R:403:7: warning: no visible global function definition for ‘.ddg.is.set’
	if (!.ddg.is.set("ddg.debug.lib")) .ddg.set("ddg.debug.lib", FALSE)
      ^~~~~~~~~~~
./R/RDataTracker.R:403:12: style: Place a space before left parenthesis, except in a function call.
	if (!.ddg.is.set("ddg.debug.lib")) .ddg.set("ddg.debug.lib", FALSE)
           ^
./R/RDataTracker.R:403:14: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!.ddg.is.set("ddg.debug.lib")) .ddg.set("ddg.debug.lib", FALSE)
             ^~~~~~~~~~~
./R/RDataTracker.R:403:37: warning: no visible global function definition for ‘.ddg.set’
	if (!.ddg.is.set("ddg.debug.lib")) .ddg.set("ddg.debug.lib", FALSE)
                                    ^~~~~~~~
./R/RDataTracker.R:403:44: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!.ddg.is.set("ddg.debug.lib")) .ddg.set("ddg.debug.lib", FALSE)
                                           ^~~~~~~~
./R/RDataTracker.R:406:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.break", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:406:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.break", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:407:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.break.ignore", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:407:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.break.ignore", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:411:7: warning: no visible global function definition for ‘.ddg.is.set’
	if (!.ddg.is.set("from.source")) .ddg.set("from.source", FALSE)
      ^~~~~~~~~~~
./R/RDataTracker.R:411:12: style: Place a space before left parenthesis, except in a function call.
	if (!.ddg.is.set("from.source")) .ddg.set("from.source", FALSE)
           ^
./R/RDataTracker.R:411:14: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!.ddg.is.set("from.source")) .ddg.set("from.source", FALSE)
             ^~~~~~~~~~~
./R/RDataTracker.R:411:35: warning: no visible global function definition for ‘.ddg.set’
	if (!.ddg.is.set("from.source")) .ddg.set("from.source", FALSE)
                                  ^~~~~~~~
./R/RDataTracker.R:411:42: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!.ddg.is.set("from.source")) .ddg.set("from.source", FALSE)
                                         ^~~~~~~~
./R/RDataTracker.R:414:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set("ddg.checkpoint.num", 0)
 ^~~~~~~~
./R/RDataTracker.R:414:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set("ddg.checkpoint.num", 0)
        ^~~~~~~~
./R/RDataTracker.R:417:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set("ddg.checkpoints",
        ^~~~~~~~
./R/RDataTracker.R:418:30: style: Put spaces around all infix operators.
          data.frame(filename=character(ddg.MAX_CHECKPOINTS),
                            ~^~
./R/RDataTracker.R:419:26: style: Put spaces around all infix operators.
          checkpoint.name=character(ddg.MAX_CHECKPOINTS),
                        ~^~
./R/RDataTracker.R:420:27: style: Put spaces around all infix operators.
          stringsAsFactors=FALSE))
                         ~^~
./R/RDataTracker.R:423:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set(".ddg.last.cmd", NULL)
 ^~~~~~~~
./R/RDataTracker.R:423:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set(".ddg.last.cmd", NULL)
        ^~~~~~~~
./R/RDataTracker.R:431:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set(".ddg.return.values",
        ^~~~~~~~
./R/RDataTracker.R:432:30: style: Put spaces around all infix operators.
          data.frame(ddg.call=character(size),
                            ~^~
./R/RDataTracker.R:437:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.num.returns", 0)
  ^~~~~~~~
./R/RDataTracker.R:437:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.num.returns", 0)
  ^~~~~~~~
./R/RDataTracker.R:441:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set(".ddg.possible.last.cmd", NULL)
 ^~~~~~~~
./R/RDataTracker.R:441:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set(".ddg.possible.last.cmd", NULL)
        ^~~~~~~~
./R/RDataTracker.R:444:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set(".ddg.history.timestamp", NULL)
 ^~~~~~~~
./R/RDataTracker.R:444:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set(".ddg.history.timestamp", NULL)
        ^~~~~~~~
./R/RDataTracker.R:447:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set("prev.device", 0)
 ^~~~~~~~
./R/RDataTracker.R:447:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set("prev.device", 0)
        ^~~~~~~~
./R/RDataTracker.R:450:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set("ddg.r.script.path", NULL)
 ^~~~~~~~
./R/RDataTracker.R:450:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set("ddg.r.script.path", NULL)
        ^~~~~~~~
./R/RDataTracker.R:453:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set("ddg.path", NULL)
 ^~~~~~~~
./R/RDataTracker.R:453:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set("ddg.path", NULL)
        ^~~~~~~~
./R/RDataTracker.R:456:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set(".ddg.initialized", FALSE)
 ^~~~~~~~
./R/RDataTracker.R:456:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set(".ddg.initialized", FALSE)
        ^~~~~~~~
./R/RDataTracker.R:459:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set(".ddg.history.file", NULL)
 ^~~~~~~~
./R/RDataTracker.R:459:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set(".ddg.history.file", NULL)
        ^~~~~~~~
./R/RDataTracker.R:462:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set(".ddg.enable.console", FALSE)
 ^~~~~~~~
./R/RDataTracker.R:462:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set(".ddg.enable.console", FALSE)
        ^~~~~~~~
./R/RDataTracker.R:465:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.annotate.on", NULL)
  ^~~~~~~~
./R/RDataTracker.R:465:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.annotate.on", NULL)
  ^~~~~~~~
./R/RDataTracker.R:468:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.annotate.off", NULL)
  ^~~~~~~~
./R/RDataTracker.R:468:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.annotate.off", NULL)
  ^~~~~~~~
./R/RDataTracker.R:471:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.is.sourced", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:471:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.is.sourced", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:474:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.next.script.num", 0)
  ^~~~~~~~
./R/RDataTracker.R:474:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.next.script.num", 0)
  ^~~~~~~~
./R/RDataTracker.R:477:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.parsed.num", 1)
  ^~~~~~~~
./R/RDataTracker.R:477:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.parsed.num", 1)
  ^~~~~~~~
./R/RDataTracker.R:480:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.script.num.stack", 0)
  ^~~~~~~~
./R/RDataTracker.R:480:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.script.num.stack", 0)
  ^~~~~~~~
./R/RDataTracker.R:483:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.sourced.scripts", NULL)
  ^~~~~~~~
./R/RDataTracker.R:483:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.sourced.scripts", NULL)
  ^~~~~~~~
./R/RDataTracker.R:486:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.source.parsed", NULL)
  ^~~~~~~~
./R/RDataTracker.R:486:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.source.parsed", NULL)
  ^~~~~~~~
./R/RDataTracker.R:489:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.save.debug", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:489:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.save.debug", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:492:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.statement.num", 0)
  ^~~~~~~~
./R/RDataTracker.R:492:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.statement.num", 0)
  ^~~~~~~~
./R/RDataTracker.R:493:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:495:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.statements", list())
  ^~~~~~~~
./R/RDataTracker.R:495:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.statements", list())
  ^~~~~~~~
./R/RDataTracker.R:496:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:498:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.loop.num", 0)
  ^~~~~~~~
./R/RDataTracker.R:498:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.loop.num", 0)
  ^~~~~~~~
./R/RDataTracker.R:499:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:501:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.loops", list())
  ^~~~~~~~
./R/RDataTracker.R:501:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.loops", list())
  ^~~~~~~~
./R/RDataTracker.R:502:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:504:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.loop.annotate", TRUE)
  ^~~~~~~~
./R/RDataTracker.R:504:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.loop.annotate", TRUE)
  ^~~~~~~~
./R/RDataTracker.R:507:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.set("ddg.max.snapshot.size")) {
       ^~~~~~~~~~~
./R/RDataTracker.R:508:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.snapshot.size", 100)
    ^~~~~~~~
./R/RDataTracker.R:508:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.snapshot.size", 100)
    ^~~~~~~~
./R/RDataTracker.R:517:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.set.history <- function(lines=16384){
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:518:33: style: Put spaces around all infix operators.
	Sys.setenv("R_HISTSIZE" = lines)
                               ~^~
./R/RDataTracker.R:524:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.init.environ <- function() {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:525:14: style: Words within variable and function names should be separated by '_' rather than '.'.
  dir.create(.ddg.path(), showWarnings=FALSE)
             ^~~~~~~~~
./R/RDataTracker.R:525:14: warning: no visible global function definition for ‘.ddg.path’
  dir.create(.ddg.path(), showWarnings=FALSE)
             ^~~~~~~~~
./R/RDataTracker.R:525:39: style: Put spaces around all infix operators.
  dir.create(.ddg.path(), showWarnings=FALSE)
                                     ~^~
./R/RDataTracker.R:526:14: style: Words within variable and function names should be separated by '_' rather than '.'.
  dir.create(.ddg.path.data(), showWarnings=FALSE)
             ^~~~~~~~~~~~~~
./R/RDataTracker.R:526:14: warning: no visible global function definition for ‘.ddg.path.data’
  dir.create(.ddg.path.data(), showWarnings=FALSE)
             ^~~~~~~~~~~~~~
./R/RDataTracker.R:526:44: style: Put spaces around all infix operators.
  dir.create(.ddg.path.data(), showWarnings=FALSE)
                                          ~^~
./R/RDataTracker.R:527:14: style: Words within variable and function names should be separated by '_' rather than '.'.
  dir.create(.ddg.path.debug(), showWarnings=FALSE)
             ^~~~~~~~~~~~~~~
./R/RDataTracker.R:527:14: warning: no visible global function definition for ‘.ddg.path.debug’
  dir.create(.ddg.path.debug(), showWarnings=FALSE)
             ^~~~~~~~~~~~~~~
./R/RDataTracker.R:527:45: style: Put spaces around all infix operators.
  dir.create(.ddg.path.debug(), showWarnings=FALSE)
                                           ~^~
./R/RDataTracker.R:528:14: style: Words within variable and function names should be separated by '_' rather than '.'.
  dir.create(.ddg.path.scripts(), showWarnings=FALSE)
             ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:528:14: warning: no visible global function definition for ‘.ddg.path.scripts’
  dir.create(.ddg.path.scripts(), showWarnings=FALSE)
             ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:528:47: style: Put spaces around all infix operators.
  dir.create(.ddg.path.scripts(), showWarnings=FALSE)
                                             ~^~
./R/RDataTracker.R:530:24: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (interactive() && .ddg.enable.console()) {
                       ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:531:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set('ddg.original.hist.size', Sys.getenv('R_HISTSIZE'))
    ^~~~~~~~
./R/RDataTracker.R:531:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set('ddg.original.hist.size', Sys.getenv('R_HISTSIZE'))
    ^~~~~~~~
./R/RDataTracker.R:531:14: style: Only use double-quotes.
    .ddg.set('ddg.original.hist.size', Sys.getenv('R_HISTSIZE'))
             ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:531:51: style: Only use double-quotes.
    .ddg.set('ddg.original.hist.size', Sys.getenv('R_HISTSIZE'))
                                                  ^~~~~~~~~~~~
./R/RDataTracker.R:532:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set.history()
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:532:5: warning: no visible global function definition for ‘.ddg.set.history’
    .ddg.set.history()
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:540:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.sourced.script.names <- function() {
^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:541:9: style: Words within variable and function names should be separated by '_' rather than '.'.
  ss <- .ddg.sourced.scripts()
        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:541:9: warning: no visible global function definition for ‘.ddg.sourced.scripts’
  ss <- .ddg.sourced.scripts()
        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:546:38: style: Put spaces around all infix operators.
    snames <- paste0(snames, collapse=",")
                                    ~^~
./R/RDataTracker.R:555:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.sourced.script.timestamps<- function() {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:555:31: style: Put spaces around all infix operators.
.ddg.sourced.script.timestamps<- function() {
                             ~^
./R/RDataTracker.R:556:9: style: Words within variable and function names should be separated by '_' rather than '.'.
  ss <- .ddg.sourced.scripts()
        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:556:9: warning: no visible global function definition for ‘.ddg.sourced.scripts’
  ss <- .ddg.sourced.scripts()
        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:561:6: style: Commented code should be removed.
    #print(paste(".ddg.sourced.scripts: snames = ", snames))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:563:1: style: lines should not be more than 80 characters.
    #print(paste(".ddg.sourced.script.timestamps: after file.info, stimes = ", stimes))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:563:6: style: Commented code should be removed.
    #print(paste(".ddg.sourced.script.timestamps: after file.info, stimes = ", stimes))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:564:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    stimes <- .ddg.format.time(stimes)
              ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:564:15: warning: no visible global function definition for ‘.ddg.format.time’
    stimes <- .ddg.format.time(stimes)
              ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:565:1: style: lines should not be more than 80 characters.
    #print(paste(".ddg.sourced.script.timestamps: after format, stimes = ", stimes))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:565:6: style: Commented code should be removed.
    #print(paste(".ddg.sourced.script.timestamps: after format, stimes = ", stimes))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:566:38: style: Put spaces around all infix operators.
    stimes <- paste0(stimes, collapse=",")
                                    ~^~
./R/RDataTracker.R:567:1: style: lines should not be more than 80 characters.
    #print(paste(".ddg.sourced.script.timestamps: after collapsing, stimes = ", stimes))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:567:6: style: Commented code should be removed.
    #print(paste(".ddg.sourced.script.timestamps: after collapsing, stimes = ", stimes))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:575:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.sourced.script.names.json <- function() {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:576:9: style: Words within variable and function names should be separated by '_' rather than '.'.
  ss <- .ddg.sourced.scripts()
        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:576:9: warning: no visible global function definition for ‘.ddg.sourced.scripts’
  ss <- .ddg.sourced.scripts()
        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:583:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    stimes <- .ddg.format.time(stimes)
              ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:583:15: warning: no visible global function definition for ‘.ddg.format.time’
    stimes <- .ddg.format.time(stimes)
              ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:585:52: style: Commas should never have a space before.
    scriptarray <- paste("\t{\"number\" : \"", ss[ , 1], "\",
                                                  ~^
./R/RDataTracker.R:586:45: style: Commas should always have a space after.
                             \"name\" : \"",ss[ , 2], "\",
                                            ^
./R/RDataTracker.R:586:49: style: Commas should never have a space before.
                             \"name\" : \"",ss[ , 2], "\",
                                               ~^
./R/RDataTracker.R:587:50: style: Commas should always have a space after.
                             \"timestamp\" : \"",stimes, "\"}",
                                                 ^
./R/RDataTracker.R:588:45: style: Put spaces around all infix operators.
                         sep = "", collapse =",\n")
                                            ^~
./R/RDataTracker.R:596:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.installedpackages <- function(){
^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:599:35: style: Commas should always have a space after.
  installed <- packages[packages[,2] == "*",]
                                  ^
./R/RDataTracker.R:599:45: style: Commas should always have a space after.
  installed <- packages[packages[,2] == "*",]
                                            ^
./R/RDataTracker.R:600:27: style: Commas should never have a space before.
  installed <- installed[ ,c(1,3)]
                         ~^
./R/RDataTracker.R:600:28: style: Commas should always have a space after.
  installed <- installed[ ,c(1,3)]
                           ^
./R/RDataTracker.R:600:32: style: Commas should always have a space after.
  installed <- installed[ ,c(1,3)]
                               ^
./R/RDataTracker.R:604:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.installedpackages.json <- function(){
^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:605:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  installed <- .ddg.installedpackages()
               ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:605:16: warning: no visible global function definition for ‘.ddg.installedpackages’
  installed <- .ddg.installedpackages()
               ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:607:1: style: lines should not be more than 80 characters.
  packagearray <- paste("{\"package\" : \"", installed[,1], "\", \"version\" : \"",installed[,2], "\"}", sep = "", collapse =",\n\t")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:607:57: style: Commas should always have a space after.
  packagearray <- paste("{\"package\" : \"", installed[,1], "\", \"version\" : \"",installed[,2], "\"}", sep = "", collapse =",\n\t")
                                                        ^
./R/RDataTracker.R:607:84: style: Commas should always have a space after.
  packagearray <- paste("{\"package\" : \"", installed[,1], "\", \"version\" : \"",installed[,2], "\"}", sep = "", collapse =",\n\t")
                                                                                   ^
./R/RDataTracker.R:607:95: style: Commas should always have a space after.
  packagearray <- paste("{\"package\" : \"", installed[,1], "\", \"version\" : \"",installed[,2], "\"}", sep = "", collapse =",\n\t")
                                                                                              ^
./R/RDataTracker.R:607:125: style: Put spaces around all infix operators.
  packagearray <- paste("{\"package\" : \"", installed[,1], "\", \"version\" : \"",installed[,2], "\"}", sep = "", collapse =",\n\t")
                                                                                                                            ^~
./R/RDataTracker.R:614:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.txt.environ <- function() {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:619:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  time <- .ddg.get("ddg.start.time")
          ^~~~~~~~
./R/RDataTracker.R:619:11: warning: no visible global function definition for ‘.ddg.get’
  time <- .ddg.get("ddg.start.time")
          ^~~~~~~~
./R/RDataTracker.R:620:64: style: Put spaces around all infix operators.
  environ <- paste("Architecture=\"", architecture, "\"\n", sep="")
                                                              ~^~
./R/RDataTracker.R:621:1: style: lines should not be more than 80 characters.
  environ <- paste(environ, "OperatingSystem=\"", operating.system, "\"\n", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:621:80: style: Put spaces around all infix operators.
  environ <- paste(environ, "OperatingSystem=\"", operating.system, "\"\n", sep="")
                                                                              ~^~
./R/RDataTracker.R:622:52: style: Put spaces around all infix operators.
  environ <- paste(environ, "Language=\"R\"\n", sep="")
                                                  ~^~
./R/RDataTracker.R:623:73: style: Put spaces around all infix operators.
  environ <- paste(environ, "LanguageVersion=\"", r.version, "\"\n", sep="")
                                                                       ~^~
./R/RDataTracker.R:624:1: style: lines should not be more than 80 characters.
  environ <- paste(environ, "RDataTrackerVersion=\"", lib.version, "\"\n", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:624:79: style: Put spaces around all infix operators.
  environ <- paste(environ, "RDataTrackerVersion=\"", lib.version, "\"\n", sep="")
                                                                             ~^~
./R/RDataTracker.R:625:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.r.script.path <- .ddg.get("ddg.r.script.path")
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:625:24: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.r.script.path <- .ddg.get("ddg.r.script.path")
                       ^~~~~~~~
./R/RDataTracker.R:625:24: warning: no visible global function definition for ‘.ddg.get’
  ddg.r.script.path <- .ddg.get("ddg.r.script.path")
                       ^~~~~~~~
./R/RDataTracker.R:626:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!is.null(ddg.r.script.path)) {
               ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:627:44: style: Words within variable and function names should be separated by '_' rather than '.'.
    environ <- paste(environ, "Script=\"", ddg.r.script.path, "\"\n", sep="")
                                           ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:627:74: style: Put spaces around all infix operators.
    environ <- paste(environ, "Script=\"", ddg.r.script.path, "\"\n", sep="")
                                                                        ~^~
./R/RDataTracker.R:628:1: style: lines should not be more than 80 characters.
    environ <- paste(environ, "SourcedScripts=\"", .ddg.sourced.script.names(), "\"\n", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:628:52: style: Words within variable and function names should be separated by '_' rather than '.'.
    environ <- paste(environ, "SourcedScripts=\"", .ddg.sourced.script.names(), "\"\n", sep="")
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:628:52: warning: no visible global function definition for ‘.ddg.sourced.script.names’
    environ <- paste(environ, "SourcedScripts=\"", .ddg.sourced.script.names(), "\"\n", sep="")
                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:628:92: style: Put spaces around all infix operators.
    environ <- paste(environ, "SourcedScripts=\"", .ddg.sourced.script.names(), "\"\n", sep="")
                                                                                          ~^~
./R/RDataTracker.R:629:1: style: lines should not be more than 80 characters.
    environ <- paste(environ, "ProcessFileTimestamp=\"", .ddg.format.time(file.info(ddg.r.script.path)$mtime), "\"\n", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:629:58: style: Words within variable and function names should be separated by '_' rather than '.'.
    environ <- paste(environ, "ProcessFileTimestamp=\"", .ddg.format.time(file.info(ddg.r.script.path)$mtime), "\"\n", sep="")
                                                         ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:629:58: warning: no visible global function definition for ‘.ddg.format.time’
    environ <- paste(environ, "ProcessFileTimestamp=\"", .ddg.format.time(file.info(ddg.r.script.path)$mtime), "\"\n", sep="")
                                                         ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:629:85: style: Words within variable and function names should be separated by '_' rather than '.'.
    environ <- paste(environ, "ProcessFileTimestamp=\"", .ddg.format.time(file.info(ddg.r.script.path)$mtime), "\"\n", sep="")
                                                                                    ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:629:123: style: Put spaces around all infix operators.
    environ <- paste(environ, "ProcessFileTimestamp=\"", .ddg.format.time(file.info(ddg.r.script.path)$mtime), "\"\n", sep="")
                                                                                                                         ~^~
./R/RDataTracker.R:630:1: style: lines should not be more than 80 characters.
    #print(paste(".ddg.txt.environ: .ddg.sourced.script.names() = ", .ddg.sourced.script.names()))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:630:6: style: Commented code should be removed.
    #print(paste(".ddg.txt.environ: .ddg.sourced.script.names() = ", .ddg.sourced.script.names()))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:631:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    stimes <- .ddg.sourced.script.timestamps()
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:631:15: warning: no visible global function definition for ‘.ddg.sourced.script.timestamps’
    stimes <- .ddg.sourced.script.timestamps()
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:633:1: style: lines should not be more than 80 characters.
      environ <- paste(environ, "SourcedScriptTimestamps=\"", stimes, "\"\n", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:633:82: style: Put spaces around all infix operators.
      environ <- paste(environ, "SourcedScriptTimestamps=\"", stimes, "\"\n", sep="")
                                                                                ~^~
./R/RDataTracker.R:638:75: style: Put spaces around all infix operators.
    environ <- paste(environ, "ProcessFileTimestamp=\"", time, "\"\n", sep="")
                                                                         ~^~
./R/RDataTracker.R:640:72: style: Put spaces around all infix operators.
  environ <- paste(environ, "WorkingDirectory=\"", getwd(), "\"\n", sep="")
                                                                      ~^~
./R/RDataTracker.R:641:48: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, "DDGDirectory=\"", .ddg.path(), "\"\n", sep="")
                                               ^~~~~~~~~
./R/RDataTracker.R:641:48: warning: no visible global function definition for ‘.ddg.path’
  environ <- paste(environ, "DDGDirectory=\"", .ddg.path(), "\"\n", sep="")
                                               ^~~~~~~~~
./R/RDataTracker.R:641:72: style: Put spaces around all infix operators.
  environ <- paste(environ, "DDGDirectory=\"", .ddg.path(), "\"\n", sep="")
                                                                      ~^~
./R/RDataTracker.R:642:61: style: Put spaces around all infix operators.
  environ <- paste(environ, "DateTime=\"", time, "\"\n", sep="")
                                                           ~^~
./R/RDataTracker.R:643:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  installed <- .ddg.installedpackages()
               ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:643:16: warning: no visible global function definition for ‘.ddg.installedpackages’
  installed <- .ddg.installedpackages()
               ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:645:1: style: lines should not be more than 80 characters.
                   paste(installed[,1], installed[,2], sep = " ", collapse = ", "), "\"\n", sep = "")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:645:37: style: Commas should always have a space after.
                   paste(installed[,1], installed[,2], sep = " ", collapse = ", "), "\"\n", sep = "")
                                    ^
./R/RDataTracker.R:645:52: style: Commas should always have a space after.
                   paste(installed[,1], installed[,2], sep = " ", collapse = ", "), "\"\n", sep = "")
                                                   ^
./R/RDataTracker.R:651:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.txt.current <- function() {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:652:14: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- .ddg.txt.environ()
             ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:652:14: warning: no visible global function definition for ‘.ddg.txt.environ’
  environ <- .ddg.txt.environ()
             ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:653:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  pnum <- .ddg.get("ddg.pnum")
          ^~~~~~~~
./R/RDataTracker.R:653:11: warning: no visible global function definition for ‘.ddg.get’
  pnum <- .ddg.get("ddg.pnum")
          ^~~~~~~~
./R/RDataTracker.R:654:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  dtxt <- .ddg.get("ddg.txt")
          ^~~~~~~~
./R/RDataTracker.R:654:11: warning: no visible global function definition for ‘.ddg.get’
  dtxt <- .ddg.get("ddg.txt")
          ^~~~~~~~
./R/RDataTracker.R:655:47: style: Put spaces around all infix operators.
  dstr <- paste(environ, pnum, "\n", dtxt, sep="")
                                             ~^~
./R/RDataTracker.R:662:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.txt.write <- function() {
^~~~~~~~~~~~~~
./R/RDataTracker.R:663:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  fileout <- paste(.ddg.path(), "/ddg.txt", sep="")
                   ^~~~~~~~~
./R/RDataTracker.R:663:20: warning: no visible global function definition for ‘.ddg.path’
  fileout <- paste(.ddg.path(), "/ddg.txt", sep="")
                   ^~~~~~~~~
./R/RDataTracker.R:663:34: warning: Do not use absolute paths.
  fileout <- paste(.ddg.path(), "/ddg.txt", sep="")
                                 ^~~~~~~~
./R/RDataTracker.R:663:48: style: Put spaces around all infix operators.
  fileout <- paste(.ddg.path(), "/ddg.txt", sep="")
                                              ~^~
./R/RDataTracker.R:664:5: style: Commented code should be removed.
  # if (interactive()) print(paste("Saving DDG in ", fileout))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:665:14: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.txt <- .ddg.txt.current()
             ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:665:14: warning: no visible global function definition for ‘.ddg.txt.current’
  ddg.txt <- .ddg.txt.current()
             ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:672:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.txt.increment <- function() {
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:674:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  dtxt <- .ddg.get("ddg.increment")
          ^~~~~~~~
./R/RDataTracker.R:674:11: warning: no visible global function definition for ‘.ddg.get’
  dtxt <- .ddg.get("ddg.increment")
          ^~~~~~~~
./R/RDataTracker.R:676:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.increment", "")
  ^~~~~~~~
./R/RDataTracker.R:676:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.increment", "")
  ^~~~~~~~
./R/RDataTracker.R:682:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.json.nv <- function(name, value) {
^~~~~~~~~~~~
./R/RDataTracker.R:683:59: style: Put spaces around all infix operators.
  jstr <- paste("\"", name, "\" : \"", value, "\",\n", sep="")
                                                         ~^~
./R/RDataTracker.R:687:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.json.prefix <- function(){
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:689:1: style: lines should not be more than 80 characters.
  prefix <- "\"prefix\" : {\n\"prov\" : \"http://www.w3.org/ns/prov#\",\n\"rdt\" : \"http://rdatatracker.org/\"\n},\n"
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:696:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.json.environ <- function() {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:699:59: style: Put spaces around all infix operators.
  environ <- paste(environ, "\n\"environment\" : {\n", sep="")
                                                         ~^~
./R/RDataTracker.R:701:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:name", "environment"), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:701:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:name", "environment"), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:701:73: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:name", "environment"), sep="")
                                                                       ~^~
./R/RDataTracker.R:704:1: style: lines should not be more than 80 characters.
  environ <- paste(environ, .ddg.json.nv("rdt:architecture", architecture), sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:704:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:architecture", architecture), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:704:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:architecture", architecture), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:704:80: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:architecture", architecture), sep="")
                                                                              ~^~
./R/RDataTracker.R:707:1: style: lines should not be more than 80 characters.
  environ <- paste(environ, .ddg.json.nv("rdt:operatingSystem", operating.system), sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:707:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:operatingSystem", operating.system), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:707:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:operatingSystem", operating.system), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:707:87: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:operatingSystem", operating.system), sep="")
                                                                                     ~^~
./R/RDataTracker.R:709:11: style: Use <-, not =, for assignment.
  language="R"
          ^
./R/RDataTracker.R:709:11: style: Put spaces around all infix operators.
  language="R"
         ~^~
./R/RDataTracker.R:710:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:language", language), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:710:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:language", language), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:710:72: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:language", language), sep="")
                                                                      ~^~
./R/RDataTracker.R:713:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:rVersion", r.version), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:713:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:rVersion", r.version), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:713:73: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:rVersion", r.version), sep="")
                                                                       ~^~
./R/RDataTracker.R:715:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.r.script.path <- .ddg.get("ddg.r.script.path")
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:715:24: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.r.script.path <- .ddg.get("ddg.r.script.path")
                       ^~~~~~~~
./R/RDataTracker.R:715:24: warning: no visible global function definition for ‘.ddg.get’
  ddg.r.script.path <- .ddg.get("ddg.r.script.path")
                       ^~~~~~~~
./R/RDataTracker.R:716:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!is.null(ddg.r.script.path)) {
               ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:717:5: warning: local variable ‘script’ assigned but may not be used
    script <- ddg.r.script.path
    ^~~~~~
./R/RDataTracker.R:717:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    script <- ddg.r.script.path
              ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:718:24: style: Words within variable and function names should be separated by '_' rather than '.'.
    sourced.scripts <- .ddg.sourced.script.names.json()
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:718:24: warning: no visible global function definition for ‘.ddg.sourced.script.names.json’
    sourced.scripts <- .ddg.sourced.script.names.json()
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:719:25: style: Words within variable and function names should be separated by '_' rather than '.'.
    script.timestamp <- .ddg.format.time(file.info(ddg.r.script.path)$mtime)
                        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:719:25: warning: no visible global function definition for ‘.ddg.format.time’
    script.timestamp <- .ddg.format.time(file.info(ddg.r.script.path)$mtime)
                        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:719:52: style: Words within variable and function names should be separated by '_' rather than '.'.
    script.timestamp <- .ddg.format.time(file.info(ddg.r.script.path)$mtime)
                                                   ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:724:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    sourced.scripts.timestamps <- ""
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:724:5: warning: local variable ‘sourced.scripts.timestamps’ assigned but may not be used
    sourced.scripts.timestamps <- ""
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:727:1: style: lines should not be more than 80 characters.
  environ <- paste(environ, .ddg.json.nv("rdt:script", ddg.r.script.path), sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:727:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:script", ddg.r.script.path), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:727:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:script", ddg.r.script.path), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:727:56: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:script", ddg.r.script.path), sep="")
                                                       ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:727:79: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:script", ddg.r.script.path), sep="")
                                                                             ~^~
./R/RDataTracker.R:729:5: style: Place a space before left parenthesis, except in a function call.
  if(sourced.scripts==""){
    ^
./R/RDataTracker.R:729:21: style: Put spaces around all infix operators.
  if(sourced.scripts==""){
                   ~^~~
./R/RDataTracker.R:730:1: style: lines should not be more than 80 characters.
    environ <- paste(environ, .ddg.json.nv("rdt:sourcedScripts", sourced.scripts), sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:730:31: style: Words within variable and function names should be separated by '_' rather than '.'.
    environ <- paste(environ, .ddg.json.nv("rdt:sourcedScripts", sourced.scripts), sep="")
                              ^~~~~~~~~~~~
./R/RDataTracker.R:730:31: warning: no visible global function definition for ‘.ddg.json.nv’
    environ <- paste(environ, .ddg.json.nv("rdt:sourcedScripts", sourced.scripts), sep="")
                              ^~~~~~~~~~~~
./R/RDataTracker.R:730:87: style: Put spaces around all infix operators.
    environ <- paste(environ, .ddg.json.nv("rdt:sourcedScripts", sourced.scripts), sep="")
                                                                                     ~^~
./R/RDataTracker.R:732:1: style: lines should not be more than 80 characters.
    environ <- paste(environ, "\"rdt:sourcedScripts\" : ", sourced.scripts, ",\n", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:732:87: style: Put spaces around all infix operators.
    environ <- paste(environ, "\"rdt:sourcedScripts\" : ", sourced.scripts, ",\n", sep="")
                                                                                     ~^~
./R/RDataTracker.R:735:1: style: lines should not be more than 80 characters.
  environ <- paste(environ, .ddg.json.nv("rdt:scriptTimeStamp", script.timestamp), sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:735:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:scriptTimeStamp", script.timestamp), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:735:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:scriptTimeStamp", script.timestamp), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:735:87: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:scriptTimeStamp", script.timestamp), sep="")
                                                                                     ~^~
./R/RDataTracker.R:737:20: style: Use <-, not =, for assignment.
  working.directory=getwd()
                   ^
./R/RDataTracker.R:737:20: style: Put spaces around all infix operators.
  working.directory=getwd()
                  ~^~
./R/RDataTracker.R:738:1: style: lines should not be more than 80 characters.
  environ <- paste(environ, .ddg.json.nv("rdt:workingDirectory", working.directory), sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:738:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:workingDirectory", working.directory), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:738:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:workingDirectory", working.directory), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:738:89: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:workingDirectory", working.directory), sep="")
                                                                                       ~^~
./R/RDataTracker.R:740:16: style: Use <-, not =, for assignment.
  ddg.directory=.ddg.path()
               ^
./R/RDataTracker.R:740:16: style: Put spaces around all infix operators.
  ddg.directory=.ddg.path()
              ~^~
./R/RDataTracker.R:740:17: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.directory=.ddg.path()
                ^~~~~~~~~
./R/RDataTracker.R:740:17: warning: no visible global function definition for ‘.ddg.path’
  ddg.directory=.ddg.path()
                ^~~~~~~~~
./R/RDataTracker.R:741:1: style: lines should not be more than 80 characters.
  environ <- paste(environ, .ddg.json.nv("rdt:ddgDirectory", ddg.directory), sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:741:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:ddgDirectory", ddg.directory), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:741:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:ddgDirectory", ddg.directory), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:741:81: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:ddgDirectory", ddg.directory), sep="")
                                                                               ~^~
./R/RDataTracker.R:743:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.timestamp <- .ddg.get("ddg.start.time")
                   ^~~~~~~~
./R/RDataTracker.R:743:20: warning: no visible global function definition for ‘.ddg.get’
  ddg.timestamp <- .ddg.get("ddg.start.time")
                   ^~~~~~~~
./R/RDataTracker.R:744:1: style: lines should not be more than 80 characters.
  environ <- paste(environ, .ddg.json.nv("rdt:ddgTimeStamp", ddg.timestamp), sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:744:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:ddgTimeStamp", ddg.timestamp), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:744:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:ddgTimeStamp", ddg.timestamp), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:744:81: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:ddgTimeStamp", ddg.timestamp), sep="")
                                                                               ~^~
./R/RDataTracker.R:747:1: style: lines should not be more than 80 characters.
  environ <- paste(environ, .ddg.json.nv("rdt:rdatatrackerVersion", lib.version), sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:747:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.json.nv("rdt:rdatatrackerVersion", lib.version), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:747:29: warning: no visible global function definition for ‘.ddg.json.nv’
  environ <- paste(environ, .ddg.json.nv("rdt:rdatatrackerVersion", lib.version), sep="")
                            ^~~~~~~~~~~~
./R/RDataTracker.R:747:86: style: Put spaces around all infix operators.
  environ <- paste(environ, .ddg.json.nv("rdt:rdatatrackerVersion", lib.version), sep="")
                                                                                    ~^~
./R/RDataTracker.R:749:29: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- paste(environ, .ddg.installedpackages.json(), sep = "")
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:749:29: warning: no visible global function definition for ‘.ddg.installedpackages.json’
  environ <- paste(environ, .ddg.installedpackages.json(), sep = "")
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:758:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.json.procedure.node <- function(id, pname, ptype, ptime, snum, pos) {
^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:761:1: style: lines should not be more than 80 characters.
    jstr <- paste("\n\"p", id, "\" : {\n\"rdt:name\" : \"", pname, "\",\n\"rdt:type\" : \"", ptype,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:762:1: style: lines should not be more than 80 characters.
        "\",\n\"rdt:elapsedTime\" : \"", ptime, "\",\n\"rdt:scriptNum\" : \"", snum,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:767:19: style: Put spaces around all infix operators.
        "\n}", sep="")
                 ~^~
./R/RDataTracker.R:770:1: style: lines should not be more than 80 characters.
    jstr <- paste("\n\"p", id, "\" : {\n\"rdt:name\" : \"", pname, "\",\n\"rdt:type\" : \"", ptype,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:771:1: style: lines should not be more than 80 characters.
        "\",\n\"rdt:elapsedTime\" : \"", ptime, "\",\n\"rdt:scriptNum\" : \"", snum,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:776:19: style: Put spaces around all infix operators.
        "\n}", sep="")
                 ~^~
./R/RDataTracker.R:779:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append.activity(jstr)
  ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:779:3: warning: no visible global function definition for ‘.ddg.append.activity’
  .ddg.append.activity(jstr)
  ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:784:1: style: lines should not be more than 80 characters.
.ddg.json.data.node <- function(id, dname, dvalue, dtype, dscope, from.env, dtime, dloc) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:784:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.json.data.node <- function(id, dname, dvalue, dtype, dscope, from.env, dtime, dloc) {
^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:786:1: style: lines should not be more than 80 characters.
  jstr <- paste("\n\"d", id, "\" : {\n\"rdt:name\" : \"", dname, "\",\n\"rdt:value\" : \"", dvalue, "\",\n\"rdt:type\" : \"", dtype, "\",\n\"rdt:scope\" : \"", dscope, "\",\n\"rdt:fromEnv\" : \"", from.env, "\",\n\"rdt:timestamp\" : \"", dtime, "\",\n\"rdt:location\" : \"", dloc, "\"\n}", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:786:294: style: Put spaces around all infix operators.
  jstr <- paste("\n\"d", id, "\" : {\n\"rdt:name\" : \"", dname, "\",\n\"rdt:value\" : \"", dvalue, "\",\n\"rdt:type\" : \"", dtype, "\",\n\"rdt:scope\" : \"", dscope, "\",\n\"rdt:fromEnv\" : \"", from.env, "\",\n\"rdt:timestamp\" : \"", dtime, "\",\n\"rdt:location\" : \"", dloc, "\"\n}", sep="")
                                                                                                                                                                                                                                                                                                    ~^~
./R/RDataTracker.R:788:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append.entity(jstr)
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:788:3: warning: no visible global function definition for ‘.ddg.append.entity’
  .ddg.append.entity(jstr)
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:794:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.json.control.edge <- function(id, node1, node2) {
^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:796:1: style: lines should not be more than 80 characters.
  jstr <- paste("\n\"e", id , "\" : {\n\"prov:informant\" : \"", node1, "\",\n\"prov:informed\" : \"", node2, "\"\n}", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:796:29: style: Commas should never have a space before.
  jstr <- paste("\n\"e", id , "\" : {\n\"prov:informant\" : \"", node1, "\",\n\"prov:informed\" : \"", node2, "\"\n}", sep="")
                           ~^
./R/RDataTracker.R:796:123: style: Put spaces around all infix operators.
  jstr <- paste("\n\"e", id , "\" : {\n\"prov:informant\" : \"", node1, "\",\n\"prov:informed\" : \"", node2, "\"\n}", sep="")
                                                                                                                         ~^~
./R/RDataTracker.R:798:3: style: Variable and function names should be all lowercase.
  .ddg.append.wasInformedBy(jstr)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:798:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append.wasInformedBy(jstr)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:798:3: warning: no visible global function definition for ‘.ddg.append.wasInformedBy’
  .ddg.append.wasInformedBy(jstr)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:804:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.json.data.out.edge <- function(id, node1, node2) {
^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:806:1: style: lines should not be more than 80 characters.
  jstr <- paste("\n\"e", id , "\" : {\n\"prov:entity\" : \"", node2, "\",\n\"prov:activity\" : \"", node1, "\"\n}", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:806:29: style: Commas should never have a space before.
  jstr <- paste("\n\"e", id , "\" : {\n\"prov:entity\" : \"", node2, "\",\n\"prov:activity\" : \"", node1, "\"\n}", sep="")
                           ~^
./R/RDataTracker.R:806:120: style: Put spaces around all infix operators.
  jstr <- paste("\n\"e", id , "\" : {\n\"prov:entity\" : \"", node2, "\",\n\"prov:activity\" : \"", node1, "\"\n}", sep="")
                                                                                                                      ~^~
./R/RDataTracker.R:808:3: style: Variable and function names should be all lowercase.
  .ddg.append.wasGeneratedBy(jstr)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:808:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append.wasGeneratedBy(jstr)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:808:3: warning: no visible global function definition for ‘.ddg.append.wasGeneratedBy’
  .ddg.append.wasGeneratedBy(jstr)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:814:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.json.data.in.edge <- function(id, node1, node2) {
^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:816:1: style: lines should not be more than 80 characters.
  jstr <- paste("\n\"e", id , "\" : {\n\"prov:activity\" : \"", node2, "\",\n\"prov:entity\" : \"", node1, "\"\n}", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:816:29: style: Commas should never have a space before.
  jstr <- paste("\n\"e", id , "\" : {\n\"prov:activity\" : \"", node2, "\",\n\"prov:entity\" : \"", node1, "\"\n}", sep="")
                           ~^
./R/RDataTracker.R:816:120: style: Put spaces around all infix operators.
  jstr <- paste("\n\"e", id , "\" : {\n\"prov:activity\" : \"", node2, "\",\n\"prov:entity\" : \"", node1, "\"\n}", sep="")
                                                                                                                      ~^~
./R/RDataTracker.R:818:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append.used(jstr)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:818:3: warning: no visible global function definition for ‘.ddg.append.used’
  .ddg.append.used(jstr)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:823:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.json.current <- function() {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:824:13: style: Words within variable and function names should be separated by '_' rather than '.'.
  prefix <- .ddg.json.prefix()
            ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:824:13: warning: no visible global function definition for ‘.ddg.json.prefix’
  prefix <- .ddg.json.prefix()
            ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:825:14: style: Words within variable and function names should be separated by '_' rather than '.'.
  environ <- .ddg.json.environ()
             ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:825:14: warning: no visible global function definition for ‘.ddg.json.environ’
  environ <- .ddg.json.environ()
             ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:826:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append.activity(environ)
  ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:826:3: warning: no visible global function definition for ‘.ddg.append.activity’
  .ddg.append.activity(environ)
  ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:827:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  activity <- .ddg.get("ddg.activity")
              ^~~~~~~~
./R/RDataTracker.R:827:15: warning: no visible global function definition for ‘.ddg.get’
  activity <- .ddg.get("ddg.activity")
              ^~~~~~~~
./R/RDataTracker.R:828:13: style: Words within variable and function names should be separated by '_' rather than '.'.
  entity <- .ddg.get("ddg.entity")
            ^~~~~~~~
./R/RDataTracker.R:828:13: warning: no visible global function definition for ‘.ddg.get’
  entity <- .ddg.get("ddg.entity")
            ^~~~~~~~
./R/RDataTracker.R:829:3: style: Variable and function names should be all lowercase.
  wasInformedBy <- .ddg.get('ddg.wasInformedBy')
  ^~~~~~~~~~~~~
./R/RDataTracker.R:829:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  wasInformedBy <- .ddg.get('ddg.wasInformedBy')
                   ^~~~~~~~
./R/RDataTracker.R:829:20: warning: no visible global function definition for ‘.ddg.get’
  wasInformedBy <- .ddg.get('ddg.wasInformedBy')
                   ^~~~~~~~
./R/RDataTracker.R:829:29: style: Only use double-quotes.
  wasInformedBy <- .ddg.get('ddg.wasInformedBy')
                            ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:830:3: style: Variable and function names should be all lowercase.
  wasGeneratedBy <- .ddg.get('ddg.wasGeneratedBy')
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:830:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  wasGeneratedBy <- .ddg.get('ddg.wasGeneratedBy')
                    ^~~~~~~~
./R/RDataTracker.R:830:21: warning: no visible global function definition for ‘.ddg.get’
  wasGeneratedBy <- .ddg.get('ddg.wasGeneratedBy')
                    ^~~~~~~~
./R/RDataTracker.R:830:30: style: Only use double-quotes.
  wasGeneratedBy <- .ddg.get('ddg.wasGeneratedBy')
                             ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:831:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  used <- .ddg.get('ddg.used')
          ^~~~~~~~
./R/RDataTracker.R:831:11: warning: no visible global function definition for ‘.ddg.get’
  used <- .ddg.get('ddg.used')
          ^~~~~~~~
./R/RDataTracker.R:831:20: style: Only use double-quotes.
  used <- .ddg.get('ddg.used')
                   ^~~~~~~~~~
./R/RDataTracker.R:832:1: style: lines should not be more than 80 characters.
  ddg.json <- paste("{\n\n", prefix, '"activity":{\n', activity, '},\n', '"entity":{\n', entity, '},\n', '"wasInformedBy":{\n', wasInformedBy, '},\n', '"wasGeneratedBy":{\n', wasGeneratedBy, '},\n', '"used":{\n', used, '}\n', "}", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:832:66: style: Only use double-quotes.
  ddg.json <- paste("{\n\n", prefix, '"activity":{\n', activity, '},\n', '"entity":{\n', entity, '},\n', '"wasInformedBy":{\n', wasInformedBy, '},\n', '"wasGeneratedBy":{\n', wasGeneratedBy, '},\n', '"used":{\n', used, '}\n', "}", sep="")
                                                                 ^~~~~~
./R/RDataTracker.R:832:98: style: Only use double-quotes.
  ddg.json <- paste("{\n\n", prefix, '"activity":{\n', activity, '},\n', '"entity":{\n', entity, '},\n', '"wasInformedBy":{\n', wasInformedBy, '},\n', '"wasGeneratedBy":{\n', wasGeneratedBy, '},\n', '"used":{\n', used, '}\n', "}", sep="")
                                                                                                 ^~~~~~
./R/RDataTracker.R:832:129: style: Variable and function names should be all lowercase.
  ddg.json <- paste("{\n\n", prefix, '"activity":{\n', activity, '},\n', '"entity":{\n', entity, '},\n', '"wasInformedBy":{\n', wasInformedBy, '},\n', '"wasGeneratedBy":{\n', wasGeneratedBy, '},\n', '"used":{\n', used, '}\n', "}", sep="")
                                                                                                                                ^~~~~~~~~~~~~
./R/RDataTracker.R:832:144: style: Only use double-quotes.
  ddg.json <- paste("{\n\n", prefix, '"activity":{\n', activity, '},\n', '"entity":{\n', entity, '},\n', '"wasInformedBy":{\n', wasInformedBy, '},\n', '"wasGeneratedBy":{\n', wasGeneratedBy, '},\n', '"used":{\n', used, '}\n', "}", sep="")
                                                                                                                                               ^~~~~~
./R/RDataTracker.R:832:176: style: Variable and function names should be all lowercase.
  ddg.json <- paste("{\n\n", prefix, '"activity":{\n', activity, '},\n', '"entity":{\n', entity, '},\n', '"wasInformedBy":{\n', wasInformedBy, '},\n', '"wasGeneratedBy":{\n', wasGeneratedBy, '},\n', '"used":{\n', used, '}\n', "}", sep="")
                                                                                                                                                                               ^~~~~~~~~~~~~~
./R/RDataTracker.R:832:192: style: Only use double-quotes.
  ddg.json <- paste("{\n\n", prefix, '"activity":{\n', activity, '},\n', '"entity":{\n', entity, '},\n', '"wasInformedBy":{\n', wasInformedBy, '},\n', '"wasGeneratedBy":{\n', wasGeneratedBy, '},\n', '"used":{\n', used, '}\n', "}", sep="")
                                                                                                                                                                                               ^~~~~~
./R/RDataTracker.R:832:220: style: Only use double-quotes.
  ddg.json <- paste("{\n\n", prefix, '"activity":{\n', activity, '},\n', '"entity":{\n', entity, '},\n', '"wasInformedBy":{\n', wasInformedBy, '},\n', '"wasGeneratedBy":{\n', wasGeneratedBy, '},\n', '"used":{\n', used, '}\n', "}", sep="")
                                                                                                                                                                                                                           ^~~~~
./R/RDataTracker.R:832:235: style: Put spaces around all infix operators.
  ddg.json <- paste("{\n\n", prefix, '"activity":{\n', activity, '},\n', '"entity":{\n', entity, '},\n', '"wasInformedBy":{\n', wasInformedBy, '},\n', '"wasGeneratedBy":{\n', wasGeneratedBy, '},\n', '"used":{\n', used, '}\n', "}", sep="")
                                                                                                                                                                                                                                         ~^~
./R/RDataTracker.R:839:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.json.write <- function() {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:840:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  fileout <- paste(.ddg.path(), "/ddg.json", sep="")
                   ^~~~~~~~~
./R/RDataTracker.R:840:20: warning: no visible global function definition for ‘.ddg.path’
  fileout <- paste(.ddg.path(), "/ddg.json", sep="")
                   ^~~~~~~~~
./R/RDataTracker.R:840:34: warning: Do not use absolute paths.
  fileout <- paste(.ddg.path(), "/ddg.json", sep="")
                                 ^~~~~~~~~
./R/RDataTracker.R:840:49: style: Put spaces around all infix operators.
  fileout <- paste(.ddg.path(), "/ddg.json", sep="")
                                               ~^~
./R/RDataTracker.R:841:4: style: Commented code should be removed.
  #if (interactive()) print(paste("Saving DDG in ", fileout))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:842:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.json <- .ddg.json.current()
              ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:842:15: warning: no visible global function definition for ‘.ddg.json.current’
  ddg.json <- .ddg.json.current()
              ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:848:1: style: lines should not be more than 80 characters.
.ddg.output.procedure.node <- function(ptype, pname, pvalue, auto.created, ptime, snum, pos) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:848:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.output.procedure.node <- function(ptype, pname, pvalue, auto.created, ptime, snum, pos) {
^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:850:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.pnum <- .ddg.get("ddg.pnum")
              ^~~~~~~~
./R/RDataTracker.R:850:15: warning: no visible global function definition for ‘.ddg.get’
  ddg.pnum <- .ddg.get("ddg.pnum")
              ^~~~~~~~
./R/RDataTracker.R:855:14: style: Put spaces around all infix operators.
  if (pvalue !="") {
             ^~~
./R/RDataTracker.R:857:54: style: Put spaces around all infix operators.
    value.str <- paste(" Value=\"", pvalue, "\"", sep="")
                                                    ~^~
./R/RDataTracker.R:861:1: style: lines should not be more than 80 characters.
    dtxt <- paste(ptype, " p", ddg.pnum, " \"", ddg.pnum, "-", pname, "\"", value.str, " Time=\"", ptime ,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:861:106: style: Commas should never have a space before.
    dtxt <- paste(ptype, " p", ddg.pnum, " \"", ddg.pnum, "-", pname, "\"", value.str, " Time=\"", ptime ,
                                                                                                        ~^
./R/RDataTracker.R:862:1: style: lines should not be more than 80 characters.
        "\" Script=\"", snum, "\"", " Pos=\"", pos@startLine, ",", pos@startCol, ",", pos@endLine, ",", pos@endCol, "\";\n", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:862:129: style: Put spaces around all infix operators.
        "\" Script=\"", snum, "\"", " Pos=\"", pos@startLine, ",", pos@startCol, ",", pos@endLine, ",", pos@endCol, "\";\n", sep="")
                                                                                                                               ~^~
./R/RDataTracker.R:863:6: style: Commented code should be removed.
    #print(".ddg.output.procedure.node: dtxt =")
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:864:6: style: Commented code should be removed.
    #print(dtxt)
     ^~~~~~~~~~~
./R/RDataTracker.R:867:1: style: lines should not be more than 80 characters.
    dtxt <- paste(ptype, " p", ddg.pnum, " \"", ddg.pnum, "-", pname, "\"", value.str, " Time=\"", ptime ,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:867:106: style: Commas should never have a space before.
    dtxt <- paste(ptype, " p", ddg.pnum, " \"", ddg.pnum, "-", pname, "\"", value.str, " Time=\"", ptime ,
                                                                                                        ~^
./R/RDataTracker.R:868:58: style: Put spaces around all infix operators.
        "\" Script=\"", snum, "\"", " Pos=\"NA\";\n", sep="")
                                                        ~^~
./R/RDataTracker.R:872:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append(dtxt)
  ^~~~~~~~~~~
./R/RDataTracker.R:872:3: warning: no visible global function definition for ‘.ddg.append’
  .ddg.append(dtxt)
  ^~~~~~~~~~~
./R/RDataTracker.R:875:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append.inc(dtxt)
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:875:3: warning: no visible global function definition for ‘.ddg.append.inc’
  .ddg.append.inc(dtxt)
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:878:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.json.procedure.node(ddg.pnum, pname, ptype, ptime, snum, pos)
  ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:878:3: warning: no visible global function definition for ‘.ddg.json.procedure.node’
  .ddg.json.procedure.node(ddg.pnum, pname, ptype, ptime, snum, pos)
  ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:883:1: style: lines should not be more than 80 characters.
.ddg.output.data.node <- function(dtype, dname, dvalue, dscope, from.env, dtime, dloc) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:883:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.output.data.node <- function(dtype, dname, dvalue, dscope, from.env, dtime, dloc) {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:885:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.dnum <- .ddg.get("ddg.dnum")
              ^~~~~~~~
./R/RDataTracker.R:885:15: warning: no visible global function definition for ‘.ddg.get’
  ddg.dnum <- .ddg.get("ddg.dnum")
              ^~~~~~~~
./R/RDataTracker.R:888:52: style: Put spaces around all infix operators.
  if (from.env) dname <- paste(dname, " [ENV]", sep="")
                                                  ~^~
./R/RDataTracker.R:890:70: style: Put spaces around all infix operators.
  if (dvalue != "") value.str <- paste(" Value=\"", dvalue, "\"", sep="")
                                                                    ~^~
./R/RDataTracker.R:893:66: style: Put spaces around all infix operators.
  if (dtime != "") time.str <- paste(" Time=\"", dtime, "\"", sep="")
                                                                ~^~
./R/RDataTracker.R:896:67: style: Put spaces around all infix operators.
  if (dloc != "") loc.str <- paste(" Location=\"", dloc, "\"", sep="")
                                                                 ~^~
./R/RDataTracker.R:899:1: style: lines should not be more than 80 characters.
  dtxt <- paste(dtype, " d", ddg.dnum, " \"", ddg.dnum, "-", dname, "\"", value.str, time.str, loc.str, ";\n", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:899:115: style: Put spaces around all infix operators.
  dtxt <- paste(dtype, " d", ddg.dnum, " \"", ddg.dnum, "-", dname, "\"", value.str, time.str, loc.str, ";\n", sep="")
                                                                                                                 ~^~
./R/RDataTracker.R:902:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append(dtxt)
  ^~~~~~~~~~~
./R/RDataTracker.R:902:3: warning: no visible global function definition for ‘.ddg.append’
  .ddg.append(dtxt)
  ^~~~~~~~~~~
./R/RDataTracker.R:905:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append.inc(dtxt)
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:905:3: warning: no visible global function definition for ‘.ddg.append.inc’
  .ddg.append.inc(dtxt)
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:908:1: style: lines should not be more than 80 characters.
  .ddg.json.data.node(ddg.dnum, dname, dvalue, dtype, dscope, from.env, dtime="", dloc="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:908:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.json.data.node(ddg.dnum, dname, dvalue, dtype, dscope, from.env, dtime="", dloc="")
  ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:908:3: warning: no visible global function definition for ‘.ddg.json.data.node’
  .ddg.json.data.node(ddg.dnum, dname, dvalue, dtype, dscope, from.env, dtime="", dloc="")
  ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:908:78: style: Put spaces around all infix operators.
  .ddg.json.data.node(ddg.dnum, dname, dvalue, dtype, dscope, from.env, dtime="", dloc="")
                                                                            ~^~
./R/RDataTracker.R:908:87: style: Put spaces around all infix operators.
  .ddg.json.data.node(ddg.dnum, dname, dvalue, dtype, dscope, from.env, dtime="", dloc="")
                                                                                     ~^~
./R/RDataTracker.R:913:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.output.edge <- function(etype, node1, node2) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:915:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.enum <- .ddg.get("ddg.enum")
              ^~~~~~~~
./R/RDataTracker.R:915:15: warning: no visible global function definition for ‘.ddg.get’
  ddg.enum <- .ddg.get("ddg.enum")
              ^~~~~~~~
./R/RDataTracker.R:919:71: style: Put spaces around all infix operators.
  if (etype == "cf") dtxt <- paste("CF ", node1, " ", node2, "\n", sep="")
                                                                     ~^~
./R/RDataTracker.R:920:57: style: Put spaces around all infix operators.
  else dtxt <- paste("DF ", node1, " ", node2, "\n", sep="")
                                                       ~^~
./R/RDataTracker.R:923:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append(dtxt)
  ^~~~~~~~~~~
./R/RDataTracker.R:923:3: warning: no visible global function definition for ‘.ddg.append’
  .ddg.append(dtxt)
  ^~~~~~~~~~~
./R/RDataTracker.R:926:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.append.inc(dtxt)
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:926:3: warning: no visible global function definition for ‘.ddg.append.inc’
  .ddg.append.inc(dtxt)
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:929:22: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (etype == "cf") .ddg.json.control.edge(ddg.enum, node1, node2)
                     ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:930:30: style: Words within variable and function names should be separated by '_' rather than '.'.
  else if (etype == "df.in") .ddg.json.data.in.edge(ddg.enum, node1, node2)
                             ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:931:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  else .ddg.json.data.out.edge(ddg.enum, node1, node2)
       ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:941:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.data.objects <- function() {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:943:13: style: Words within variable and function names should be separated by '_' rather than '.'.
  dnodes <- .ddg.data.nodes()
            ^~~~~~~~~~~~~~~
./R/RDataTracker.R:943:13: warning: no visible global function definition for ‘.ddg.data.nodes’
  dnodes <- .ddg.data.nodes()
            ^~~~~~~~~~~~~~~
./R/RDataTracker.R:944:3: warning: local variable ‘pnodes’ assigned but may not be used
  pnodes <- .ddg.proc.nodes()
  ^~~~~~
./R/RDataTracker.R:944:13: style: Words within variable and function names should be separated by '_' rather than '.'.
  pnodes <- .ddg.proc.nodes()
            ^~~~~~~~~~~~~~~
./R/RDataTracker.R:944:13: warning: no visible global function definition for ‘.ddg.proc.nodes’
  pnodes <- .ddg.proc.nodes()
            ^~~~~~~~~~~~~~~
./R/RDataTracker.R:945:3: warning: local variable ‘edges’ assigned but may not be used
  edges <- .ddg.edges()
  ^~~~~
./R/RDataTracker.R:945:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  edges <- .ddg.edges()
           ^~~~~~~~~~
./R/RDataTracker.R:945:12: warning: no visible global function definition for ‘.ddg.edges’
  edges <- .ddg.edges()
           ^~~~~~~~~~
./R/RDataTracker.R:948:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  dnum <- .ddg.dnum()
          ^~~~~~~~~
./R/RDataTracker.R:948:11: warning: no visible global function definition for ‘.ddg.dnum’
  dnum <- .ddg.dnum()
          ^~~~~~~~~
./R/RDataTracker.R:949:1: style: lines should not be more than 80 characters.
  dinv <- dnodes[1:dnum , c("ddg.num", "ddg.name", "ddg.value", "ddg.type", "ddg.scope")]
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:949:25: style: Commas should never have a space before.
  dinv <- dnodes[1:dnum , c("ddg.num", "ddg.name", "ddg.value", "ddg.type", "ddg.scope")]
                       ~^
./R/RDataTracker.R:952:25: style: Words within variable and function names should be separated by '_' rather than '.'.
  index <- which(dnodes$ddg.from.env==TRUE)
                        ^~~~~~~~~~~~
./R/RDataTracker.R:952:37: style: Put spaces around all infix operators.
  index <- which(dnodes$ddg.from.env==TRUE)
                                   ~^~~
./R/RDataTracker.R:967:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.init <- function() {
^~~~~~~~~~~~
./R/RDataTracker.R:969:10: warning: no visible global function definition for ‘.ddg.is.set’
		return(.ddg.is.set(".ddg.initialized") && .ddg.get(".ddg.initialized"))
         ^~~~~~~~~~~
./R/RDataTracker.R:969:24: style: Words within variable and function names should be separated by '_' rather than '.'.
		return(.ddg.is.set(".ddg.initialized") && .ddg.get(".ddg.initialized"))
                       ^~~~~~~~~~~
./R/RDataTracker.R:969:45: warning: no visible global function definition for ‘.ddg.get’
		return(.ddg.is.set(".ddg.initialized") && .ddg.get(".ddg.initialized"))
                                            ^~~~~~~~
./R/RDataTracker.R:969:56: style: Put spaces around all infix operators.
		return(.ddg.is.set(".ddg.initialized") && .ddg.get(".ddg.initialized"))
                                                      ~^~~
./R/RDataTracker.R:969:59: style: Words within variable and function names should be separated by '_' rather than '.'.
		return(.ddg.is.set(".ddg.initialized") && .ddg.get(".ddg.initialized"))
                                                          ^~~~~~~~
./R/RDataTracker.R:977:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.format.time <- function(time) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:978:42: style: Put spaces around all infix operators.
  formatted.time <- strftime(time, format="%Y-%m-%dT%H.%M.%S",usetz=TRUE)
                                        ~^~
./R/RDataTracker.R:978:63: style: Commas should always have a space after.
  formatted.time <- strftime(time, format="%Y-%m-%dT%H.%M.%S",usetz=TRUE)
                                                              ^
./R/RDataTracker.R:978:68: style: Put spaces around all infix operators.
  formatted.time <- strftime(time, format="%Y-%m-%dT%H.%M.%S",usetz=TRUE)
                                                                  ~^~
./R/RDataTracker.R:987:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.timestamp <- function() {
^~~~~~~~~~~~~~
./R/RDataTracker.R:989:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.format.time(ts))
          ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:989:11: warning: no visible global function definition for ‘.ddg.format.time’
  return (.ddg.format.time(ts))
          ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:992:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.elapsed.time <- function(){
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:994:22: style: Put spaces around all infix operators.
  elapsed <- time[1] +time[2] - .ddg.start.proc.time()
                     ^~
./R/RDataTracker.R:994:33: style: Words within variable and function names should be separated by '_' rather than '.'.
  elapsed <- time[1] +time[2] - .ddg.start.proc.time()
                                ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:994:33: warning: no visible global function definition for ‘.ddg.start.proc.time’
  elapsed <- time[1] +time[2] - .ddg.start.proc.time()
                                ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:996:5: style: Commented code should be removed.
  # elapsed <- time[1] +time[2] +time[4] +time[5]
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1009:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.write.timestamp.to.history <- function(var=".ddg.history.timestamp") {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1009:1: style: Variable and function names should not be longer than 30 characters.
.ddg.write.timestamp.to.history <- function(var=".ddg.history.timestamp") {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1010:12: style: Place a space before left parenthesis, except in a function call.
	if (Sys.getenv("RSTUDIO") != "" && Sys.info()['sysname'] == "Windows") {
           ^
./R/RDataTracker.R:1010:35: style: Put spaces around all infix operators.
	if (Sys.getenv("RSTUDIO") != "" && Sys.info()['sysname'] == "Windows") {
                                 ~^~~
./R/RDataTracker.R:1010:41: style: Put spaces around all infix operators.
	if (Sys.getenv("RSTUDIO") != "" && Sys.info()['sysname'] == "Windows") {
                                       ~^~~
./R/RDataTracker.R:1010:55: style: Only use double-quotes.
	if (Sys.getenv("RSTUDIO") != "" && Sys.info()['sysname'] == "Windows") {
                                                      ^~~~~~~~~
./R/RDataTracker.R:1010:66: style: Put spaces around all infix operators.
	if (Sys.getenv("RSTUDIO") != "" && Sys.info()['sysname'] == "Windows") {
                                                                ~^~~
./R/RDataTracker.R:1011:3: warning: no visible global function definition for ‘.ddg.set’
		.ddg.set(var, paste("##------", date(), "------##"))
  ^~~~~~~~
./R/RDataTracker.R:1011:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.set(var, paste("##------", date(), "------##"))
                ^~~~~~~~
./R/RDataTracker.R:1011:25: style: Commented code should be removed.
		.ddg.set(var, paste("##------", date(), "------##"))
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1015:3: warning: no visible global function definition for ‘.ddg.set’
		.ddg.set(var, timestamp(prefix = "##-ddg-- ", quiet=TRUE))
  ^~~~~~~~
./R/RDataTracker.R:1015:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.set(var, timestamp(prefix = "##-ddg-- ", quiet=TRUE))
                ^~~~~~~~
./R/RDataTracker.R:1015:38: style: Commented code should be removed.
		.ddg.set(var, timestamp(prefix = "##-ddg-- ", quiet=TRUE))
                                     ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1015:48: style: Put spaces around all infix operators.
		.ddg.set(var, timestamp(prefix = "##-ddg-- ", quiet=TRUE))
                                              ~^~
./R/RDataTracker.R:1026:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.graphic <- function(value){
^~~~~~~~~~~~~~~
./R/RDataTracker.R:1029:23: style: Put spaces around all infix operators.
	graph.classes <- list("gg", "ggplot")
                     ~^~~
./R/RDataTracker.R:1030:33: style: Put spaces around all infix operators.
	return(is.object(value) && any(class(value) %in% graph.classes))
                               ~^~~
./R/RDataTracker.R:1030:53: style: Put spaces around all infix operators.
	return(is.object(value) && any(class(value) %in% graph.classes))
                                                   ~^~~~~
./R/RDataTracker.R:1040:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.simple <- function(value) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:1045:16: style: Place a space before left parenthesis, except in a function call.
	return((!.ddg.is.graphic(value) &&
               ^
./R/RDataTracker.R:1045:18: style: Words within variable and function names should be separated by '_' rather than '.'.
	return((!.ddg.is.graphic(value) &&
                 ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1048:30: style: Put spaces around all infix operators.
	       length(value) == 1) ||
                            ~^~~
./R/RDataTracker.R:1058:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.csv <- function(value) {
^~~~~~~~~~~
./R/RDataTracker.R:1059:1: style: lines should not be more than 80 characters.
  return(!.ddg.is.simple(value) && ((is.vector(value) && !is.list(value)) || is.matrix(value) || is.data.frame(value)))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1059:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(!.ddg.is.simple(value) && ((is.vector(value) && !is.list(value)) || is.matrix(value) || is.data.frame(value)))
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:1059:11: warning: no visible global function definition for ‘.ddg.is.simple’
  return(!.ddg.is.simple(value) && ((is.vector(value) && !is.list(value)) || is.matrix(value) || is.data.frame(value)))
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:1059:37: style: Place a space before left parenthesis, except in a function call.
  return(!.ddg.is.simple(value) && ((is.vector(value) && !is.list(value)) || is.matrix(value) || is.data.frame(value)))
                                    ^
./R/RDataTracker.R:1068:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.object <- function(value){
^~~~~~~~~~~~~~
./R/RDataTracker.R:1077:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.function <- function(value){
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1086:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.dev.change <- function(){
^~~~~~~~~~~~~~~
./R/RDataTracker.R:1087:17: warning: no visible global function definition for ‘.ddg.get’
	prev.device <- .ddg.get("prev.device")
                ^~~~~~~~
./R/RDataTracker.R:1087:21: style: Put spaces around all infix operators.
	prev.device <- .ddg.get("prev.device")
                   ~^~~
./R/RDataTracker.R:1087:24: style: Words within variable and function names should be separated by '_' rather than '.'.
	prev.device <- .ddg.get("prev.device")
                       ^~~~~~~~
./R/RDataTracker.R:1088:21: style: Put spaces around all infix operators.
	curr.device <- dev.cur()
                   ~^~~
./R/RDataTracker.R:1089:21: style: Put spaces around all infix operators.
	device.list <- dev.list()
                   ~^~~
./R/RDataTracker.R:1092:12: style: Place a space before left parenthesis, except in a function call.
	if (prev.device != curr.device) {
           ^
./R/RDataTracker.R:1092:25: style: Put spaces around all infix operators.
	if (prev.device != curr.device) {
                       ~^~~
./R/RDataTracker.R:1094:3: warning: no visible global function definition for ‘.ddg.set’
		.ddg.set("prev.device", curr.device)
  ^~~~~~~~
./R/RDataTracker.R:1094:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.set("prev.device", curr.device)
                ^~~~~~~~
./R/RDataTracker.R:1097:20: style: Place a space before left parenthesis, except in a function call.
		if (prev.device %in% device.list) return(prev.device)
                   ^
./R/RDataTracker.R:1097:33: style: Put spaces around all infix operators.
		if (prev.device %in% device.list) return(prev.device)
                               ~^~~~~
./R/RDataTracker.R:1113:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.save.simple <- function(name, value, scope=NULL, from.env=FALSE) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1114:4: style: Commented code should be removed.
  #print(paste("In .ddg.save.simple: name =", name))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1115:4: style: Commented code should be removed.
  #print(paste("In .ddg.save.simple: scope =", scope))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1118:6: style: Commented code should be removed.
    #print(".ddg.save.simple: saving snapshot")
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1119:6: style: Commented code should be removed.
    #print(head(value))
     ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1120:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.snapshot.node(name, "txt", value, dscope=scope, from.env=from.env)
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1120:5: warning: no visible global function definition for ‘.ddg.snapshot.node’
    .ddg.snapshot.node(name, "txt", value, dscope=scope, from.env=from.env)
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1120:50: style: Put spaces around all infix operators.
    .ddg.snapshot.node(name, "txt", value, dscope=scope, from.env=from.env)
                                                ~^~
./R/RDataTracker.R:1120:66: style: Put spaces around all infix operators.
    .ddg.snapshot.node(name, "txt", value, dscope=scope, from.env=from.env)
                                                                ~^~
./R/RDataTracker.R:1123:6: style: Commented code should be removed.
    #print(".ddg.save.simple: saving data")
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1124:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.data.node("Data", name, value, scope, from.env=from.env)
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1124:5: warning: no visible global function definition for ‘.ddg.data.node’
    .ddg.data.node("Data", name, value, scope, from.env=from.env)
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1124:56: style: Put spaces around all infix operators.
    .ddg.data.node("Data", name, value, scope, from.env=from.env)
                                                      ~^~
./R/RDataTracker.R:1139:1: style: lines should not be more than 80 characters.
.ddg.write.graphic <- function(name, value=NULL, fext="jpeg", scope=NULL, from.env=FALSE){
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1139:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.write.graphic <- function(name, value=NULL, fext="jpeg", scope=NULL, from.env=FALSE){
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1142:3: warning: no visible global function definition for ‘.ddg.snapshot.node’
		.ddg.snapshot.node(name, fext, NULL, dscope=scope, from.env=from.env)
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1142:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.snapshot.node(name, fext, NULL, dscope=scope, from.env=from.env)
                ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1142:60: style: Put spaces around all infix operators.
		.ddg.snapshot.node(name, fext, NULL, dscope=scope, from.env=from.env)
                                                          ~^~
./R/RDataTracker.R:1143:9: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
	}, error = function(e) {
        ^
./R/RDataTracker.R:1143:18: style: Put spaces around all infix operators.
	}, error = function(e) {
                ~^~
./R/RDataTracker.R:1144:1: style: lines should not be more than 80 characters.
		# warning(paste("Attempted to write", name, "as", fext, "snapshot. Trying jpeg", ".", e))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1144:5: style: Commented code should be removed.
		# warning(paste("Attempted to write", name, "as", fext, "snapshot. Trying jpeg", ".", e))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1146:4: warning: no visible global function definition for ‘.ddg.snapshot.node’
			.ddg.snapshot.node(name, "jpeg", NULL, dscope=scope, from.env=from.env)
   ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1146:25: style: Words within variable and function names should be separated by '_' rather than '.'.
			.ddg.snapshot.node(name, "jpeg", NULL, dscope=scope, from.env=from.env)
                        ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1146:70: style: Put spaces around all infix operators.
			.ddg.snapshot.node(name, "jpeg", NULL, dscope=scope, from.env=from.env)
                                                                    ~^~
./R/RDataTracker.R:1147:17: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
		}, error = function(e) {
                ^
./R/RDataTracker.R:1148:1: style: lines should not be more than 80 characters.
			 # warning(paste("Attempted to write", name, "as jpeg snapshot. Failed.", e, "Defaulting to saving RObject and .txt file."))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1148:7: style: Commented code should be removed.
			 # warning(paste("Attempted to write", name, "as jpeg snapshot. Failed.", e, "Defaulting to saving RObject and .txt file."))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1149:1: style: lines should not be more than 80 characters.
  		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1149:5: warning: no visible global function definition for ‘.ddg.snapshot.node’
  		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1149:17: style: Words within variable and function names should be separated by '_' rather than '.'.
  		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
                ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1149:68: style: Put spaces around all infix operators.
  		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
                                                                  ~^~
./R/RDataTracker.R:1149:82: style: Put spaces around all infix operators.
  		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
                                                                                ~^~
./R/RDataTracker.R:1163:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.write.csv <- function(name, value, scope=NULL, from.env=FALSE) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:1165:3: warning: no visible global function definition for ‘.ddg.snapshot.node’
		.ddg.snapshot.node(name, "csv", value, dscope=scope, from.env=from.env)
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1165:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.snapshot.node(name, "csv", value, dscope=scope, from.env=from.env)
                ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1165:62: style: Put spaces around all infix operators.
		.ddg.snapshot.node(name, "csv", value, dscope=scope, from.env=from.env)
                                                            ~^~
./R/RDataTracker.R:1166:9: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
	}, error = function(e) {
        ^
./R/RDataTracker.R:1166:18: style: Put spaces around all infix operators.
	}, error = function(e) {
                ~^~
./R/RDataTracker.R:1167:1: style: lines should not be more than 80 characters.
		# warning(paste("Attempted to write", name, "as .csv snapshot but failed. Out as RDataObject.", e))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1167:5: style: Commented code should be removed.
		# warning(paste("Attempted to write", name, "as .csv snapshot but failed. Out as RDataObject.", e))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1168:1: style: lines should not be more than 80 characters.
		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1168:3: warning: no visible global function definition for ‘.ddg.snapshot.node’
		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1168:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
                ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1168:68: style: Put spaces around all infix operators.
		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
                                                                  ~^~
./R/RDataTracker.R:1168:82: style: Put spaces around all infix operators.
		.ddg.snapshot.node(name, "txt", value, save.object = TRUE, dscope=scope, from.env=from.env)
                                                                                ~^~
./R/RDataTracker.R:1187:1: style: lines should not be more than 80 characters.
.ddg.save.data <- function(name, value, fname=".ddg.save.data", graphic.fext='jpeg', error=FALSE, scope=NULL, from.env=FALSE, stack=NULL, env=NULL){
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1187:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.save.data <- function(name, value, fname=".ddg.save.data", graphic.fext='jpeg', error=FALSE, scope=NULL, from.env=FALSE, stack=NULL, env=NULL){
^~~~~~~~~~~~~~
./R/RDataTracker.R:1187:78: style: Only use double-quotes.
.ddg.save.data <- function(name, value, fname=".ddg.save.data", graphic.fext='jpeg', error=FALSE, scope=NULL, from.env=FALSE, stack=NULL, env=NULL){
                                                                             ^~~~~~
./R/RDataTracker.R:1188:1: style: lines should not be more than 80 characters.
  #print (paste (".ddg.save.data: looking for name =", name, "with scope", scope))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1188:4: style: Commented code should be removed.
  #print (paste (".ddg.save.data: looking for name =", name, "with scope", scope))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1189:1: style: lines should not be more than 80 characters.
  #print(paste(".ddg.save.data saving ", name, "with value structured as", str(value)))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1189:4: style: Commented code should be removed.
  #print(paste(".ddg.save.data saving ", name, "with value structured as", str(value)))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1191:14: style: Words within variable and function names should be separated by '_' rather than '.'.
    scope <- .ddg.get.scope(name, calls=stack, env=env)
             ^~~~~~~~~~~~~~
./R/RDataTracker.R:1191:14: warning: no visible global function definition for ‘.ddg.get.scope’
    scope <- .ddg.get.scope(name, calls=stack, env=env)
             ^~~~~~~~~~~~~~
./R/RDataTracker.R:1191:40: style: Put spaces around all infix operators.
    scope <- .ddg.get.scope(name, calls=stack, env=env)
                                      ~^~
./R/RDataTracker.R:1191:51: style: Put spaces around all infix operators.
    scope <- .ddg.get.scope(name, calls=stack, env=env)
                                                 ~^~
./R/RDataTracker.R:1196:1: style: lines should not be more than 80 characters.
	if (.ddg.is.graphic(value)) .ddg.write.graphic(name, value, graphic.fext, scope=scope, from.env=from.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1196:12: style: Place a space before left parenthesis, except in a function call.
	if (.ddg.is.graphic(value)) .ddg.write.graphic(name, value, graphic.fext, scope=scope, from.env=from.env)
           ^
./R/RDataTracker.R:1196:13: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (.ddg.is.graphic(value)) .ddg.write.graphic(name, value, graphic.fext, scope=scope, from.env=from.env)
            ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1196:37: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (.ddg.is.graphic(value)) .ddg.write.graphic(name, value, graphic.fext, scope=scope, from.env=from.env)
                                    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1196:88: style: Put spaces around all infix operators.
	if (.ddg.is.graphic(value)) .ddg.write.graphic(name, value, graphic.fext, scope=scope, from.env=from.env)
                                                                                      ~^~
./R/RDataTracker.R:1196:104: style: Put spaces around all infix operators.
	if (.ddg.is.graphic(value)) .ddg.write.graphic(name, value, graphic.fext, scope=scope, from.env=from.env)
                                                                                                      ~^~
./R/RDataTracker.R:1197:1: style: lines should not be more than 80 characters.
	else if (.ddg.is.simple(value)) .ddg.save.simple(name, value, scope=scope, from.env=from.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1197:17: style: Place a space before left parenthesis, except in a function call.
	else if (.ddg.is.simple(value)) .ddg.save.simple(name, value, scope=scope, from.env=from.env)
                ^
./R/RDataTracker.R:1197:18: style: Words within variable and function names should be separated by '_' rather than '.'.
	else if (.ddg.is.simple(value)) .ddg.save.simple(name, value, scope=scope, from.env=from.env)
                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:1197:41: style: Words within variable and function names should be separated by '_' rather than '.'.
	else if (.ddg.is.simple(value)) .ddg.save.simple(name, value, scope=scope, from.env=from.env)
                                        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1197:76: style: Put spaces around all infix operators.
	else if (.ddg.is.simple(value)) .ddg.save.simple(name, value, scope=scope, from.env=from.env)
                                                                          ~^~
./R/RDataTracker.R:1197:92: style: Put spaces around all infix operators.
	else if (.ddg.is.simple(value)) .ddg.save.simple(name, value, scope=scope, from.env=from.env)
                                                                                          ~^~
./R/RDataTracker.R:1198:1: style: lines should not be more than 80 characters.
	else if (.ddg.is.csv(value)) .ddg.write.csv(name, value, scope=scope, from.env=from.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1198:17: style: Place a space before left parenthesis, except in a function call.
	else if (.ddg.is.csv(value)) .ddg.write.csv(name, value, scope=scope, from.env=from.env)
                ^
./R/RDataTracker.R:1198:18: style: Words within variable and function names should be separated by '_' rather than '.'.
	else if (.ddg.is.csv(value)) .ddg.write.csv(name, value, scope=scope, from.env=from.env)
                 ^~~~~~~~~~~
./R/RDataTracker.R:1198:38: style: Words within variable and function names should be separated by '_' rather than '.'.
	else if (.ddg.is.csv(value)) .ddg.write.csv(name, value, scope=scope, from.env=from.env)
                                     ^~~~~~~~~~~~~~
./R/RDataTracker.R:1198:71: style: Put spaces around all infix operators.
	else if (.ddg.is.csv(value)) .ddg.write.csv(name, value, scope=scope, from.env=from.env)
                                                                     ~^~
./R/RDataTracker.R:1198:87: style: Put spaces around all infix operators.
	else if (.ddg.is.csv(value)) .ddg.write.csv(name, value, scope=scope, from.env=from.env)
                                                                                     ~^~
./R/RDataTracker.R:1199:1: style: lines should not be more than 80 characters.
  else if (is.list(value) || is.array(value)) .ddg.snapshot.node(name, "txt", value, save.object=TRUE, dscope=scope, from.env=from.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1199:47: style: Words within variable and function names should be separated by '_' rather than '.'.
  else if (is.list(value) || is.array(value)) .ddg.snapshot.node(name, "txt", value, save.object=TRUE, dscope=scope, from.env=from.env)
                                              ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1199:97: style: Put spaces around all infix operators.
  else if (is.list(value) || is.array(value)) .ddg.snapshot.node(name, "txt", value, save.object=TRUE, dscope=scope, from.env=from.env)
                                                                                               ~^~
./R/RDataTracker.R:1199:110: style: Put spaces around all infix operators.
  else if (is.list(value) || is.array(value)) .ddg.snapshot.node(name, "txt", value, save.object=TRUE, dscope=scope, from.env=from.env)
                                                                                                            ~^~
./R/RDataTracker.R:1199:126: style: Put spaces around all infix operators.
  else if (is.list(value) || is.array(value)) .ddg.snapshot.node(name, "txt", value, save.object=TRUE, dscope=scope, from.env=from.env)
                                                                                                                            ~^~
./R/RDataTracker.R:1200:1: style: lines should not be more than 80 characters.
  else if (.ddg.is.object(value)) .ddg.snapshot.node(name, "txt", value, dscope=scope, from.env=from.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1200:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  else if (.ddg.is.object(value)) .ddg.snapshot.node(name, "txt", value, dscope=scope, from.env=from.env)
           ^~~~~~~~~~~~~~
./R/RDataTracker.R:1200:35: style: Words within variable and function names should be separated by '_' rather than '.'.
  else if (.ddg.is.object(value)) .ddg.snapshot.node(name, "txt", value, dscope=scope, from.env=from.env)
                                  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1200:80: style: Put spaces around all infix operators.
  else if (.ddg.is.object(value)) .ddg.snapshot.node(name, "txt", value, dscope=scope, from.env=from.env)
                                                                              ~^~
./R/RDataTracker.R:1200:96: style: Put spaces around all infix operators.
  else if (.ddg.is.object(value)) .ddg.snapshot.node(name, "txt", value, dscope=scope, from.env=from.env)
                                                                                              ~^~
./R/RDataTracker.R:1201:1: style: lines should not be more than 80 characters.
	else if (.ddg.is.function(value)) .ddg.save.simple(name, "#ddg.function", scope=scope, from.env=from.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1201:17: style: Place a space before left parenthesis, except in a function call.
	else if (.ddg.is.function(value)) .ddg.save.simple(name, "#ddg.function", scope=scope, from.env=from.env)
                ^
./R/RDataTracker.R:1201:18: style: Words within variable and function names should be separated by '_' rather than '.'.
	else if (.ddg.is.function(value)) .ddg.save.simple(name, "#ddg.function", scope=scope, from.env=from.env)
                 ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1201:43: style: Words within variable and function names should be separated by '_' rather than '.'.
	else if (.ddg.is.function(value)) .ddg.save.simple(name, "#ddg.function", scope=scope, from.env=from.env)
                                          ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1201:88: style: Put spaces around all infix operators.
	else if (.ddg.is.function(value)) .ddg.save.simple(name, "#ddg.function", scope=scope, from.env=from.env)
                                                                                      ~^~
./R/RDataTracker.R:1201:104: style: Put spaces around all infix operators.
	else if (.ddg.is.function(value)) .ddg.save.simple(name, "#ddg.function", scope=scope, from.env=from.env)
                                                                                                      ~^~
./R/RDataTracker.R:1202:1: style: lines should not be more than 80 characters.
	else if (error) stop("Unable to create data (snapshot) node. Non-Object value to", fname, ".")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1202:17: style: Place a space before left parenthesis, except in a function call.
	else if (error) stop("Unable to create data (snapshot) node. Non-Object value to", fname, ".")
                ^
./R/RDataTracker.R:1204:1: style: lines should not be more than 80 characters.
		error.msg <- paste("Unable to create data (snapshot) node. Non-Object value to", fname, ".")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1204:27: style: Put spaces around all infix operators.
		error.msg <- paste("Unable to create data (snapshot) node. Non-Object value to", fname, ".")
                         ~^
./R/RDataTracker.R:1205:3: warning: no visible global function definition for ‘.ddg.insert.error.message’
		.ddg.insert.error.message(error.msg)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1205:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.insert.error.message(error.msg)
                ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1207:4: style: Commented code should be removed.
  #print(".ddg.save.data: Done saving data")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1223:1: style: lines should not be more than 80 characters.
.ddg.record.proc <- function(ptype, pname, pvalue, auto.created=FALSE, ptime, snum=NA, pos=NA) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1223:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.record.proc <- function(ptype, pname, pvalue, auto.created=FALSE, ptime, snum=NA, pos=NA) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1225:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.inc("ddg.pnum")
  ^~~~~~~~
./R/RDataTracker.R:1225:3: warning: no visible global function definition for ‘.ddg.inc’
  .ddg.inc("ddg.pnum")
  ^~~~~~~~
./R/RDataTracker.R:1226:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.pnum <- .ddg.pnum()
              ^~~~~~~~~
./R/RDataTracker.R:1226:15: warning: no visible global function definition for ‘.ddg.pnum’, Did you mean 'ddg.pnum'?
  ddg.pnum <- .ddg.pnum()
              ^~~~~~~~~
./R/RDataTracker.R:1229:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- .ddg.proc.nodes()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1229:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- .ddg.proc.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1229:21: warning: no visible global function definition for ‘.ddg.proc.nodes’, Did you mean 'ddg.proc.nodes'?
  ddg.proc.nodes <- .ddg.proc.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1230:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (nrow(ddg.proc.nodes) < ddg.pnum) {
           ^~~~~~~~~~~~~~
./R/RDataTracker.R:1231:10: style: Use <-, not =, for assignment.
    size = 100
         ^
./R/RDataTracker.R:1241:21: style: Put spaces around all infix operators.
        ddg.startCol= numeric(size),
                   ~^
./R/RDataTracker.R:1242:20: style: Put spaces around all infix operators.
        ddg.endLine= numeric(size),
                  ~^
./R/RDataTracker.R:1243:19: style: Put spaces around all infix operators.
        ddg.endCol= numeric(size),
                 ~^
./R/RDataTracker.R:1244:25: style: Put spaces around all infix operators.
        stringsAsFactors=FALSE)
                       ~^~
./R/RDataTracker.R:1245:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.rows("ddg.proc.nodes", new.rows)
    ^~~~~~~~~~~~~
./R/RDataTracker.R:1245:5: warning: no visible global function definition for ‘.ddg.add.rows’
    .ddg.add.rows("ddg.proc.nodes", new.rows)
    ^~~~~~~~~~~~~
./R/RDataTracker.R:1246:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.proc.nodes <- .ddg.proc.nodes()
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1246:23: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.proc.nodes <- .ddg.proc.nodes()
                      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1246:23: warning: no visible global function definition for ‘.ddg.proc.nodes’, Did you mean 'ddg.proc.nodes'?
    ddg.proc.nodes <- .ddg.proc.nodes()
                      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1249:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes$ddg.type[ddg.pnum] <- ptype
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1250:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes$ddg.num[ddg.pnum] <- ddg.pnum
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1251:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes$ddg.name[ddg.pnum] <- pname
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1252:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes$ddg.value[ddg.pnum] <- pvalue
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1253:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes$ddg.auto.created[ddg.pnum] <- auto.created
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1253:18: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes$ddg.auto.created[ddg.pnum] <- auto.created
                 ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1254:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes$ddg.time[ddg.pnum] <- ptime
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1256:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes$ddg.snum[ddg.pnum] <- snum
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1258:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.proc.nodes$ddg.startLine[ddg.pnum] <- pos@startLine
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1258:20: style: Variable and function names should be all lowercase.
    ddg.proc.nodes$ddg.startLine[ddg.pnum] <- pos@startLine
                   ^~~~~~~~~~~~~
./R/RDataTracker.R:1259:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.proc.nodes$ddg.startCol[ddg.pnum] <- pos@startCol
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1259:20: style: Variable and function names should be all lowercase.
    ddg.proc.nodes$ddg.startCol[ddg.pnum] <- pos@startCol
                   ^~~~~~~~~~~~
./R/RDataTracker.R:1260:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.proc.nodes$ddg.endLine[ddg.pnum] <- pos@endLine
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1260:20: style: Variable and function names should be all lowercase.
    ddg.proc.nodes$ddg.endLine[ddg.pnum] <- pos@endLine
                   ^~~~~~~~~~~
./R/RDataTracker.R:1261:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.proc.nodes$ddg.endCol[ddg.pnum] <- pos@endCol
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1261:20: style: Variable and function names should be all lowercase.
    ddg.proc.nodes$ddg.endCol[ddg.pnum] <- pos@endCol
                   ^~~~~~~~~~
./R/RDataTracker.R:1264:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.proc.nodes$ddg.startLine[ddg.pnum] <- NA
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1264:20: style: Variable and function names should be all lowercase.
    ddg.proc.nodes$ddg.startLine[ddg.pnum] <- NA
                   ^~~~~~~~~~~~~
./R/RDataTracker.R:1265:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.proc.nodes$ddg.startCol[ddg.pnum] <- NA
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1265:20: style: Variable and function names should be all lowercase.
    ddg.proc.nodes$ddg.startCol[ddg.pnum] <- NA
                   ^~~~~~~~~~~~
./R/RDataTracker.R:1266:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.proc.nodes$ddg.endLine[ddg.pnum] <- NA
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1266:20: style: Variable and function names should be all lowercase.
    ddg.proc.nodes$ddg.endLine[ddg.pnum] <- NA
                   ^~~~~~~~~~~
./R/RDataTracker.R:1267:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.proc.nodes$ddg.endCol[ddg.pnum] <- NA
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1267:20: style: Variable and function names should be all lowercase.
    ddg.proc.nodes$ddg.endCol[ddg.pnum] <- NA
                   ^~~~~~~~~~
./R/RDataTracker.R:1270:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.proc.nodes", ddg.proc.nodes)
  ^~~~~~~~
./R/RDataTracker.R:1270:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.proc.nodes", ddg.proc.nodes)
  ^~~~~~~~
./R/RDataTracker.R:1270:30: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.proc.nodes", ddg.proc.nodes)
                             ^~~~~~~~~~~~~~
./R/RDataTracker.R:1273:1: style: lines should not be more than 80 characters.
  .ddg.output.procedure.node(ptype, pname, pvalue, auto.created, ptime, snum, pos)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1273:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.output.procedure.node(ptype, pname, pvalue, auto.created, ptime, snum, pos)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1273:3: warning: no visible global function definition for ‘.ddg.output.procedure.node’
  .ddg.output.procedure.node(ptype, pname, pvalue, auto.created, ptime, snum, pos)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1275:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) {
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1290:1: style: lines should not be more than 80 characters.
.ddg.record.data <- function(dtype, dname, dvalue, dscope, from.env=FALSE, dtime="", dloc="") {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1290:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.record.data <- function(dtype, dname, dvalue, dscope, from.env=FALSE, dtime="", dloc="") {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1291:4: style: Commented code should be removed.
  #print("In .ddg.record.data")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1293:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.inc("ddg.dnum")
  ^~~~~~~~
./R/RDataTracker.R:1293:3: warning: no visible global function definition for ‘.ddg.inc’
  .ddg.inc("ddg.dnum")
  ^~~~~~~~
./R/RDataTracker.R:1294:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.dnum <- .ddg.dnum()
              ^~~~~~~~~
./R/RDataTracker.R:1294:15: warning: no visible global function definition for ‘.ddg.dnum’, Did you mean 'ddg.dnum'?
  ddg.dnum <- .ddg.dnum()
              ^~~~~~~~~
./R/RDataTracker.R:1297:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes <- .ddg.data.nodes()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1297:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes <- .ddg.data.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1297:21: warning: no visible global function definition for ‘.ddg.data.nodes’, Did you mean 'ddg.data.nodes'?
  ddg.data.nodes <- .ddg.data.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1298:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (nrow(ddg.data.nodes) < ddg.dnum) {
           ^~~~~~~~~~~~~~
./R/RDataTracker.R:1299:10: style: Use <-, not =, for assignment.
    size = 100
         ^
./R/RDataTracker.R:1308:54: style: Put spaces around all infix operators.
        ddg.current = logical(size), stringsAsFactors=FALSE)
                                                    ~^~
./R/RDataTracker.R:1309:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.rows("ddg.data.nodes", new.rows)
    ^~~~~~~~~~~~~
./R/RDataTracker.R:1309:5: warning: no visible global function definition for ‘.ddg.add.rows’
    .ddg.add.rows("ddg.data.nodes", new.rows)
    ^~~~~~~~~~~~~
./R/RDataTracker.R:1310:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.data.nodes <- .ddg.data.nodes()
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1310:23: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.data.nodes <- .ddg.data.nodes()
                      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1310:23: warning: no visible global function definition for ‘.ddg.data.nodes’, Did you mean 'ddg.data.nodes'?
    ddg.data.nodes <- .ddg.data.nodes()
                      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1317:4: style: Commented code should be removed.
  #print(".ddg.record.data: adding info")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1318:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes$ddg.type[ddg.dnum] <- dtype
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1319:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes$ddg.num[ddg.dnum] <- ddg.dnum
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1320:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes$ddg.name[ddg.dnum] <- dname
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1321:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes$ddg.value[ddg.dnum] <- dvalue2
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1322:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes$ddg.scope[ddg.dnum] <- dscope
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1323:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes$ddg.from.env[ddg.dnum] <- from.env
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1323:18: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes$ddg.from.env[ddg.dnum] <- from.env
                 ^~~~~~~~~~~~
./R/RDataTracker.R:1324:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes$ddg.time[ddg.dnum] <- dtime
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1325:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes$ddg.loc[ddg.dnum] <- dloc
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1326:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes$ddg.current[ddg.dnum] <- TRUE
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1327:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.data.nodes", ddg.data.nodes)
  ^~~~~~~~
./R/RDataTracker.R:1327:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.data.nodes", ddg.data.nodes)
  ^~~~~~~~
./R/RDataTracker.R:1327:30: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.data.nodes", ddg.data.nodes)
                             ^~~~~~~~~~~~~~
./R/RDataTracker.R:1330:4: style: Commented code should be removed.
  #print(".ddg.record.data outputting data node")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1331:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.output.data.node(dtype, dname, dvalue2, dscope, from.env, dtime, dloc)
  ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1331:3: warning: no visible global function definition for ‘.ddg.output.data.node’
  .ddg.output.data.node(dtype, dname, dvalue2, dscope, from.env, dtime, dloc)
  ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1333:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) {
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1334:1: style: lines should not be more than 80 characters.
    print(paste("Adding data node", ddg.dnum, "named", dname, "with scope", dscope, " and value ", ddg.data.nodes$ddg.value[ddg.dnum]))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1334:100: style: Words within variable and function names should be separated by '_' rather than '.'.
    print(paste("Adding data node", ddg.dnum, "named", dname, "with scope", dscope, " and value ", ddg.data.nodes$ddg.value[ddg.dnum]))
                                                                                                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:1345:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.record.edge <- function(etype, node1, node2) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1347:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.inc("ddg.enum")
  ^~~~~~~~
./R/RDataTracker.R:1347:3: warning: no visible global function definition for ‘.ddg.inc’
  .ddg.inc("ddg.enum")
  ^~~~~~~~
./R/RDataTracker.R:1348:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.enum <- .ddg.enum()
              ^~~~~~~~~
./R/RDataTracker.R:1348:15: warning: no visible global function definition for ‘.ddg.enum’, Did you mean 'ddg.enum'?
  ddg.enum <- .ddg.enum()
              ^~~~~~~~~
./R/RDataTracker.R:1351:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.edges <- .ddg.edges()
               ^~~~~~~~~~
./R/RDataTracker.R:1351:16: warning: no visible global function definition for ‘.ddg.edges’, Did you mean 'ddg.edges'?
  ddg.edges <- .ddg.edges()
               ^~~~~~~~~~
./R/RDataTracker.R:1353:10: style: Use <-, not =, for assignment.
    size = 100
         ^
./R/RDataTracker.R:1358:25: style: Put spaces around all infix operators.
        stringsAsFactors=FALSE)
                       ~^~
./R/RDataTracker.R:1359:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.rows("ddg.edges", new.rows)
    ^~~~~~~~~~~~~
./R/RDataTracker.R:1359:5: warning: no visible global function definition for ‘.ddg.add.rows’
    .ddg.add.rows("ddg.edges", new.rows)
    ^~~~~~~~~~~~~
./R/RDataTracker.R:1360:18: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.edges <- .ddg.edges()
                 ^~~~~~~~~~
./R/RDataTracker.R:1360:18: warning: no visible global function definition for ‘.ddg.edges’, Did you mean 'ddg.edges'?
    ddg.edges <- .ddg.edges()
                 ^~~~~~~~~~
./R/RDataTracker.R:1367:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.edges", ddg.edges)
  ^~~~~~~~
./R/RDataTracker.R:1367:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.edges", ddg.edges)
  ^~~~~~~~
./R/RDataTracker.R:1370:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.output.edge(etype, node1, node2)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1370:3: warning: no visible global function definition for ‘.ddg.output.edge’
  .ddg.output.edge(etype, node1, node2)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1372:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) {
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1374:43: style: Put spaces around all infix operators.
    else if (etype == "df.in") etype.long <-"data flow in"
                                          ^~~
./R/RDataTracker.R:1376:1: style: lines should not be more than 80 characters.
    print (paste("Adding", etype.long, "edge", ddg.enum, "for", node1, "to", node2))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1386:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.proc.node <- function(type) {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1398:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.proc.node.exists <- function(pname) {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1399:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- .ddg.proc.nodes()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1399:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- .ddg.proc.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1399:21: warning: no visible global function definition for ‘.ddg.proc.nodes’, Did you mean 'ddg.proc.nodes'?
  ddg.proc.nodes <- .ddg.proc.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1400:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  rows <- nrow(ddg.proc.nodes)
               ^~~~~~~~~~~~~~
./R/RDataTracker.R:1402:13: style: Words within variable and function names should be separated by '_' rather than '.'.
    type <- ddg.proc.nodes$ddg.type[i]
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:1403:1: style: lines should not be more than 80 characters.
    if (.ddg.is.proc.node(type) & ddg.proc.nodes$ddg.name[i] == pname & !ddg.proc.nodes$ddg.return.linked[i] & !ddg.proc.nodes$ddg.auto.created[i]) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1403:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.proc.node(type) & ddg.proc.nodes$ddg.name[i] == pname & !ddg.proc.nodes$ddg.return.linked[i] & !ddg.proc.nodes$ddg.auto.created[i]) {
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1403:35: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.proc.node(type) & ddg.proc.nodes$ddg.name[i] == pname & !ddg.proc.nodes$ddg.return.linked[i] & !ddg.proc.nodes$ddg.auto.created[i]) {
                                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1403:74: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.proc.node(type) & ddg.proc.nodes$ddg.name[i] == pname & !ddg.proc.nodes$ddg.return.linked[i] & !ddg.proc.nodes$ddg.auto.created[i]) {
                                                                         ^~~~~~~~~~~~~~
./R/RDataTracker.R:1403:89: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.proc.node(type) & ddg.proc.nodes$ddg.name[i] == pname & !ddg.proc.nodes$ddg.return.linked[i] & !ddg.proc.nodes$ddg.auto.created[i]) {
                                                                                        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1403:113: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.proc.node(type) & ddg.proc.nodes$ddg.name[i] == pname & !ddg.proc.nodes$ddg.return.linked[i] & !ddg.proc.nodes$ddg.auto.created[i]) {
                                                                                                                ^~~~~~~~~~~~~~
./R/RDataTracker.R:1403:128: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.proc.node(type) & ddg.proc.nodes$ddg.name[i] == pname & !ddg.proc.nodes$ddg.return.linked[i] & !ddg.proc.nodes$ddg.auto.created[i]) {
                                                                                                                               ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1419:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.proc.number <- function(pname, find.unreturned.function=FALSE) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1419:37: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.proc.number <- function(pname, find.unreturned.function=FALSE) {
                                    ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1420:4: style: Commented code should be removed.
  #print (paste0("Looking for function ", pname))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1421:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- .ddg.proc.nodes()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1421:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- .ddg.proc.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1421:21: warning: no visible global function definition for ‘.ddg.proc.nodes’, Did you mean 'ddg.proc.nodes'?
  ddg.proc.nodes <- .ddg.proc.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1422:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  rows <- nrow(ddg.proc.nodes)
               ^~~~~~~~~~~~~~
./R/RDataTracker.R:1424:13: style: Words within variable and function names should be separated by '_' rather than '.'.
    type <- ddg.proc.nodes$ddg.type[i]
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:1425:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.proc.node(type) & ddg.proc.nodes$ddg.name[i] == pname) {
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1425:35: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.proc.node(type) & ddg.proc.nodes$ddg.name[i] == pname) {
                                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1426:8: style: Commented code should be removed.
      #print (paste0("Found a matching function for ", pname))
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1427:12: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (!find.unreturned.function) {
           ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1428:10: style: Commented code should be removed.
        #print (paste0("Returning ", ddg.proc.nodes$ddg.num[i]))
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1429:16: style: Words within variable and function names should be separated by '_' rather than '.'.
        return(ddg.proc.nodes$ddg.num[i])
               ^~~~~~~~~~~~~~
./R/RDataTracker.R:1432:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (find.unreturned.function & !ddg.proc.nodes$ddg.return.linked[i]) {
          ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1432:39: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (find.unreturned.function & !ddg.proc.nodes$ddg.return.linked[i]) {
                                      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1432:54: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (find.unreturned.function & !ddg.proc.nodes$ddg.return.linked[i]) {
                                                     ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1433:10: style: Commented code should be removed.
        #print (paste0("Returning ", ddg.proc.nodes$ddg.num[i]))
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1434:16: style: Words within variable and function names should be separated by '_' rather than '.'.
        return(ddg.proc.nodes$ddg.num[i])
               ^~~~~~~~~~~~~~
./R/RDataTracker.R:1442:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) print (sys.calls())
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1442:7: warning: no visible global function definition for ‘.ddg.debug.lib’
  if (.ddg.debug.lib()) print (sys.calls())
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1443:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.insert.error.message(error.msg)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1443:3: warning: no visible global function definition for ‘.ddg.insert.error.message’
  .ddg.insert.error.message(error.msg)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1451:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.last.proc.number <- function() {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1452:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- .ddg.proc.nodes()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1452:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- .ddg.proc.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1452:21: warning: no visible global function definition for ‘.ddg.proc.nodes’, Did you mean 'ddg.proc.nodes'?
  ddg.proc.nodes <- .ddg.proc.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1453:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  rows <- nrow(ddg.proc.nodes)
               ^~~~~~~~~~~~~~
./R/RDataTracker.R:1455:13: style: Words within variable and function names should be separated by '_' rather than '.'.
    type <- ddg.proc.nodes$ddg.type[i]
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:1456:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.proc.node(type)) return(i)
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1456:9: warning: no visible global function definition for ‘.ddg.is.proc.node’
    if (.ddg.is.proc.node(type)) return(i)
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1460:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.insert.error.message(error.msg)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1460:3: warning: no visible global function definition for ‘.ddg.insert.error.message’
  .ddg.insert.error.message(error.msg)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1472:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.data.node.exists <- function(dname, dscope=NULL) {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1473:34: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:1473:34: warning: no visible global function definition for ‘.ddg.get.scope’
  if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:1476:1: style: lines should not be more than 80 characters.
  #print (paste (".ddg.data.node.exists: Looking for", dname, "in scope", dscope))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1477:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes <- .ddg.data.nodes()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1477:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes <- .ddg.data.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1477:21: warning: no visible global function definition for ‘.ddg.data.nodes’, Did you mean 'ddg.data.nodes'?
  ddg.data.nodes <- .ddg.data.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1478:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  rows <- nrow(ddg.data.nodes)
               ^~~~~~~~~~~~~~
./R/RDataTracker.R:1480:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (ddg.data.nodes$ddg.current[i]) {
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1481:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (ddg.data.nodes$ddg.name[i] == dname) {
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:1482:1: style: lines should not be more than 80 characters.
        #print(paste(".ddg.data.node.exist:  found node with name", dname, "in scope", ddg.data.nodes$ddg.scope[i]))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1482:10: style: Commented code should be removed.
        #print(paste(".ddg.data.node.exist:  found node with name", dname, "in scope", ddg.data.nodes$ddg.scope[i]))
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1483:1: style: lines should not be more than 80 characters.
        if (ddg.data.nodes$ddg.scope[i] == "ddg.library" || ddg.data.nodes$ddg.scope[i] == dscope) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1483:13: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (ddg.data.nodes$ddg.scope[i] == "ddg.library" || ddg.data.nodes$ddg.scope[i] == dscope) {
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:1483:61: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (ddg.data.nodes$ddg.scope[i] == "ddg.library" || ddg.data.nodes$ddg.scope[i] == dscope) {
                                                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:1484:12: style: Commented code should be removed.
          #print(".ddg.data.node.exists found")
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1493:6: style: Commented code should be removed.
    #print("Searching global environment")
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1497:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.save.data(dname, dvalue, scope=dscope, from.env=TRUE)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1497:9: warning: no visible global function definition for ‘.ddg.save.data’
        .ddg.save.data(dname, dvalue, scope=dscope, from.env=TRUE)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1497:44: style: Put spaces around all infix operators.
        .ddg.save.data(dname, dvalue, scope=dscope, from.env=TRUE)
                                          ~^~
./R/RDataTracker.R:1497:61: style: Put spaces around all infix operators.
        .ddg.save.data(dname, dvalue, scope=dscope, from.env=TRUE)
                                                           ~^~
./R/RDataTracker.R:1504:4: style: Commented code should be removed.
  #print(".ddg.data.node.exists NOT found")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1514:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.data.number <- function(dname, dscope=NULL) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1515:34: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:1515:34: warning: no visible global function definition for ‘.ddg.get.scope’
  if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:1516:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes <- .ddg.data.nodes()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1516:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes <- .ddg.data.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1516:21: warning: no visible global function definition for ‘.ddg.data.nodes’, Did you mean 'ddg.data.nodes'?
  ddg.data.nodes <- .ddg.data.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1517:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  rows <- nrow(ddg.data.nodes)
               ^~~~~~~~~~~~~~
./R/RDataTracker.R:1519:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (ddg.data.nodes$ddg.current[i]) {
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1520:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (ddg.data.nodes$ddg.name[i] == dname) {
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:1521:1: style: lines should not be more than 80 characters.
        if (ddg.data.nodes$ddg.scope[i] == "ddg.library" || ddg.data.nodes$ddg.scope[i] == dscope) return (ddg.data.nodes$ddg.num[i])
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1521:13: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (ddg.data.nodes$ddg.scope[i] == "ddg.library" || ddg.data.nodes$ddg.scope[i] == dscope) return (ddg.data.nodes$ddg.num[i])
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:1521:61: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (ddg.data.nodes$ddg.scope[i] == "ddg.library" || ddg.data.nodes$ddg.scope[i] == dscope) return (ddg.data.nodes$ddg.num[i])
                                                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:1521:108: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (ddg.data.nodes$ddg.scope[i] == "ddg.library" || ddg.data.nodes$ddg.scope[i] == dscope) return (ddg.data.nodes$ddg.num[i])
                                                                                                           ^~~~~~~~~~~~~~
./R/RDataTracker.R:1528:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.insert.error.message(error.msg)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1528:3: warning: no visible global function definition for ‘.ddg.insert.error.message’
  .ddg.insert.error.message(error.msg)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1537:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.proc.name <- function(pnum) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:1538:26: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (pnum < 1 || pnum > .ddg.pnum()) {
                         ^~~~~~~~~
./R/RDataTracker.R:1540:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.insert.error.message(error.msg)
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1540:5: warning: no visible global function definition for ‘.ddg.insert.error.message’
    .ddg.insert.error.message(error.msg)
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1544:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.proc.nodes()$ddg.name[pnum])
         ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1544:10: warning: no visible global function definition for ‘.ddg.proc.nodes’
  return(.ddg.proc.nodes()$ddg.name[pnum])
         ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1550:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.proc2proc <- function() {
^~~~~~~~~~~~~~
./R/RDataTracker.R:1551:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.pnum <- .ddg.pnum()
              ^~~~~~~~~
./R/RDataTracker.R:1551:15: warning: no visible global function definition for ‘.ddg.pnum’, Did you mean 'ddg.pnum'?
  ddg.pnum <- .ddg.pnum()
              ^~~~~~~~~
./R/RDataTracker.R:1556:33: style: Put spaces around all infix operators.
    node1 <- paste("p", ddg.pnum-1, sep="")
                               ~^~
./R/RDataTracker.R:1556:40: style: Put spaces around all infix operators.
    node1 <- paste("p", ddg.pnum-1, sep="")
                                      ~^~
./R/RDataTracker.R:1557:38: style: Put spaces around all infix operators.
    node2 <- paste("p", ddg.pnum, sep="")
                                    ~^~
./R/RDataTracker.R:1558:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.record.edge(etype, node1, node2)
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1558:5: warning: no visible global function definition for ‘.ddg.record.edge’
    .ddg.record.edge(etype, node1, node2)
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1560:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.debug.lib()) {
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1561:17: style: Words within variable and function names should be separated by '_' rather than '.'.
      pname1 <- .ddg.proc.name(ddg.pnum-1)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:1561:17: warning: no visible global function definition for ‘.ddg.proc.name’
      pname1 <- .ddg.proc.name(ddg.pnum-1)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:1561:40: style: Put spaces around all infix operators.
      pname1 <- .ddg.proc.name(ddg.pnum-1)
                                      ~^~
./R/RDataTracker.R:1562:17: style: Words within variable and function names should be separated by '_' rather than '.'.
      pname2 <- .ddg.proc.name(ddg.pnum)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:1562:17: warning: no visible global function definition for ‘.ddg.proc.name’
      pname2 <- .ddg.proc.name(ddg.pnum)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:1564:48: style: Put spaces around all infix operators.
      print(paste("CF ", node1, " ", node2, sep=""))
                                              ~^~
./R/RDataTracker.R:1578:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.data2proc <- function(dname, dscope, pname) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:1580:9: style: Words within variable and function names should be separated by '_' rather than '.'.
  dn <- .ddg.data.number(dname, dscope)
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1580:9: warning: no visible global function definition for ‘.ddg.data.number’
  dn <- .ddg.data.number(dname, dscope)
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1581:9: style: Words within variable and function names should be separated by '_' rather than '.'.
  pn <- .ddg.proc.number(pname)
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1581:9: warning: no visible global function definition for ‘.ddg.proc.number’
  pn <- .ddg.proc.number(pname)
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1585:30: style: Put spaces around all infix operators.
  node1 <- paste("d", dn, sep="")
                            ~^~
./R/RDataTracker.R:1586:30: style: Put spaces around all infix operators.
  node2 <- paste("p", pn, sep="")
                            ~^~
./R/RDataTracker.R:1587:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.record.edge(etype, node1, node2)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1587:3: warning: no visible global function definition for ‘.ddg.record.edge’
  .ddg.record.edge(etype, node1, node2)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1589:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) {
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1590:54: style: Put spaces around all infix operators.
    print(paste("data2proc: ", dname, " ", pname, sep=""))
                                                    ~^~
./R/RDataTracker.R:1591:46: style: Put spaces around all infix operators.
    print(paste("DF ", node1, " ", node2, sep=""))
                                            ~^~
./R/RDataTracker.R:1607:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.proc2data <- function(pname, dname, dscope=NULL, return.value=FALSE) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:1609:4: style: Commented code should be removed.
  #print (paste(".ddg.proc2data: Looking for", dname, "in scope", dscope))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1610:9: style: Words within variable and function names should be separated by '_' rather than '.'.
  dn <- .ddg.data.number(dname, dscope)
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1610:9: warning: no visible global function definition for ‘.ddg.data.number’
  dn <- .ddg.data.number(dname, dscope)
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1611:4: style: Commented code should be removed.
  #print (paste(".ddg.proc2data: Found node", dn))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1612:9: style: Words within variable and function names should be separated by '_' rather than '.'.
  pn <- .ddg.proc.number(pname, return.value)
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1612:9: warning: no visible global function definition for ‘.ddg.proc.number’
  pn <- .ddg.proc.number(pname, return.value)
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1619:32: style: Put spaces around all infix operators.
    node1 <- paste("p", pn, sep="")
                              ~^~
./R/RDataTracker.R:1620:32: style: Put spaces around all infix operators.
    node2 <- paste("d", dn, sep="")
                              ~^~
./R/RDataTracker.R:1621:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.record.edge(etype, node1, node2)
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1621:5: warning: no visible global function definition for ‘.ddg.record.edge’
    .ddg.record.edge(etype, node1, node2)
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1627:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.proc.nodes <- .ddg.proc.nodes()
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1627:25: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.proc.nodes <- .ddg.proc.nodes()
                        ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1627:25: warning: no visible global function definition for ‘.ddg.proc.nodes’, Did you mean 'ddg.proc.nodes'?
      ddg.proc.nodes <- .ddg.proc.nodes()
                        ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1629:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.proc.nodes$ddg.return.linked[pn] <- TRUE
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1629:22: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.proc.nodes$ddg.return.linked[pn] <- TRUE
                     ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1630:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.set("ddg.proc.nodes", ddg.proc.nodes)
      ^~~~~~~~
./R/RDataTracker.R:1630:7: warning: no visible global function definition for ‘.ddg.set’
      .ddg.set("ddg.proc.nodes", ddg.proc.nodes)
      ^~~~~~~~
./R/RDataTracker.R:1630:34: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.set("ddg.proc.nodes", ddg.proc.nodes)
                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:1633:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.debug.lib()) {
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1634:56: style: Put spaces around all infix operators.
      print(paste("proc2data: ", pname, " ", dname, sep=""))
                                                      ~^~
./R/RDataTracker.R:1635:48: style: Put spaces around all infix operators.
      print(paste("DF ", node1, " ", node2, sep=""))
                                              ~^~
./R/RDataTracker.R:1650:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.lastproc2data <- function(dname, all=TRUE, dscope=NULL) {
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1652:9: style: Words within variable and function names should be separated by '_' rather than '.'.
  dn <- .ddg.data.number(dname, dscope)
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1652:9: warning: no visible global function definition for ‘.ddg.data.number’
  dn <- .ddg.data.number(dname, dscope)
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1653:11: style: Place a space before left parenthesis, except in a function call.
  pn <- if(all) .ddg.pnum() else .ddg.last.proc.number()
          ^
./R/RDataTracker.R:1653:17: style: Words within variable and function names should be separated by '_' rather than '.'.
  pn <- if(all) .ddg.pnum() else .ddg.last.proc.number()
                ^~~~~~~~~
./R/RDataTracker.R:1653:17: warning: no visible global function definition for ‘.ddg.pnum’
  pn <- if(all) .ddg.pnum() else .ddg.last.proc.number()
                ^~~~~~~~~
./R/RDataTracker.R:1653:34: style: Words within variable and function names should be separated by '_' rather than '.'.
  pn <- if(all) .ddg.pnum() else .ddg.last.proc.number()
                                 ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1653:34: warning: no visible global function definition for ‘.ddg.last.proc.number’
  pn <- if(all) .ddg.pnum() else .ddg.last.proc.number()
                                 ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1657:30: style: Put spaces around all infix operators.
  node1 <- paste("p", pn, sep="")
                            ~^~
./R/RDataTracker.R:1658:30: style: Put spaces around all infix operators.
  node2 <- paste("d", dn, sep="")
                            ~^~
./R/RDataTracker.R:1659:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.record.edge(etype, node1, node2)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1659:3: warning: no visible global function definition for ‘.ddg.record.edge’
  .ddg.record.edge(etype, node1, node2)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:1661:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) {
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1663:46: style: Put spaces around all infix operators.
    print(paste("DF ", node1, " ", node2, sep=""))
                                            ~^~
./R/RDataTracker.R:1672:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.global.assign <- function (expr) {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1705:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.empty.vars.set <- function(var.table.size=1) {
^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1705:40: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.empty.vars.set <- function(var.table.size=1) {
                                       ^~~~~~~~~~~~~~
./R/RDataTracker.R:1707:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (var.table.size <= 0) var.table.size <- 1
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1707:28: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (var.table.size <= 0) var.table.size <- 1
                           ^~~~~~~~~~~~~~
./R/RDataTracker.R:1709:18: style: Put spaces around all infix operators.
	vars.set <- data.frame(variable=character(var.table.size),
                ~^~~
./R/RDataTracker.R:1709:40: style: Put spaces around all infix operators.
	vars.set <- data.frame(variable=character(var.table.size),
                                      ~^~
./R/RDataTracker.R:1709:51: style: Words within variable and function names should be separated by '_' rather than '.'.
	vars.set <- data.frame(variable=character(var.table.size),
                                                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1710:37: style: Put spaces around all infix operators.
			first.writer=numeric(var.table.size),
                                   ~^~
./R/RDataTracker.R:1710:46: style: Words within variable and function names should be separated by '_' rather than '.'.
			first.writer=numeric(var.table.size),
                                             ^~~~~~~~~~~~~~
./R/RDataTracker.R:1711:36: style: Put spaces around all infix operators.
			last.writer=numeric(var.table.size),
                                  ~^~
./R/RDataTracker.R:1711:45: style: Words within variable and function names should be separated by '_' rather than '.'.
			last.writer=numeric(var.table.size),
                                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:1712:46: style: Put spaces around all infix operators.
			possible.first.writer=numeric(var.table.size),
                                            ~^~
./R/RDataTracker.R:1712:55: style: Words within variable and function names should be separated by '_' rather than '.'.
			possible.first.writer=numeric(var.table.size),
                                                      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1713:45: style: Put spaces around all infix operators.
			possible.last.writer=numeric(var.table.size),
                                           ~^~
./R/RDataTracker.R:1713:54: style: Words within variable and function names should be separated by '_' rather than '.'.
			possible.last.writer=numeric(var.table.size),
                                                     ^~~~~~~~~~~~~~
./R/RDataTracker.R:1714:23: style: Put spaces around all infix operators.
      stringsAsFactors=FALSE)
                     ~^~
./R/RDataTracker.R:1717:31: style: Put spaces around all infix operators.
	vars.set$first.writer <- var.table.size + 1
                             ~^~~
./R/RDataTracker.R:1717:34: style: Words within variable and function names should be separated by '_' rather than '.'.
	vars.set$first.writer <- var.table.size + 1
                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:1718:18: style: Words within variable and function names should be separated by '_' rather than '.'.
	vars.set$possible.first.writer <- var.table.size + 1
                 ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1718:40: style: Put spaces around all infix operators.
	vars.set$possible.first.writer <- var.table.size + 1
                                      ~^~~
./R/RDataTracker.R:1718:43: style: Words within variable and function names should be separated by '_' rather than '.'.
	vars.set$possible.first.writer <- var.table.size + 1
                                          ^~~~~~~~~~~~~~
./R/RDataTracker.R:1720:4: style: Commented code should be removed.
  #print(".ddg.create.empty.vars.set returning")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1721:4: style: Commented code should be removed.
  #print(vars.set)
   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1731:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.double.vars.set <- function(vars.set, size=nrow(vars.set)) {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1733:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set <- rbind(vars.set,.ddg.create.empty.vars.set(size))
        ^~~~~~~~~~~~
./R/RDataTracker.R:1733:22: style: Put spaces around all infix operators.
	new.vars.set <- rbind(vars.set,.ddg.create.empty.vars.set(size))
                    ~^~~
./R/RDataTracker.R:1733:33: warning: no visible global function definition for ‘.ddg.create.empty.vars.set’
	new.vars.set <- rbind(vars.set,.ddg.create.empty.vars.set(size))
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1733:40: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set <- rbind(vars.set,.ddg.create.empty.vars.set(size))
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1736:1: style: lines should not be more than 80 characters.
	new.vars.set$first.writer <- ifelse(new.vars.set$first.writer == size + 1, size*2 + 1, new.vars.set$first.writer)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1736:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set$first.writer <- ifelse(new.vars.set$first.writer == size + 1, size*2 + 1, new.vars.set$first.writer)
        ^~~~~~~~~~~~
./R/RDataTracker.R:1736:35: style: Put spaces around all infix operators.
	new.vars.set$first.writer <- ifelse(new.vars.set$first.writer == size + 1, size*2 + 1, new.vars.set$first.writer)
                                 ~^~~
./R/RDataTracker.R:1736:45: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set$first.writer <- ifelse(new.vars.set$first.writer == size + 1, size*2 + 1, new.vars.set$first.writer)
                                            ^~~~~~~~~~~~
./R/RDataTracker.R:1736:71: style: Put spaces around all infix operators.
	new.vars.set$first.writer <- ifelse(new.vars.set$first.writer == size + 1, size*2 + 1, new.vars.set$first.writer)
                                                                     ~^
./R/RDataTracker.R:1736:79: style: Put spaces around all infix operators.
	new.vars.set$first.writer <- ifelse(new.vars.set$first.writer == size + 1, size*2 + 1, new.vars.set$first.writer)
                                                                             ~^~
./R/RDataTracker.R:1736:88: style: Put spaces around all infix operators.
	new.vars.set$first.writer <- ifelse(new.vars.set$first.writer == size + 1, size*2 + 1, new.vars.set$first.writer)
                                                                                      ~^~
./R/RDataTracker.R:1736:91: style: Put spaces around all infix operators.
	new.vars.set$first.writer <- ifelse(new.vars.set$first.writer == size + 1, size*2 + 1, new.vars.set$first.writer)
                                                                                         ~^~
./R/RDataTracker.R:1736:96: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set$first.writer <- ifelse(new.vars.set$first.writer == size + 1, size*2 + 1, new.vars.set$first.writer)
                                                                                               ^~~~~~~~~~~~
./R/RDataTracker.R:1737:1: style: lines should not be more than 80 characters.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1737:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
        ^~~~~~~~~~~~
./R/RDataTracker.R:1737:22: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
                     ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1737:44: style: Put spaces around all infix operators.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
                                          ~^~~
./R/RDataTracker.R:1737:54: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
                                                     ^~~~~~~~~~~~
./R/RDataTracker.R:1737:67: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
                                                                  ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1737:89: style: Put spaces around all infix operators.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
                                                                                       ~^
./R/RDataTracker.R:1737:97: style: Put spaces around all infix operators.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
                                                                                               ~^~
./R/RDataTracker.R:1737:106: style: Put spaces around all infix operators.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
                                                                                                        ~^~
./R/RDataTracker.R:1737:109: style: Put spaces around all infix operators.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
                                                                                                           ~^~
./R/RDataTracker.R:1737:114: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
                                                                                                                 ^~~~~~~~~~~~
./R/RDataTracker.R:1737:127: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.vars.set$possible.first.writer <- ifelse(new.vars.set$possible.first.writer == size + 1, size*2 + 1, new.vars.set$possible.first.writer)
                                                                                                                              ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1739:16: style: Words within variable and function names should be separated by '_' rather than '.'.
	return(new.vars.set)
               ^~~~~~~~~~~~
./R/RDataTracker.R:1751:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.add.to.vars.set <- function(vars.set, cmd, i) {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1752:4: style: Commented code should be removed.
  #print("In .ddg.add.to.vars.set")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1756:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  main.var.assigned <- cmd@vars.set
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1762:5: style: Variable and function names should be all lowercase.
    nRow <- which(vars.set$variable == var)
    ^~~~
./R/RDataTracker.R:1765:16: style: Variable and function names should be all lowercase.
    if (length(nRow) > 0) {
               ^~~~
./R/RDataTracker.R:1766:20: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (!is.null(main.var.assigned) && var == main.var.assigned) {
                   ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1766:49: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (!is.null(main.var.assigned) && var == main.var.assigned) {
                                                ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1767:30: style: Variable and function names should be all lowercase.
        vars.set$last.writer[nRow] <- i
                             ^~~~
./R/RDataTracker.R:1770:18: style: Words within variable and function names should be separated by '_' rather than '.'.
        vars.set$possible.last.writer[nRow] <- i
                 ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1770:39: style: Variable and function names should be all lowercase.
        vars.set$possible.last.writer[nRow] <- i
                                      ^~~~
./R/RDataTracker.R:1780:21: style: Words within variable and function names should be separated by '_' rather than '.'.
        vars.set <- .ddg.double.vars.set(vars.set,nrow(vars.set))
                    ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1780:21: warning: no visible global function definition for ‘.ddg.double.vars.set’
        vars.set <- .ddg.double.vars.set(vars.set,nrow(vars.set))
                    ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1780:51: style: Commas should always have a space after.
        vars.set <- .ddg.double.vars.set(vars.set,nrow(vars.set))
                                                  ^
./R/RDataTracker.R:1787:28: style: Place a space before left parenthesis, except in a function call.
			if (!is.null(main.var.assigned) && var == main.var.assigned) {
                           ^
./R/RDataTracker.R:1787:38: style: Words within variable and function names should be separated by '_' rather than '.'.
			if (!is.null(main.var.assigned) && var == main.var.assigned) {
                                     ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1787:57: style: Put spaces around all infix operators.
			if (!is.null(main.var.assigned) && var == main.var.assigned) {
                                                       ~^~~
./R/RDataTracker.R:1787:64: style: Put spaces around all infix operators.
			if (!is.null(main.var.assigned) && var == main.var.assigned) {
                                                              ~^~~
./R/RDataTracker.R:1787:67: style: Words within variable and function names should be separated by '_' rather than '.'.
			if (!is.null(main.var.assigned) && var == main.var.assigned) {
                                                                  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1792:42: style: Words within variable and function names should be separated by '_' rather than '.'.
				vars.set$possible.first.writer[var.num] <- i
                                         ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1793:42: style: Words within variable and function names should be separated by '_' rather than '.'.
				vars.set$possible.last.writer[var.num] <- i
                                         ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1799:4: style: Commented code should be removed.
  #print(vars.set)
   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1808:2: style: Commented code should be removed.
## parsed.commands - a list of parsed commands.
 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1810:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.find.var.assignments <- function(cmds) {
^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1811:4: style: Commented code should be removed.
  #print("In .ddg.find.var.assignments")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1815:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  var.table.size <- length(cmds)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:1816:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  vars.set <- .ddg.create.empty.vars.set(var.table.size)
              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1816:15: warning: no visible global function definition for ‘.ddg.create.empty.vars.set’
  vars.set <- .ddg.create.empty.vars.set(var.table.size)
              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1816:42: style: Words within variable and function names should be separated by '_' rather than '.'.
  vars.set <- .ddg.create.empty.vars.set(var.table.size)
                                         ^~~~~~~~~~~~~~
./R/RDataTracker.R:1822:6: style: Commented code should be removed.
    #print(paste("Looking for var assignments in", cmd.expr@abbrev))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1823:17: style: Words within variable and function names should be separated by '_' rather than '.'.
    vars.set <- .ddg.add.to.vars.set(vars.set,cmd.expr, i)
                ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1823:17: warning: no visible global function definition for ‘.ddg.add.to.vars.set’
    vars.set <- .ddg.add.to.vars.set(vars.set,cmd.expr, i)
                ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1823:47: style: Commas should always have a space after.
    vars.set <- .ddg.add.to.vars.set(vars.set,cmd.expr, i)
                                              ^
./R/RDataTracker.R:1839:1: style: lines should not be more than 80 characters.
.ddg.auto.graphic.node <- function(cmd.abbrev=NULL, dev.to.capture=.ddg.dev.change) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1839:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.auto.graphic.node <- function(cmd.abbrev=NULL, dev.to.capture=.ddg.dev.change) {
^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1839:53: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.auto.graphic.node <- function(cmd.abbrev=NULL, dev.to.capture=.ddg.dev.change) {
                                                    ^~~~~~~~~~~~~~
./R/RDataTracker.R:1839:68: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.auto.graphic.node <- function(cmd.abbrev=NULL, dev.to.capture=.ddg.dev.change) {
                                                                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1841:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	num.dev.to.capture <- dev.to.capture()
        ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1841:28: style: Put spaces around all infix operators.
	num.dev.to.capture <- dev.to.capture()
                          ~^~~
./R/RDataTracker.R:1841:31: style: Words within variable and function names should be separated by '_' rather than '.'.
	num.dev.to.capture <- dev.to.capture()
                              ^~~~~~~~~~~~~~
./R/RDataTracker.R:1842:12: style: Place a space before left parenthesis, except in a function call.
	if (num.dev.to.capture > 1) {
           ^
./R/RDataTracker.R:1842:13: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (num.dev.to.capture > 1) {
            ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1846:25: style: Words within variable and function names should be separated by '_' rather than '.'.
		dev.set(num.dev.to.capture)
                        ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1849:1: style: lines should not be more than 80 characters.
		name <- if (!is.null(cmd.abbrev) && cmd.abbrev != "") paste0("graphic", substr(cmd.abbrev,1,10)) else "graphic"
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1849:22: style: Put spaces around all infix operators.
		name <- if (!is.null(cmd.abbrev) && cmd.abbrev != "") paste0("graphic", substr(cmd.abbrev,1,10)) else "graphic"
                    ~^~~
./R/RDataTracker.R:1849:28: style: Place a space before left parenthesis, except in a function call.
		name <- if (!is.null(cmd.abbrev) && cmd.abbrev != "") paste0("graphic", substr(cmd.abbrev,1,10)) else "graphic"
                           ^
./R/RDataTracker.R:1849:64: style: Put spaces around all infix operators.
		name <- if (!is.null(cmd.abbrev) && cmd.abbrev != "") paste0("graphic", substr(cmd.abbrev,1,10)) else "graphic"
                                                              ~^~~
./R/RDataTracker.R:1850:3: warning: no visible global function definition for ‘.ddg.snapshot.node’
		.ddg.snapshot.node(name, fext="jpeg", data=NULL)
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1850:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.snapshot.node(name, fext="jpeg", data=NULL)
                ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1850:46: style: Put spaces around all infix operators.
		.ddg.snapshot.node(name, fext="jpeg", data=NULL)
                                            ~^~
./R/RDataTracker.R:1856:19: style: Place a space before left parenthesis, except in a function call.
		if(is.null(cmd.abbrev)) .ddg.lastproc2data(name, all=FALSE)
                  ^
./R/RDataTracker.R:1856:41: style: Words within variable and function names should be separated by '_' rather than '.'.
		if(is.null(cmd.abbrev)) .ddg.lastproc2data(name, all=FALSE)
                                        ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1857:22: style: Words within variable and function names should be separated by '_' rather than '.'.
		else .ddg.proc2data(cmd.abbrev, name)
                     ^~~~~~~~~~~~~~
./R/RDataTracker.R:1873:1: style: lines should not be more than 80 characters.
.ddg.create.data.use.edges.for.console.cmd <- function (vars.set, cmd, cmd.pos, for.caller) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1873:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.data.use.edges.for.console.cmd <- function (vars.set, cmd, cmd.pos, for.caller) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1873:1: style: Variable and function names should not be longer than 30 characters.
.ddg.create.data.use.edges.for.console.cmd <- function (vars.set, cmd, cmd.pos, for.caller) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1875:4: style: Commented code should be removed.
  #print (paste(".ddg.create.data.use.edges.for.console.cmd: cmd = ", cmd@text))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1879:6: style: Commented code should be removed.
    #print(paste(".ddg.create.data.use.edges.for.console.cmd: var =", var))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1881:14: style: Words within variable and function names should be separated by '_' rather than '.'.
    scope <- .ddg.get.scope(var, for.caller)
             ^~~~~~~~~~~~~~
./R/RDataTracker.R:1881:14: warning: no visible global function definition for ‘.ddg.get.scope’
    scope <- .ddg.get.scope(var, for.caller)
             ^~~~~~~~~~~~~~
./R/RDataTracker.R:1883:6: style: Commented code should be removed.
    #print(paste(".ddg.create.data.use.edges.for.console.cmd: scope =", scope))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1885:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.data.node.exists(var, scope)) {
        ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1886:9: style: Commented code should be removed.
      # print(".ddg.create.data.use.edges.for.console.cmd found data node")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1887:7: style: Variable and function names should be all lowercase.
      nRow <- which(vars.set$variable == var)
      ^~~~
./R/RDataTracker.R:1890:18: style: Variable and function names should be all lowercase.
      if (length(nRow) > 0) {
                 ^~~~
./R/RDataTracker.R:1891:1: style: lines should not be more than 80 characters.
        first.writer <- min(vars.set$first.writer[nRow], vars.set$possible.first.writer[nRow])
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1891:51: style: Variable and function names should be all lowercase.
        first.writer <- min(vars.set$first.writer[nRow], vars.set$possible.first.writer[nRow])
                                                  ^~~~
./R/RDataTracker.R:1891:67: style: Words within variable and function names should be separated by '_' rather than '.'.
        first.writer <- min(vars.set$first.writer[nRow], vars.set$possible.first.writer[nRow])
                                                                  ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1891:89: style: Variable and function names should be all lowercase.
        first.writer <- min(vars.set$first.writer[nRow], vars.set$possible.first.writer[nRow])
                                                                                        ^~~~
./R/RDataTracker.R:1892:1: style: lines should not be more than 80 characters.
        last.writer <- max(vars.set$last.writer[nRow], vars.set$possible.last.writer[nRow])
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1892:49: style: Variable and function names should be all lowercase.
        last.writer <- max(vars.set$last.writer[nRow], vars.set$possible.last.writer[nRow])
                                                ^~~~
./R/RDataTracker.R:1892:65: style: Words within variable and function names should be separated by '_' rather than '.'.
        last.writer <- max(vars.set$last.writer[nRow], vars.set$possible.last.writer[nRow])
                                                                ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1892:86: style: Variable and function names should be all lowercase.
        last.writer <- max(vars.set$last.writer[nRow], vars.set$possible.last.writer[nRow])
                                                                                     ^~~~
./R/RDataTracker.R:1899:65: style: Trailing whitespace is superfluous.
        # Note: the following line leads to the self-referencing 
                                                                ^
./R/RDataTracker.R:1902:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.data2proc(var, scope, cmd@abbrev)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:1902:11: warning: no visible global function definition for ‘.ddg.data2proc’
          .ddg.data2proc(var, scope, cmd@abbrev)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:1912:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.data2proc(var, scope, cmd@abbrev)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1912:9: warning: no visible global function definition for ‘.ddg.data2proc’
        .ddg.data2proc(var, scope, cmd@abbrev)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1919:1: style: lines should not be more than 80 characters.
			# error.msg <- paste("Unable to find data node for",var, ". Command", parse(text=cmd.expr), "appears to use it for procedure node", cmd, ".")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1919:6: style: Commented code should be removed.
			# error.msg <- paste("Unable to find data node for",var, ". Command", parse(text=cmd.expr), "appears to use it for procedure node", cmd, ".")
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1920:8: style: Commented code should be removed.
    	# .ddg.insert.error.message(error.msg)
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1939:1: style: lines should not be more than 80 characters.
.ddg.create.data.set.edges.for.cmd <- function(vars.set, cmd, cmd.pos, env, for.finish.node = FALSE, scope=NULL, stack=NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1939:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.data.set.edges.for.cmd <- function(vars.set, cmd, cmd.pos, env, for.finish.node = FALSE, scope=NULL, stack=NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1939:1: style: Variable and function names should not be longer than 30 characters.
.ddg.create.data.set.edges.for.cmd <- function(vars.set, cmd, cmd.pos, env, for.finish.node = FALSE, scope=NULL, stack=NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1939:77: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.data.set.edges.for.cmd <- function(vars.set, cmd, cmd.pos, env, for.finish.node = FALSE, scope=NULL, stack=NULL) {
                                                                            ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1940:5: style: Commented code should be removed.
  # print(paste("In .ddg.create.data.set.edges.for.cmd: cmd = ", cmd@abbrev))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1941:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:1944:1: style: lines should not be more than 80 characters.
  # print(paste("In .ddg.create.data.set.edges.for.cmd: vars.assigned = ", vars.assigned))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1944:5: style: Commented code should be removed.
  # print(paste("In .ddg.create.data.set.edges.for.cmd: vars.assigned = ", vars.assigned))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1945:5: style: Commented code should be removed.
  # print("In .ddg.create.data.set.edges.for.cmd: vars.set = ")
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1946:5: style: Commented code should be removed.
  # print(vars.set)
    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1949:7: style: Commented code should be removed.
    # print(paste(".ddg.create.data.set.edges.for.cmd: var = ", var))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1950:5: style: Variable and function names should be all lowercase.
    whichRows <- which(vars.set$variable == var)
    ^~~~~~~~~
./R/RDataTracker.R:1954:1: style: lines should not be more than 80 characters.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1954:20: style: Place a space before left parenthesis, except in a function call.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                   ^
./R/RDataTracker.R:1954:21: style: Place a space before left parenthesis, except in a function call.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                    ^
./R/RDataTracker.R:1954:29: style: Variable and function names should be all lowercase.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                            ^~~~~~~~~
./R/RDataTracker.R:1954:40: style: Put spaces around all infix operators.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                      ~^~
./R/RDataTracker.R:1954:44: style: Put spaces around all infix operators.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                          ~^~~
./R/RDataTracker.R:1954:68: style: Variable and function names should be all lowercase.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                                                   ^~~~~~~~~
./R/RDataTracker.R:1954:79: style: Put spaces around all infix operators.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                                                              ^~~
./R/RDataTracker.R:1954:90: style: Put spaces around all infix operators.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                                                                        ~^~~
./R/RDataTracker.R:1954:102: style: Words within variable and function names should be separated by '_' rather than '.'.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                                                                                     ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1954:123: style: Variable and function names should be all lowercase.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                                                                                                          ^~~~~~~~~
./R/RDataTracker.R:1954:134: style: Put spaces around all infix operators.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                                                                                                                    ~^~~
./R/RDataTracker.R:1954:158: style: Variable and function names should be all lowercase.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                                                                                                                                             ^~~~~~~~~
./R/RDataTracker.R:1954:170: style: Put spaces around all infix operators.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                                                                                                                                                        ~^~~
./R/RDataTracker.R:1954:173: style: Words within variable and function names should be separated by '_' rather than '.'.
		if ((length(whichRows) > 0 && vars.set$last.writer[whichRows] == cmd.pos && vars.set$possible.last.writer[whichRows] <= vars.set$last.writer[whichRows]) || for.finish.node) {
                                                                                                                                                                            ^~~~~~~~~~~~~~~
./R/RDataTracker.R:1955:24: style: Place a space before left parenthesis, except in a function call.
		    if (is.null(env)) {
                       ^
./R/RDataTracker.R:1956:16: warning: no visible global function definition for ‘.ddg.get.env’
		      env <- .ddg.get.env(var, calls=stack)
               ^~~~~~~~~~~~
./R/RDataTracker.R:1956:27: style: Put spaces around all infix operators.
		      env <- .ddg.get.env(var, calls=stack)
                         ~^~~
./R/RDataTracker.R:1956:30: style: Words within variable and function names should be separated by '_' rather than '.'.
		      env <- .ddg.get.env(var, calls=stack)
                             ^~~~~~~~~~~~
./R/RDataTracker.R:1958:16: warning: no visible global function definition for ‘.ddg.get.scope’
		    scope <- .ddg.get.scope(var, calls=stack, env=env)
               ^~~~~~~~~~~~~~
./R/RDataTracker.R:1958:27: style: Put spaces around all infix operators.
		    scope <- .ddg.get.scope(var, calls=stack, env=env)
                         ~^~~
./R/RDataTracker.R:1958:30: style: Words within variable and function names should be separated by '_' rather than '.'.
		    scope <- .ddg.get.scope(var, calls=stack, env=env)
                             ^~~~~~~~~~~~~~
./R/RDataTracker.R:1958:55: style: Put spaces around all infix operators.
		    scope <- .ddg.get.scope(var, calls=stack, env=env)
                                                     ~^~
./R/RDataTracker.R:1959:25: style: Put spaces around all infix operators.
		    val <- tryCatch(eval(parse(text=var), env),
                       ~^~~
./R/RDataTracker.R:1961:29: style: Put spaces around all infix operators.
            eval (parse(text=var), parent.env(env))
                           ~^~
./R/RDataTracker.R:1965:1: style: lines should not be more than 80 characters.
			  tryCatch(.ddg.save.data(var, val, fname=".ddg.create.data.set.edges.for.cmd", error=TRUE, scope=scope, stack=stack, env=env),
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1965:36: style: Words within variable and function names should be separated by '_' rather than '.'.
			  tryCatch(.ddg.save.data(var, val, fname=".ddg.create.data.set.edges.for.cmd", error=TRUE, scope=scope, stack=stack, env=env),
                                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:1965:66: style: Put spaces around all infix operators.
			  tryCatch(.ddg.save.data(var, val, fname=".ddg.create.data.set.edges.for.cmd", error=TRUE, scope=scope, stack=stack, env=env),
                                                                ~^~
./R/RDataTracker.R:1965:110: style: Put spaces around all infix operators.
			  tryCatch(.ddg.save.data(var, val, fname=".ddg.create.data.set.edges.for.cmd", error=TRUE, scope=scope, stack=stack, env=env),
                                                                                                            ~^~
./R/RDataTracker.R:1965:122: style: Put spaces around all infix operators.
			  tryCatch(.ddg.save.data(var, val, fname=".ddg.create.data.set.edges.for.cmd", error=TRUE, scope=scope, stack=stack, env=env),
                                                                                                                         ^~
./R/RDataTracker.R:1966:33: warning: no visible global function definition for ‘.ddg.data.node’
			         error = function(e){.ddg.data.node("Data", var, "complex", scope)})
                                ^~~~~~~~~~~~~~
./R/RDataTracker.R:1966:40: style: Put spaces around all infix operators.
			         error = function(e){.ddg.data.node("Data", var, "complex", scope)})
                                      ~^~
./R/RDataTracker.R:1966:53: style: Opening curly braces should never go on their own line and should always be followed by a new line.
			         error = function(e){.ddg.data.node("Data", var, "complex", scope)})
                                                    ^
./R/RDataTracker.R:1966:54: style: Words within variable and function names should be separated by '_' rather than '.'.
			         error = function(e){.ddg.data.node("Data", var, "complex", scope)})
                                                     ^~~~~~~~~~~~~~
./R/RDataTracker.R:1966:99: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
			         error = function(e){.ddg.data.node("Data", var, "complex", scope)})
                                                                                                  ^
./R/RDataTracker.R:1968:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.proc2data(cmd@abbrev, var, scope)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1968:9: warning: no visible global function definition for ‘.ddg.proc2data’
        .ddg.proc2data(cmd@abbrev, var, scope)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1982:1: style: lines should not be more than 80 characters.
.ddg.create.data.node.for.possible.writes <- function (vars.set, last.command, env= NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1982:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.data.node.for.possible.writes <- function (vars.set, last.command, env= NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1982:1: style: Variable and function names should not be longer than 30 characters.
.ddg.create.data.node.for.possible.writes <- function (vars.set, last.command, env= NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1983:4: style: Commented code should be removed.
  #print("In .ddg.create.data.node.for.possible.writes")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1987:7: style: Commented code should be removed.
    # print(paste("Checking ", vars.set$variable[i]))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1988:18: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (vars.set$possible.last.writer[i] > vars.set$last.writer[i]) {
                 ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:1989:40: style: Put spaces around all infix operators.
      value <- tryCatch(eval(parse(text=vars.set$variable[i]), environment),
                                      ~^~
./R/RDataTracker.R:1990:31: style: Opening curly braces should never go on their own line and should always be followed by a new line.
          error = function(e) {NULL}
                              ^
./R/RDataTracker.R:1990:36: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
          error = function(e) {NULL}
                                   ^
./R/RDataTracker.R:1996:9: style: Variable and function names should be all lowercase.
        envName <- environmentName(environment)
        ^~~~~~~
./R/RDataTracker.R:1997:13: style: Variable and function names should be all lowercase.
        if (envName == "") envName <- .ddg.get.scope(vars.set$variable[i])
            ^~~~~~~
./R/RDataTracker.R:1997:28: style: Variable and function names should be all lowercase.
        if (envName == "") envName <- .ddg.get.scope(vars.set$variable[i])
                           ^~~~~~~
./R/RDataTracker.R:1997:39: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (envName == "") envName <- .ddg.get.scope(vars.set$variable[i])
                                      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1997:39: warning: no visible global function definition for ‘.ddg.get.scope’
        if (envName == "") envName <- .ddg.get.scope(vars.set$variable[i])
                                      ^~~~~~~~~~~~~~
./R/RDataTracker.R:1998:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.data.node("Data", vars.set$variable[i], value, envName)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1998:9: warning: no visible global function definition for ‘.ddg.data.node’
        .ddg.data.node("Data", vars.set$variable[i], value, envName)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1998:61: style: Variable and function names should be all lowercase.
        .ddg.data.node("Data", vars.set$variable[i], value, envName)
                                                            ^~~~~~~
./R/RDataTracker.R:1999:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.proc2data(last.command@abbrev, vars.set$variable[i], envName)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1999:9: warning: no visible global function definition for ‘.ddg.proc2data’
        .ddg.proc2data(last.command@abbrev, vars.set$variable[i], envName)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:1999:67: style: Variable and function names should be all lowercase.
        .ddg.proc2data(last.command@abbrev, vars.set$variable[i], envName)
                                                                  ^~~~~~~
./R/RDataTracker.R:2003:4: style: Commented code should be removed.
  #print("Done with .ddg.create.data.node.for.possible.writes")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2014:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.find.files <- function(main.object, func.df, env=NULL) {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:2018:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  find.files.rec <- function(obj) {
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:2032:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.functiondecl(obj)) return(NULL)
        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2032:9: warning: no visible global function definition for ‘.ddg.is.functiondecl’
    if (.ddg.is.functiondecl(obj)) return(NULL)
        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2038:38: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (length (obj) == 1) return (find.files.rec (obj[[1]]))
                                     ^~~~~~~~~~~~~~
./R/RDataTracker.R:2043:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        read.func.pos <- match (as.character(obj[[1]]), func.df$function.names)
        ^~~~~~~~~~~~~
./R/RDataTracker.R:2044:21: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (!is.na (read.func.pos)) {
                    ^~~~~~~~~~~~~
./R/RDataTracker.R:2046:43: style: Words within variable and function names should be separated by '_' rather than '.'.
          arg.name <- func.df$param.names[read.func.pos]
                                          ^~~~~~~~~~~~~
./R/RDataTracker.R:2047:13: style: Commented code should be removed.
          # print (paste(".ddg.find.files: arg.name = ", arg.name))
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2050:1: style: lines should not be more than 80 characters.
          file.name.arg.matches <- unlist(lapply (names(obj), function (arg) {return (pmatch (arg, arg.name))}))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2050:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          file.name.arg.matches <- unlist(lapply (names(obj), function (arg) {return (pmatch (arg, arg.name))}))
          ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2050:78: style: Opening curly braces should never go on their own line and should always be followed by a new line.
          file.name.arg.matches <- unlist(lapply (names(obj), function (arg) {return (pmatch (arg, arg.name))}))
                                                                             ^
./R/RDataTracker.R:2050:110: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
          file.name.arg.matches <- unlist(lapply (names(obj), function (arg) {return (pmatch (arg, arg.name))}))
                                                                                                             ^
./R/RDataTracker.R:2051:34: style: Words within variable and function names should be separated by '_' rather than '.'.
          match.pos <- match (1, file.name.arg.matches)
                                 ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2052:12: style: Commented code should be removed.
          #print (paste(".ddg.find.files: match.pos = ", match.pos))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2055:1: style: lines should not be more than 80 characters.
          # If no argument qualified by the file parameter name, use the argument in the
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2058:1: style: lines should not be more than 80 characters.
            file.name <- tryCatch (eval(obj[[func.df$param.pos[read.func.pos]+1]], environment),
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2058:64: style: Words within variable and function names should be separated by '_' rather than '.'.
            file.name <- tryCatch (eval(obj[[func.df$param.pos[read.func.pos]+1]], environment),
                                                               ^~~~~~~~~~~~~
./R/RDataTracker.R:2058:78: style: Put spaces around all infix operators.
            file.name <- tryCatch (eval(obj[[func.df$param.pos[read.func.pos]+1]], environment),
                                                                            ~^~
./R/RDataTracker.R:2062:1: style: lines should not be more than 80 characters.
            #print (paste(".ddg.find.files: obj[[match.pos]] = ", obj[[match.pos]]))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2062:14: style: Commented code should be removed.
            #print (paste(".ddg.find.files: obj[[match.pos]] = ", obj[[match.pos]]))
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2067:1: style: lines should not be more than 80 characters.
          # Recurse over the arguments to the function.  We can't just skip over the 2nd
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2068:1: style: lines should not be more than 80 characters.
          # element since the filename parameter is not necessarily there if it was passed
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2070:20: style: Words within variable and function names should be separated by '_' rather than '.'.
          funcs <- find.files.rec (obj[2:length(obj)])
                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:2082:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          find.files.rec (obj[2:length(obj)])
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:2086:1: style: lines should not be more than 80 characters.
      # Function call, but the first list element is not simply a function name.  Recurse
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2089:1: style: lines should not be more than 80 characters.
        unique (append (find.files.rec (obj[[1]]), find.files.rec (obj[2:length(obj)])))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2089:25: style: Words within variable and function names should be separated by '_' rather than '.'.
        unique (append (find.files.rec (obj[[1]]), find.files.rec (obj[2:length(obj)])))
                        ^~~~~~~~~~~~~~
./R/RDataTracker.R:2089:52: style: Words within variable and function names should be separated by '_' rather than '.'.
        unique (append (find.files.rec (obj[[1]]), find.files.rec (obj[2:length(obj)])))
                                                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:2093:1: style: lines should not be more than 80 characters.
    # A recursive structure that is not a call.  Not sure if there are any, but just in case...
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2095:15: style: Words within variable and function names should be separated by '_' rather than '.'.
      unique (find.files.rec (obj[[1]]))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:2098:1: style: lines should not be more than 80 characters.
      unique (append (find.files.rec (obj[[1]]), find.files.rec (obj[2:length(obj)])))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2098:23: style: Words within variable and function names should be separated by '_' rather than '.'.
      unique (append (find.files.rec (obj[[1]]), find.files.rec (obj[2:length(obj)])))
                      ^~~~~~~~~~~~~~
./R/RDataTracker.R:2098:50: style: Words within variable and function names should be separated by '_' rather than '.'.
      unique (append (find.files.rec (obj[[1]]), find.files.rec (obj[2:length(obj)])))
                                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:2102:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(find.files.rec(main.object@parsed))
         ^~~~~~~~~~~~~~
./R/RDataTracker.R:2106:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.file.read.functions.df <- function () {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2106:1: style: Variable and function names should not be longer than 30 characters.
.ddg.create.file.read.functions.df <- function () {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2109:1: style: lines should not be more than 80 characters.
    c ("source", "read.csv", "read.csv2", "read.delim", "read.delim2", "read.table", "read.xls", "file", "readLines")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2113:1: style: lines should not be more than 80 characters.
    c ("file", "file", "file", "file", "file", "file", "xls", "description", "con")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2119:1: style: lines should not be more than 80 characters.
  return (data.frame (function.names, param.names, param.pos, stringsAsFactors=FALSE))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2119:79: style: Put spaces around all infix operators.
  return (data.frame (function.names, param.names, param.pos, stringsAsFactors=FALSE))
                                                                             ~^~
./R/RDataTracker.R:2122:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.set (".ddg.file.read.functions.df", .ddg.create.file.read.functions.df ())
^~~~~~~~
./R/RDataTracker.R:2122:42: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.set (".ddg.file.read.functions.df", .ddg.create.file.read.functions.df ())
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2122:42: style: Variable and function names should not be longer than 30 characters.
.ddg.set (".ddg.file.read.functions.df", .ddg.create.file.read.functions.df ())
                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2128:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.find.files.read <- function(main.object, env) {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2129:1: style: lines should not be more than 80 characters.
  return (.ddg.find.files (main.object, .ddg.get(".ddg.file.read.functions.df"), env))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2129:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.find.files (main.object, .ddg.get(".ddg.file.read.functions.df"), env))
          ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2129:11: warning: no visible global function definition for ‘.ddg.find.files’
  return (.ddg.find.files (main.object, .ddg.get(".ddg.file.read.functions.df"), env))
          ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2129:41: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.find.files (main.object, .ddg.get(".ddg.file.read.functions.df"), env))
                                        ^~~~~~~~
./R/RDataTracker.R:2129:41: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.find.files (main.object, .ddg.get(".ddg.file.read.functions.df"), env))
                                        ^~~~~~~~
./R/RDataTracker.R:2135:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.file.read.nodes.and.edges <- function (cmd, env) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2135:1: style: Variable and function names should not be longer than 30 characters.
.ddg.create.file.read.nodes.and.edges <- function (cmd, env) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2136:4: style: Commented code should be removed.
  #print(paste("In .ddg.create.file.read.nodes.and.edges"))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2140:17: style: Words within variable and function names should be separated by '_' rather than '.'.
  files.read <- .ddg.find.files.read(cmd, env)
                ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2140:17: warning: no visible global function definition for ‘.ddg.find.files.read’
  files.read <- .ddg.find.files.read(cmd, env)
                ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2149:7: warning: no visible global function definition for ‘ddg.file’
      ddg.file (file)
      ^~~~~~~~
./R/RDataTracker.R:2150:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.data.in (basename(file), pname=cmd@abbrev)
      ^~~~~~~~~~~
./R/RDataTracker.R:2150:7: warning: no visible global function definition for ‘ddg.data.in’
      ddg.data.in (basename(file), pname=cmd@abbrev)
      ^~~~~~~~~~~
./R/RDataTracker.R:2150:41: style: Put spaces around all infix operators.
      ddg.data.in (basename(file), pname=cmd@abbrev)
                                       ~^~
./R/RDataTracker.R:2154:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.data.node("URL", file, file, scope)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:2154:7: warning: no visible global function definition for ‘.ddg.data.node’
      .ddg.data.node("URL", file, file, scope)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:2155:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.data2proc(file, scope, cmd@abbrev)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:2155:7: warning: no visible global function definition for ‘.ddg.data2proc’
      .ddg.data2proc(file, scope, cmd@abbrev)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:2161:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.file.write.functions.df <- function () {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2161:1: style: Variable and function names should not be longer than 30 characters.
.ddg.create.file.write.functions.df <- function () {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2174:1: style: lines should not be more than 80 characters.
  return (data.frame (function.names, param.names, param.pos, stringsAsFactors=FALSE))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2174:79: style: Put spaces around all infix operators.
  return (data.frame (function.names, param.names, param.pos, stringsAsFactors=FALSE))
                                                                             ~^~
./R/RDataTracker.R:2177:1: style: lines should not be more than 80 characters.
.ddg.set (".ddg.file.write.functions.df", .ddg.create.file.write.functions.df ())
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2177:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.set (".ddg.file.write.functions.df", .ddg.create.file.write.functions.df ())
^~~~~~~~
./R/RDataTracker.R:2177:43: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.set (".ddg.file.write.functions.df", .ddg.create.file.write.functions.df ())
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2177:43: style: Variable and function names should not be longer than 30 characters.
.ddg.set (".ddg.file.write.functions.df", .ddg.create.file.write.functions.df ())
                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2183:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.find.files.written <- function(main.object, env) {
^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2184:1: style: lines should not be more than 80 characters.
  return (.ddg.find.files (main.object, .ddg.get(".ddg.file.write.functions.df"), env))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2184:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.find.files (main.object, .ddg.get(".ddg.file.write.functions.df"), env))
          ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2184:11: warning: no visible global function definition for ‘.ddg.find.files’
  return (.ddg.find.files (main.object, .ddg.get(".ddg.file.write.functions.df"), env))
          ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2184:41: style: Words within variable and function names should be separated by '_' rather than '.'.
  return (.ddg.find.files (main.object, .ddg.get(".ddg.file.write.functions.df"), env))
                                        ^~~~~~~~
./R/RDataTracker.R:2184:41: warning: no visible global function definition for ‘.ddg.get’
  return (.ddg.find.files (main.object, .ddg.get(".ddg.file.write.functions.df"), env))
                                        ^~~~~~~~
./R/RDataTracker.R:2190:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.file.write.nodes.and.edges <- function (cmd, env) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2190:1: style: Variable and function names should not be longer than 30 characters.
.ddg.create.file.write.nodes.and.edges <- function (cmd, env) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2194:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  files.written <- .ddg.find.files.written(cmd, env)
                   ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2194:20: warning: no visible global function definition for ‘.ddg.find.files.written’
  files.written <- .ddg.find.files.written(cmd, env)
                   ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2203:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.file.out (file, pname=cmd@abbrev)
      ^~~~~~~~~~~~
./R/RDataTracker.R:2203:7: warning: no visible global function definition for ‘ddg.file.out’
      ddg.file.out (file, pname=cmd@abbrev)
      ^~~~~~~~~~~~
./R/RDataTracker.R:2203:32: style: Put spaces around all infix operators.
      ddg.file.out (file, pname=cmd@abbrev)
                              ~^~
./R/RDataTracker.R:2209:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.graphics.functions.df <- function () {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2209:1: style: Variable and function names should not be longer than 30 characters.
.ddg.create.graphics.functions.df <- function () {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2222:1: style: lines should not be more than 80 characters.
  return (data.frame (function.names, param.names, param.pos, stringsAsFactors=FALSE))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2222:79: style: Put spaces around all infix operators.
  return (data.frame (function.names, param.names, param.pos, stringsAsFactors=FALSE))
                                                                             ~^~
./R/RDataTracker.R:2225:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.set (".ddg.graphics.functions.df", .ddg.create.graphics.functions.df ())
^~~~~~~~
./R/RDataTracker.R:2225:41: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.set (".ddg.graphics.functions.df", .ddg.create.graphics.functions.df ())
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2225:41: style: Variable and function names should not be longer than 30 characters.
.ddg.set (".ddg.graphics.functions.df", .ddg.create.graphics.functions.df ())
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2231:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.set.graphics.files <- function(main.object, env) {
^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2236:1: style: lines should not be more than 80 characters.
  new.possible.graphics.files.open <- .ddg.find.files (main.object, .ddg.get(".ddg.graphics.functions.df"), env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2236:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  new.possible.graphics.files.open <- .ddg.find.files (main.object, .ddg.get(".ddg.graphics.functions.df"), env)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2236:3: style: Variable and function names should not be longer than 30 characters.
  new.possible.graphics.files.open <- .ddg.find.files (main.object, .ddg.get(".ddg.graphics.functions.df"), env)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2236:39: style: Words within variable and function names should be separated by '_' rather than '.'.
  new.possible.graphics.files.open <- .ddg.find.files (main.object, .ddg.get(".ddg.graphics.functions.df"), env)
                                      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2236:39: warning: no visible global function definition for ‘.ddg.find.files’
  new.possible.graphics.files.open <- .ddg.find.files (main.object, .ddg.get(".ddg.graphics.functions.df"), env)
                                      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2236:69: style: Words within variable and function names should be separated by '_' rather than '.'.
  new.possible.graphics.files.open <- .ddg.find.files (main.object, .ddg.get(".ddg.graphics.functions.df"), env)
                                                                    ^~~~~~~~
./R/RDataTracker.R:2236:69: warning: no visible global function definition for ‘.ddg.get’
  new.possible.graphics.files.open <- .ddg.find.files (main.object, .ddg.get(".ddg.graphics.functions.df"), env)
                                                                    ^~~~~~~~
./R/RDataTracker.R:2237:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!is.null(new.possible.graphics.files.open)) {
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2237:16: style: Variable and function names should not be longer than 30 characters.
  if (!is.null(new.possible.graphics.files.open)) {
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2238:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.set ("possible.graphics.files.open")) {
        ^~~~~~~~~~~
./R/RDataTracker.R:2239:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      possible.graphics.files.open <- .ddg.get ("possible.graphics.files.open")
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2239:39: style: Words within variable and function names should be separated by '_' rather than '.'.
      possible.graphics.files.open <- .ddg.get ("possible.graphics.files.open")
                                      ^~~~~~~~
./R/RDataTracker.R:2239:39: warning: no visible global function definition for ‘.ddg.get’
      possible.graphics.files.open <- .ddg.get ("possible.graphics.files.open")
                                      ^~~~~~~~
./R/RDataTracker.R:2240:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.set ("possible.graphics.files.open",
      ^~~~~~~~
./R/RDataTracker.R:2241:1: style: lines should not be more than 80 characters.
                c (new.possible.graphics.files.open, possible.graphics.files.open))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2241:20: style: Words within variable and function names should be separated by '_' rather than '.'.
                c (new.possible.graphics.files.open, possible.graphics.files.open))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2241:20: style: Variable and function names should not be longer than 30 characters.
                c (new.possible.graphics.files.open, possible.graphics.files.open))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2241:54: style: Words within variable and function names should be separated by '_' rather than '.'.
                c (new.possible.graphics.files.open, possible.graphics.files.open))
                                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2245:1: style: lines should not be more than 80 characters.
      .ddg.set ("possible.graphics.files.open", new.possible.graphics.files.open)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2245:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.set ("possible.graphics.files.open", new.possible.graphics.files.open)
      ^~~~~~~~
./R/RDataTracker.R:2245:7: warning: no visible global function definition for ‘.ddg.set’
      .ddg.set ("possible.graphics.files.open", new.possible.graphics.files.open)
      ^~~~~~~~
./R/RDataTracker.R:2245:49: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.set ("possible.graphics.files.open", new.possible.graphics.files.open)
                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2245:49: style: Variable and function names should not be longer than 30 characters.
      .ddg.set ("possible.graphics.files.open", new.possible.graphics.files.open)
                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2247:1: style: lines should not be more than 80 characters.
    #print (paste (".ddg.set.graphics.files: Found ", new.possible.graphics.files.open))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2252:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.capture.graphics <- function(cmd) {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2253:4: style: Commented code should be removed.
  #print(paste(".ddg.capture.graphics: ", cmd@abbrev))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2254:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.set ("possible.graphics.files.open")) {
      ^~~~~~~~~~~
./R/RDataTracker.R:2255:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    possible.graphics.files.open <- .ddg.get ("possible.graphics.files.open")
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2255:37: style: Words within variable and function names should be separated by '_' rather than '.'.
    possible.graphics.files.open <- .ddg.get ("possible.graphics.files.open")
                                    ^~~~~~~~
./R/RDataTracker.R:2255:37: warning: no visible global function definition for ‘.ddg.get’
    possible.graphics.files.open <- .ddg.get ("possible.graphics.files.open")
                                    ^~~~~~~~
./R/RDataTracker.R:2258:18: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (!is.null(possible.graphics.files.open)) {
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2259:1: style: lines should not be more than 80 characters.
      #print(paste(".ddg.capture.graphics: possible.graphics.files.open =", possible.graphics.files.open))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2259:8: style: Commented code should be removed.
      #print(paste(".ddg.capture.graphics: possible.graphics.files.open =", possible.graphics.files.open))
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2260:8: style: Commented code should be removed.
      #print(".ddg.capture.graphics: getting file info")
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2261:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      graphics.file.info <- file.info(possible.graphics.files.open)
      ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2261:39: style: Words within variable and function names should be separated by '_' rather than '.'.
      graphics.file.info <- file.info(possible.graphics.files.open)
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2262:8: style: Commented code should be removed.
      #print(".ddg.capture.graphics: getting modification time")
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2263:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      latest.file.date.row <- which.max (graphics.file.info$mtime)
      ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2263:42: style: Words within variable and function names should be separated by '_' rather than '.'.
      latest.file.date.row <- which.max (graphics.file.info$mtime)
                                         ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2265:8: style: Commented code should be removed.
      #print(".ddg.capture.graphics: creating file node")
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2266:1: style: lines should not be more than 80 characters.
      ddg.file.out (possible.graphics.files.open[latest.file.date.row], pname=cmd@abbrev)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2266:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.file.out (possible.graphics.files.open[latest.file.date.row], pname=cmd@abbrev)
      ^~~~~~~~~~~~
./R/RDataTracker.R:2266:7: warning: no visible global function definition for ‘ddg.file.out’
      ddg.file.out (possible.graphics.files.open[latest.file.date.row], pname=cmd@abbrev)
      ^~~~~~~~~~~~
./R/RDataTracker.R:2266:21: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.file.out (possible.graphics.files.open[latest.file.date.row], pname=cmd@abbrev)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2266:50: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.file.out (possible.graphics.files.open[latest.file.date.row], pname=cmd@abbrev)
                                                 ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2266:78: style: Put spaces around all infix operators.
      ddg.file.out (possible.graphics.files.open[latest.file.date.row], pname=cmd@abbrev)
                                                                            ~^~
./R/RDataTracker.R:2267:1: style: lines should not be more than 80 characters.
      #.ddg.capture.current.graphics(cmd, possible.graphics.files.open[latest.file.date.row])
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2267:8: style: Commented code should be removed.
      #.ddg.capture.current.graphics(cmd, possible.graphics.files.open[latest.file.date.row])
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2268:1: style: lines should not be more than 80 characters.
      #print(paste(".ddg.capture.graphics: writing to ", possible.graphics.files.open[latest.file.date.row]))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2268:8: style: Commented code should be removed.
      #print(paste(".ddg.capture.graphics: writing to ", possible.graphics.files.open[latest.file.date.row]))
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2269:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.set ("possible.graphics.files.open", NULL)
      ^~~~~~~~
./R/RDataTracker.R:2269:7: warning: no visible global function definition for ‘.ddg.set’
      .ddg.set ("possible.graphics.files.open", NULL)
      ^~~~~~~~
./R/RDataTracker.R:2275:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.capture.current.graphics(cmd)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2275:3: warning: no visible global function definition for ‘.ddg.capture.current.graphics’
  .ddg.capture.current.graphics(cmd)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2281:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.capture.current.graphics <- function(cmd, file=NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2283:32: style: Words within variable and function names should be separated by '_' rather than '.'.
    file <- paste0("dev.off.", .ddg.dnum()+1, ".pdf")
                               ^~~~~~~~~
./R/RDataTracker.R:2283:32: warning: no visible global function definition for ‘.ddg.dnum’
    file <- paste0("dev.off.", .ddg.dnum()+1, ".pdf")
                               ^~~~~~~~~
./R/RDataTracker.R:2283:43: style: Put spaces around all infix operators.
    file <- paste0("dev.off.", .ddg.dnum()+1, ".pdf")
                                         ~^~
./R/RDataTracker.R:2285:4: style: Commented code should be removed.
  #print(paste(".ddg.capture.graphics: writing to ", file))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2288:4: style: Commented code should be removed.
  #print(sys.calls())
   ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2289:19: style: Put spaces around all infix operators.
  dev.print(device=pdf, file=file)
                 ~^~
./R/RDataTracker.R:2289:29: style: Put spaces around all infix operators.
  dev.print(device=pdf, file=file)
                           ~^~
./R/RDataTracker.R:2292:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.file.out (file, pname=cmd@abbrev)
  ^~~~~~~~~~~~
./R/RDataTracker.R:2292:3: warning: no visible global function definition for ‘ddg.file.out’
  ddg.file.out (file, pname=cmd@abbrev)
  ^~~~~~~~~~~~
./R/RDataTracker.R:2292:28: style: Put spaces around all infix operators.
  ddg.file.out (file, pname=cmd@abbrev)
                          ~^~
./R/RDataTracker.R:2305:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.loadhistory <- function(hist.file, timestamp) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2307:17: style: Put spaces around all infix operators.
	history <- readLines(hist.file)
               ~^~~
./R/RDataTracker.R:2313:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	history.timestamp.line <- tail(which(history == timestamp), 1)
        ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2313:32: style: Put spaces around all infix operators.
	history.timestamp.line <- tail(which(history == timestamp), 1)
                              ~^~~
./R/RDataTracker.R:2313:54: style: Put spaces around all infix operators.
	history.timestamp.line <- tail(which(history == timestamp), 1)
                                                    ~^~~
./R/RDataTracker.R:2315:12: style: Place a space before left parenthesis, except in a function call.
	if (length(history.timestamp.line) == 0) {
           ^
./R/RDataTracker.R:2315:20: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (length(history.timestamp.line) == 0) {
                   ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2315:44: style: Put spaces around all infix operators.
	if (length(history.timestamp.line) == 0) {
                                          ~^~~
./R/RDataTracker.R:2316:1: style: lines should not be more than 80 characters.
		error.msg <- paste("Part of history is missing. DDG may be incomplete! Tried reading from",
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2316:27: style: Put spaces around all infix operators.
		error.msg <- paste("Part of history is missing. DDG may be incomplete! Tried reading from",
                         ~^~~
./R/RDataTracker.R:2319:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.insert.error.message(error.msg)
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2319:5: warning: no visible global function definition for ‘.ddg.insert.error.message’
    .ddg.insert.error.message(error.msg)
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2320:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		history.timestamp.line <- 0
                ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2327:12: style: Place a space before left parenthesis, except in a function call.
	if (history.timestamp.line == history.lines) return (vector())
           ^
./R/RDataTracker.R:2327:13: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (history.timestamp.line == history.lines) return (vector())
            ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2327:36: style: Put spaces around all infix operators.
	if (history.timestamp.line == history.lines) return (vector())
                                  ~^~~
./R/RDataTracker.R:2330:24: style: Place a space before left parenthesis, except in a function call.
	return(history[(history.timestamp.line+1):history.lines])
                       ^
./R/RDataTracker.R:2330:25: style: Words within variable and function names should be separated by '_' rather than '.'.
	return(history[(history.timestamp.line+1):history.lines])
                        ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2330:47: style: Put spaces around all infix operators.
	return(history[(history.timestamp.line+1):history.lines])
                                             ~^~
./R/RDataTracker.R:2343:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.savehistory <- function(hist.file) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2348:4: style: Commented code should be removed.
	# ddg.grab.timestamp <- .ddg.get(".ddg.grab.timestamp.history")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2349:4: style: Commented code should be removed.
	# ddg.tmp.history.file <- paste(hist.file,".tmp", sep="")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2351:12: style: Place a space before left parenthesis, except in a function call.
	if (.ddg.is.set(".ddg.history.file") &&
           ^
./R/RDataTracker.R:2351:13: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (.ddg.is.set(".ddg.history.file") &&
            ^~~~~~~~~~~
./R/RDataTracker.R:2352:26: style: Words within variable and function names should be separated by '_' rather than '.'.
	    is.character(.ddg.get(".ddg.history.file")) &&
                         ^~~~~~~~
./R/RDataTracker.R:2353:13: style: Words within variable and function names should be separated by '_' rather than '.'.
	    .ddg.get(".ddg.history.file") == hist.file) {
            ^~~~~~~~
./R/RDataTracker.R:2353:43: style: Put spaces around all infix operators.
	    .ddg.get(".ddg.history.file") == hist.file) {
                                         ~^~~
./R/RDataTracker.R:2360:4: style: Commented code should be removed.
	# newlines <- .ddg.loadhistory(ddg.tmp.history.file,ddg.grab.timestamp)
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2361:4: style: Commented code should be removed.
	# write(newlines, file=hist.file, append=TRUE)
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2363:4: style: Commented code should be removed.
	# .ddg.write.timestamp.to.history(var=".ddg.grab.timestamp.history")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2376:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.link.function.returns <- function(command) {
^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2379:13: warning: no visible global function definition for ‘.ddg.get’
	returns <- .ddg.get(".ddg.return.values")
            ^~~~~~~~
./R/RDataTracker.R:2379:17: style: Put spaces around all infix operators.
	returns <- .ddg.get(".ddg.return.values")
               ~^~~
./R/RDataTracker.R:2379:20: style: Words within variable and function names should be separated by '_' rather than '.'.
	returns <- .ddg.get(".ddg.return.values")
                   ^~~~~~~~
./R/RDataTracker.R:2380:24: style: Put spaces around all infix operators.
	unused.returns <- returns[!returns$return.used & returns$return.node.id > 0, ]
                      ~^~~
./R/RDataTracker.R:2380:56: style: Put spaces around all infix operators.
	unused.returns <- returns[!returns$return.used & returns$return.node.id > 0, ]
                                                      ~^~
./R/RDataTracker.R:2380:66: style: Words within variable and function names should be separated by '_' rather than '.'.
	unused.returns <- returns[!returns$return.used & returns$return.node.id > 0, ]
                                                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:2382:4: style: Commented code should be removed.
  #print (paste(".ddg.link.function.returns: unused.returns:", unused.returns))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2386:22: style: Put spaces around all infix operators.
	unused.calls <- unused.returns$ddg.call
                    ~^~~
./R/RDataTracker.R:2388:1: style: lines should not be more than 80 characters.
	uses <- sapply(unused.calls, function(call) {grepl(call, command.text, fixed=TRUE)})
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2388:14: style: Put spaces around all infix operators.
	uses <- sapply(unused.calls, function(call) {grepl(call, command.text, fixed=TRUE)})
            ~^~~
./R/RDataTracker.R:2388:53: style: Opening curly braces should never go on their own line and should always be followed by a new line.
	uses <- sapply(unused.calls, function(call) {grepl(call, command.text, fixed=TRUE)})
                                                    ^
./R/RDataTracker.R:2388:85: style: Put spaces around all infix operators.
	uses <- sapply(unused.calls, function(call) {grepl(call, command.text, fixed=TRUE)})
                                                                                   ~^~
./R/RDataTracker.R:2388:91: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
	uses <- sapply(unused.calls, function(call) {grepl(call, command.text, fixed=TRUE)})
                                                                                          ^
./R/RDataTracker.R:2395:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	return.node.id <- NULL
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:2395:24: style: Put spaces around all infix operators.
	return.node.id <- NULL
                      ~^~~
./R/RDataTracker.R:2398:18: style: Put spaces around all infix operators.
	new.uses <- subset(unused.returns, uses, return.node.id)
                ~^~~
./R/RDataTracker.R:2398:50: style: Words within variable and function names should be separated by '_' rather than '.'.
	new.uses <- subset(unused.returns, uses, return.node.id)
                                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:2402:26: style: Words within variable and function names should be separated by '_' rather than '.'.
	lapply (new.uses$return.node.id,
                         ^~~~~~~~~~~~~~
./R/RDataTracker.R:2404:17: warning: no visible global function definition for ‘.ddg.pnum’
				proc.num <- .ddg.pnum()
                ^~~~~~~~~
./R/RDataTracker.R:2404:45: style: Words within variable and function names should be separated by '_' rather than '.'.
				proc.num <- .ddg.pnum()
                                            ^~~~~~~~~
./R/RDataTracker.R:2408:39: style: Put spaces around all infix operators.
				node1 <- paste("d", data.num, sep="")
                                     ~^~~
./R/RDataTracker.R:2409:39: style: Put spaces around all infix operators.
				node2 <- paste("p", proc.num, sep="")
                                     ~^~~
./R/RDataTracker.R:2410:5: warning: no visible global function definition for ‘.ddg.record.edge’
				.ddg.record.edge(etype, node1, node2)
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2410:33: style: Words within variable and function names should be separated by '_' rather than '.'.
				.ddg.record.edge(etype, node1, node2)
                                ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2412:37: style: Words within variable and function names should be separated by '_' rather than '.'.
				if (.ddg.debug.lib()) {
                                    ^~~~~~~~~~~~~~
./R/RDataTracker.R:2418:61: style: Words within variable and function names should be separated by '_' rather than '.'.
				returns$return.used[returns$return.node.id == data.num] <- TRUE
                                                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:2419:5: warning: no visible global function definition for ‘.ddg.set’
				.ddg.set(".ddg.return.values", returns)
    ^~~~~~~~
./R/RDataTracker.R:2419:33: style: Words within variable and function names should be separated by '_' rather than '.'.
				.ddg.set(".ddg.return.values", returns)
                                ^~~~~~~~
./R/RDataTracker.R:2431:1: style: lines should not be more than 80 characters.
.ddg.add.abstract.node <- function(type, cmd = NULL, env, called=".ddg.parse.commands", node.name = "") {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2431:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.add.abstract.node <- function(type, cmd = NULL, env, called=".ddg.parse.commands", node.name = "") {
^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2432:4: style: Commented code should be removed.
  #print("In .ddg.add.abstract.node")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2433:4: style: Commented code should be removed.
  #print("cmd =")
   ^~~~~~~~~~~~~~
./R/RDataTracker.R:2434:4: style: Commented code should be removed.
  #print(cmd)
   ^~~~~~~~~~
./R/RDataTracker.R:2435:4: style: Commented code should be removed.
  #print("node.name =")
   ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2436:4: style: Commented code should be removed.
  #print(node.name)
   ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2439:20: style: Words within variable and function names should be separated by '_' rather than '.'.
      node.name <- .ddg.abbrev.cmd(cmd)
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2439:20: warning: no visible global function definition for ‘.ddg.abbrev.cmd’
      node.name <- .ddg.abbrev.cmd(cmd)
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2445:1: style: lines should not be more than 80 characters.
  if (.ddg.debug.lib()) print(paste(called, ":  Adding", node.name,  type, "node"))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2445:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) print(paste(called, ":  Adding", node.name,  type, "node"))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:2445:7: warning: no visible global function definition for ‘.ddg.debug.lib’
  if (.ddg.debug.lib()) print(paste(called, ":  Adding", node.name,  type, "node"))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:2446:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc.node(type, node.name, node.name, TRUE, env=env, cmd = cmd)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:2446:3: warning: no visible global function definition for ‘.ddg.proc.node’
  .ddg.proc.node(type, node.name, node.name, TRUE, env=env, cmd = cmd)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:2446:55: style: Put spaces around all infix operators.
  .ddg.proc.node(type, node.name, node.name, TRUE, env=env, cmd = cmd)
                                                     ~^~
./R/RDataTracker.R:2447:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:2447:3: warning: no visible global function definition for ‘.ddg.proc2proc’
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:2460:1: style: lines should not be more than 80 characters.
.ddg.close.last.command.node <- function(env, called=".ddg.parse.commands", initial=FALSE){
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2460:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.close.last.command.node <- function(env, called=".ddg.parse.commands", initial=FALSE){
^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2463:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.last.cmd <-
  ^~~~~~~~~~~~~
./R/RDataTracker.R:2464:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.set(".ddg.last.cmd")) {
        ^~~~~~~~~~~
./R/RDataTracker.R:2465:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.get(".ddg.last.cmd")
      ^~~~~~~~
./R/RDataTracker.R:2465:7: warning: no visible global function definition for ‘.ddg.get’
      .ddg.get(".ddg.last.cmd")
      ^~~~~~~~
./R/RDataTracker.R:2470:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.possible.last.cmd <-
  ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2471:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.set(".ddg.possible.last.cmd")) {
        ^~~~~~~~~~~
./R/RDataTracker.R:2472:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.get(".ddg.possible.last.cmd")
      ^~~~~~~~
./R/RDataTracker.R:2472:7: warning: no visible global function definition for ‘.ddg.get’
      .ddg.get(".ddg.possible.last.cmd")
      ^~~~~~~~
./R/RDataTracker.R:2478:1: style: lines should not be more than 80 characters.
  #print (paste (".ddg.close.last.command.node: .ddg.last.cmd =", .ddg.last.cmd))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2478:4: style: Commented code should be removed.
  #print (paste (".ddg.close.last.command.node: .ddg.last.cmd =", .ddg.last.cmd))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2479:1: style: lines should not be more than 80 characters.
  #print (paste (".ddg.close.last.command.node: .ddg.possible.last.cmd =", .ddg.possible.last.cmd))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2479:4: style: Commented code should be removed.
  #print (paste (".ddg.close.last.command.node: .ddg.possible.last.cmd =", .ddg.possible.last.cmd))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2483:12: style: Place a space before left parenthesis, except in a function call.
	if (!is.null(.ddg.last.cmd) && (!is.null(.ddg.possible.last.cmd) || initial)) {
           ^
./R/RDataTracker.R:2483:22: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!is.null(.ddg.last.cmd) && (!is.null(.ddg.possible.last.cmd) || initial)) {
                     ^~~~~~~~~~~~~
./R/RDataTracker.R:2483:37: style: Put spaces around all infix operators.
	if (!is.null(.ddg.last.cmd) && (!is.null(.ddg.possible.last.cmd) || initial)) {
                                   ~^~~
./R/RDataTracker.R:2483:40: style: Place a space before left parenthesis, except in a function call.
	if (!is.null(.ddg.last.cmd) && (!is.null(.ddg.possible.last.cmd) || initial)) {
                                       ^
./R/RDataTracker.R:2483:50: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!is.null(.ddg.last.cmd) && (!is.null(.ddg.possible.last.cmd) || initial)) {
                                                 ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2483:74: style: Put spaces around all infix operators.
	if (!is.null(.ddg.last.cmd) && (!is.null(.ddg.possible.last.cmd) || initial)) {
                                                                        ~^~~
./R/RDataTracker.R:2484:1: style: lines should not be more than 80 characters.
		cmd.abbrev <- .ddg.add.abstract.node("Finish", .ddg.last.cmd, env=env, called=paste(called, "-> .ddg.close.last.command.node"))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2484:3: warning: local variable ‘cmd.abbrev’ assigned but may not be used
		cmd.abbrev <- .ddg.add.abstract.node("Finish", .ddg.last.cmd, env=env, called=paste(called, "-> .ddg.close.last.command.node"))
  ^~~~~~~~~~
./R/RDataTracker.R:2484:17: warning: no visible global function definition for ‘.ddg.add.abstract.node’
		cmd.abbrev <- .ddg.add.abstract.node("Finish", .ddg.last.cmd, env=env, called=paste(called, "-> .ddg.close.last.command.node"))
                ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2484:28: style: Put spaces around all infix operators.
		cmd.abbrev <- .ddg.add.abstract.node("Finish", .ddg.last.cmd, env=env, called=paste(called, "-> .ddg.close.last.command.node"))
                          ~^~~
./R/RDataTracker.R:2484:31: style: Words within variable and function names should be separated by '_' rather than '.'.
		cmd.abbrev <- .ddg.add.abstract.node("Finish", .ddg.last.cmd, env=env, called=paste(called, "-> .ddg.close.last.command.node"))
                              ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2484:64: style: Words within variable and function names should be separated by '_' rather than '.'.
		cmd.abbrev <- .ddg.add.abstract.node("Finish", .ddg.last.cmd, env=env, called=paste(called, "-> .ddg.close.last.command.node"))
                                                               ^~~~~~~~~~~~~
./R/RDataTracker.R:2484:82: style: Put spaces around all infix operators.
		cmd.abbrev <- .ddg.add.abstract.node("Finish", .ddg.last.cmd, env=env, called=paste(called, "-> .ddg.close.last.command.node"))
                                                                                ~^~
./R/RDataTracker.R:2484:94: style: Put spaces around all infix operators.
		cmd.abbrev <- .ddg.add.abstract.node("Finish", .ddg.last.cmd, env=env, called=paste(called, "-> .ddg.close.last.command.node"))
                                                                                            ~^~
./R/RDataTracker.R:2487:3: warning: no visible global function definition for ‘.ddg.link.function.returns’
		.ddg.link.function.returns(.ddg.last.cmd)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2487:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.link.function.returns(.ddg.last.cmd)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2487:44: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.link.function.returns(.ddg.last.cmd)
                                           ^~~~~~~~~~~~~
./R/RDataTracker.R:2488:5: style: Commented code should be removed.
		# .ddg.link.function.returns(.ddg.last.cmd$text)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2489:1: style: Trailing whitespace is superfluous.
		
^~
./R/RDataTracker.R:2492:4: style: Commented code should be removed.
		#vars.set <- .ddg.find.var.assignments(.ddg.last.cmd)
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2493:1: style: lines should not be more than 80 characters.
    #print (".ddg.close.last.command.node calling .ddg.create.data.set.edges.for.cmd")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2494:1: style: lines should not be more than 80 characters.
		#.ddg.create.data.set.edges.for.cmd(vars.set, .ddg.last.cmd$abbrev, .ddg.last.cmd$expr, 1, env, for.finish.node = TRUE)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2494:4: style: Commented code should be removed.
		#.ddg.create.data.set.edges.for.cmd(vars.set, .ddg.last.cmd$abbrev, .ddg.last.cmd$expr, 1, env, for.finish.node = TRUE)
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2495:1: style: lines should not be more than 80 characters.
    #print (".ddg.close.last.command.node call to .ddg.create.data.set.edges.for.cmd returned")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2498:1: style: lines should not be more than 80 characters.
    #print (".ddg.close.last.command.node: created finish node; saving .ddg.last.cmd as null")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2499:3: warning: no visible global function definition for ‘.ddg.set’
		.ddg.set(".ddg.last.cmd", NULL)
  ^~~~~~~~
./R/RDataTracker.R:2499:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.set(".ddg.last.cmd", NULL)
                ^~~~~~~~
./R/RDataTracker.R:2509:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.open.new.command.node <- function(env, called=".ddg.parse.commands") {
^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2510:18: style: Words within variable and function names should be separated by '_' rather than '.'.
  new.command <- .ddg.get(".ddg.possible.last.cmd")
                 ^~~~~~~~
./R/RDataTracker.R:2510:18: warning: no visible global function definition for ‘.ddg.get’
  new.command <- .ddg.get(".ddg.possible.last.cmd")
                 ^~~~~~~~
./R/RDataTracker.R:2511:12: style: Place a space before left parenthesis, except in a function call.
	if (!is.null(new.command)) {
           ^
./R/RDataTracker.R:2512:1: style: lines should not be more than 80 characters.
		.ddg.add.abstract.node("Start", new.command, env, called=paste(called, "-> .ddg.open.new.command.node"))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2512:3: warning: no visible global function definition for ‘.ddg.add.abstract.node’
		.ddg.add.abstract.node("Start", new.command, env, called=paste(called, "-> .ddg.open.new.command.node"))
  ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2512:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.add.abstract.node("Start", new.command, env, called=paste(called, "-> .ddg.open.new.command.node"))
                ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2512:73: style: Put spaces around all infix operators.
		.ddg.add.abstract.node("Start", new.command, env, called=paste(called, "-> .ddg.open.new.command.node"))
                                                                       ~^~
./R/RDataTracker.R:2516:1: style: lines should not be more than 80 characters.
    #print (paste (".ddg.open.new.command.node: saving .ddg.last.cmd as", new.command))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2517:3: warning: no visible global function definition for ‘.ddg.set’
		.ddg.set(".ddg.last.cmd", new.command)
  ^~~~~~~~
./R/RDataTracker.R:2517:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.set(".ddg.last.cmd", new.command)
                ^~~~~~~~
./R/RDataTracker.R:2518:3: warning: no visible global function definition for ‘.ddg.set’
		.ddg.set(".ddg.possible.last.cmd", NULL)
  ^~~~~~~~
./R/RDataTracker.R:2518:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.set(".ddg.possible.last.cmd", NULL)
                ^~~~~~~~
./R/RDataTracker.R:2528:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.procedure.cmd <- function(cmd) {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2543:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.parse.lines <- function(lines) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2548:32: style: Put spaces around all infix operators.
  parsed.commands <- parse(text=lines)
                              ~^~
./R/RDataTracker.R:2549:1: style: lines should not be more than 80 characters.
  parsed.commands <- Filter(function(cmd) {return (!is.call(cmd) || !grepl("^ddg.eval", cmd[[1]]))}, parsed.commands)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2549:43: style: Opening curly braces should never go on their own line and should always be followed by a new line.
  parsed.commands <- Filter(function(cmd) {return (!is.call(cmd) || !grepl("^ddg.eval", cmd[[1]]))}, parsed.commands)
                                          ^
./R/RDataTracker.R:2549:99: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
  parsed.commands <- Filter(function(cmd) {return (!is.call(cmd) || !grepl("^ddg.eval", cmd[[1]]))}, parsed.commands)
                                                                                                  ^
./R/RDataTracker.R:2556:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.record.warning <- function () {
^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2558:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  w <- .ddg.get.warning()
       ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2558:8: warning: no visible global function definition for ‘.ddg.get.warning’
  w <- .ddg.get.warning()
       ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2561:3: style: Variable and function names should be all lowercase.
  callStr <-
  ^~~~~~~
./R/RDataTracker.R:2564:3: style: Variable and function names should be all lowercase.
  warningMessage <- paste (callStr, w$message)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:2564:28: style: Variable and function names should be all lowercase.
  warningMessage <- paste (callStr, w$message)
                           ^~~~~~~
./R/RDataTracker.R:2567:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.insert.error.message(warningMessage, "warning.msg", doWarn = FALSE)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2567:3: warning: no visible global function definition for ‘.ddg.insert.error.message’
  .ddg.insert.error.message(warningMessage, "warning.msg", doWarn = FALSE)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2567:29: style: Variable and function names should be all lowercase.
  .ddg.insert.error.message(warningMessage, "warning.msg", doWarn = FALSE)
                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:2570:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.clear.warning()
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2570:3: warning: no visible global function definition for ‘.ddg.clear.warning’
  .ddg.clear.warning()
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2588:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.process.breakpoint <- function(command, inside.function) {
^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2590:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.get("ddg.break")) {
       ^~~~~~~~
./R/RDataTracker.R:2591:1: style: lines should not be more than 80 characters.
    writeLines("\nEnter = next command, C = next breakpoint, D = display DDG, Q = quit debugging\n")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2603:45: style: Put spaces around all infix operators.
    else slnum <- paste(snum, ":", lnum, sep="")
                                           ~^~
./R/RDataTracker.R:2604:45: style: Put spaces around all infix operators.
    print(paste(slnum,  "  |  ", abbrev, sep=""))
                                           ~^~
./R/RDataTracker.R:2608:18: style: Words within variable and function names should be separated by '_' rather than '.'.
    frame.num <- .ddg.get.frame.number(sys.calls())
                 ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2608:18: warning: no visible global function definition for ‘.ddg.get.frame.number’
    frame.num <- .ddg.get.frame.number(sys.calls())
                 ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2618:54: style: Put spaces around all infix operators.
    print(paste("[", func.name, "]  |  ", abbrev, sep=""))
                                                    ~^~
./R/RDataTracker.R:2622:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.txt.write()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:2622:3: warning: no visible global function definition for ‘.ddg.txt.write’
  .ddg.txt.write()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:2623:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.json.write()
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2623:3: warning: no visible global function definition for ‘.ddg.json.write’
  .ddg.json.write()
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2630:26: style: Words within variable and function names should be separated by '_' rather than '.'.
    else if (line == "") .ddg.set("ddg.break", TRUE)
                         ^~~~~~~~
./R/RDataTracker.R:2631:27: style: Words within variable and function names should be separated by '_' rather than '.'.
    else if (line == "C") .ddg.set("ddg.break", FALSE)
                          ^~~~~~~~
./R/RDataTracker.R:2632:27: style: Words within variable and function names should be separated by '_' rather than '.'.
    else if (line == "Q") .ddg.set("ddg.break.ignore", TRUE)
                          ^~~~~~~~
./R/RDataTracker.R:2647:1: style: lines should not be more than 80 characters.
.ddg.create.DDGStatements <- function (exprs, script.name, script.num, parseData = NULL, enclosing.pos = NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2647:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.DDGStatements <- function (exprs, script.name, script.num, parseData = NULL, enclosing.pos = NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2647:72: style: Variable and function names should be all lowercase.
.ddg.create.DDGStatements <- function (exprs, script.name, script.num, parseData = NULL, enclosing.pos = NULL) {
                                                                       ^~~~~~~~~
./R/RDataTracker.R:2649:15: style: Variable and function names should be all lowercase.
  if (is.null(parseData)) {
              ^~~~~~~~~
./R/RDataTracker.R:2650:5: style: Variable and function names should be all lowercase.
    parseData <- getParseData(exprs, includeText=TRUE)
    ^~~~~~~~~
./R/RDataTracker.R:2650:49: style: Put spaces around all infix operators.
    parseData <- getParseData(exprs, includeText=TRUE)
                                               ~^~
./R/RDataTracker.R:2652:17: style: Variable and function names should be all lowercase.
    if (is.null(parseData)) {
                ^~~~~~~~~
./R/RDataTracker.R:2657:1: style: lines should not be more than 80 characters.
        cmds[[i]] <- .ddg.construct.DDGStatement(expr, NA, script.name, script.num, NA, parseData)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2657:22: style: Words within variable and function names should be separated by '_' rather than '.'.
        cmds[[i]] <- .ddg.construct.DDGStatement(expr, NA, script.name, script.num, NA, parseData)
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2657:22: warning: no visible global function definition for ‘.ddg.construct.DDGStatement’
        cmds[[i]] <- .ddg.construct.DDGStatement(expr, NA, script.name, script.num, NA, parseData)
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2657:89: style: Variable and function names should be all lowercase.
        cmds[[i]] <- .ddg.construct.DDGStatement(expr, NA, script.name, script.num, NA, parseData)
                                                                                        ^~~~~~~~~
./R/RDataTracker.R:2662:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    non.comment.parse.data <- parseData[parseData$token != "COMMENT", ]
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2662:31: style: Variable and function names should be all lowercase.
    non.comment.parse.data <- parseData[parseData$token != "COMMENT", ]
                              ^~~~~~~~~
./R/RDataTracker.R:2662:41: style: Variable and function names should be all lowercase.
    non.comment.parse.data <- parseData[parseData$token != "COMMENT", ]
                                        ^~~~~~~~~
./R/RDataTracker.R:2663:14: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (nrow(non.comment.parse.data) == 0) {
             ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2668:5: style: Variable and function names should be all lowercase.
    next.parseData <- 1
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:2672:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    non.comment.parse.data <- parseData[parseData$token != "COMMENT", ]
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2672:31: style: Variable and function names should be all lowercase.
    non.comment.parse.data <- parseData[parseData$token != "COMMENT", ]
                              ^~~~~~~~~
./R/RDataTracker.R:2672:41: style: Variable and function names should be all lowercase.
    non.comment.parse.data <- parseData[parseData$token != "COMMENT", ]
                                        ^~~~~~~~~
./R/RDataTracker.R:2674:1: style: lines should not be more than 80 characters.
    # Start at the first entry in parse data that begins after the enclosing function begins,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2675:1: style: lines should not be more than 80 characters.
    # ends before the enclosing function ends, and matches the text of the first expression.
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2676:1: style: lines should not be more than 80 characters.
    next.parseData <- which(non.comment.parse.data$line1 >= enclosing.pos@startLine & non.comment.parse.data$line2 <= enclosing.pos@endLine & non.comment.parse.data$text == paste(deparse(exprs[[1]]), collapse="\n") )[1]
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2676:5: style: Variable and function names should be all lowercase.
    next.parseData <- which(non.comment.parse.data$line1 >= enclosing.pos@startLine & non.comment.parse.data$line2 <= enclosing.pos@endLine & non.comment.parse.data$text == paste(deparse(exprs[[1]]), collapse="\n") )[1]
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:2676:29: style: Words within variable and function names should be separated by '_' rather than '.'.
    next.parseData <- which(non.comment.parse.data$line1 >= enclosing.pos@startLine & non.comment.parse.data$line2 <= enclosing.pos@endLine & non.comment.parse.data$text == paste(deparse(exprs[[1]]), collapse="\n") )[1]
                            ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2676:87: style: Words within variable and function names should be separated by '_' rather than '.'.
    next.parseData <- which(non.comment.parse.data$line1 >= enclosing.pos@startLine & non.comment.parse.data$line2 <= enclosing.pos@endLine & non.comment.parse.data$text == paste(deparse(exprs[[1]]), collapse="\n") )[1]
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2676:143: style: Words within variable and function names should be separated by '_' rather than '.'.
    next.parseData <- which(non.comment.parse.data$line1 >= enclosing.pos@startLine & non.comment.parse.data$line2 <= enclosing.pos@endLine & non.comment.parse.data$text == paste(deparse(exprs[[1]]), collapse="\n") )[1]
                                                                                                                                              ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2676:209: style: Put spaces around all infix operators.
    next.parseData <- which(non.comment.parse.data$line1 >= enclosing.pos@startLine & non.comment.parse.data$line2 <= enclosing.pos@endLine & non.comment.parse.data$text == paste(deparse(exprs[[1]]), collapse="\n") )[1]
                                                                                                                                                                                                               ~^~
./R/RDataTracker.R:2680:18: style: Words within variable and function names should be separated by '_' rather than '.'.
  breakpoints <- ddg.list.breakpoints()
                 ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2680:18: warning: no visible global function definition for ‘ddg.list.breakpoints’
  breakpoints <- ddg.list.breakpoints()
                 ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2688:1: style: lines should not be more than 80 characters.
    next.expr.pos <- new (Class = "DDGStatementPos", non.comment.parse.data[next.parseData, ])
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2688:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    next.expr.pos <- new (Class = "DDGStatementPos", non.comment.parse.data[next.parseData, ])
    ^~~~~~~~~~~~~
./R/RDataTracker.R:2688:54: style: Words within variable and function names should be separated by '_' rather than '.'.
    next.expr.pos <- new (Class = "DDGStatementPos", non.comment.parse.data[next.parseData, ])
                                                     ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2688:77: style: Variable and function names should be all lowercase.
    next.expr.pos <- new (Class = "DDGStatementPos", non.comment.parse.data[next.parseData, ])
                                                                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:2689:1: style: lines should not be more than 80 characters.
    cmds[[next.cmd]] <- .ddg.construct.DDGStatement(expr, next.expr.pos, script.name, script.num, breakpoints, parseData)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2689:25: style: Words within variable and function names should be separated by '_' rather than '.'.
    cmds[[next.cmd]] <- .ddg.construct.DDGStatement(expr, next.expr.pos, script.name, script.num, breakpoints, parseData)
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2689:25: warning: no visible global function definition for ‘.ddg.construct.DDGStatement’
    cmds[[next.cmd]] <- .ddg.construct.DDGStatement(expr, next.expr.pos, script.name, script.num, breakpoints, parseData)
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2689:59: style: Words within variable and function names should be separated by '_' rather than '.'.
    cmds[[next.cmd]] <- .ddg.construct.DDGStatement(expr, next.expr.pos, script.name, script.num, breakpoints, parseData)
                                                          ^~~~~~~~~~~~~
./R/RDataTracker.R:2689:112: style: Variable and function names should be all lowercase.
    cmds[[next.cmd]] <- .ddg.construct.DDGStatement(expr, next.expr.pos, script.name, script.num, breakpoints, parseData)
                                                                                                               ^~~~~~~~~
./R/RDataTracker.R:2692:1: style: lines should not be more than 80 characters.
    # If there are more expressions, determine where to look next in the parseData
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2694:8: style: Words within variable and function names should be separated by '_' rather than '.'.
       last.ending.line <- non.comment.parse.data[next.parseData,]$line2
       ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2694:28: style: Words within variable and function names should be separated by '_' rather than '.'.
       last.ending.line <- non.comment.parse.data[next.parseData,]$line2
                           ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2694:51: style: Variable and function names should be all lowercase.
       last.ending.line <- non.comment.parse.data[next.parseData,]$line2
                                                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:2694:66: style: Commas should always have a space after.
       last.ending.line <- non.comment.parse.data[next.parseData,]$line2
                                                                 ^
./R/RDataTracker.R:2695:23: style: Words within variable and function names should be separated by '_' rather than '.'.
       last.parent <- non.comment.parse.data[next.parseData,"parent"]
                      ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2695:46: style: Variable and function names should be all lowercase.
       last.parent <- non.comment.parse.data[next.parseData,"parent"]
                                             ^~~~~~~~~~~~~~
./R/RDataTracker.R:2695:61: style: Commas should always have a space after.
       last.parent <- non.comment.parse.data[next.parseData,"parent"]
                                                            ^
./R/RDataTracker.R:2696:19: style: Words within variable and function names should be separated by '_' rather than '.'.
       last.id <- non.comment.parse.data[next.parseData,"id"]
                  ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2696:42: style: Variable and function names should be all lowercase.
       last.id <- non.comment.parse.data[next.parseData,"id"]
                                         ^~~~~~~~~~~~~~
./R/RDataTracker.R:2696:57: style: Commas should always have a space after.
       last.id <- non.comment.parse.data[next.parseData,"id"]
                                                        ^
./R/RDataTracker.R:2700:1: style: lines should not be more than 80 characters.
       next.parseData <- which(non.comment.parse.data$parent == last.parent & non.comment.parse.data$line1 >= last.ending.line & non.comment.parse.data$id > last.id) [1]
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2700:8: style: Variable and function names should be all lowercase.
       next.parseData <- which(non.comment.parse.data$parent == last.parent & non.comment.parse.data$line1 >= last.ending.line & non.comment.parse.data$id > last.id) [1]
       ^~~~~~~~~~~~~~
./R/RDataTracker.R:2700:32: style: Words within variable and function names should be separated by '_' rather than '.'.
       next.parseData <- which(non.comment.parse.data$parent == last.parent & non.comment.parse.data$line1 >= last.ending.line & non.comment.parse.data$id > last.id) [1]
                               ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2700:79: style: Words within variable and function names should be separated by '_' rather than '.'.
       next.parseData <- which(non.comment.parse.data$parent == last.parent & non.comment.parse.data$line1 >= last.ending.line & non.comment.parse.data$id > last.id) [1]
                                                                              ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2700:111: style: Words within variable and function names should be separated by '_' rather than '.'.
       next.parseData <- which(non.comment.parse.data$parent == last.parent & non.comment.parse.data$line1 >= last.ending.line & non.comment.parse.data$id > last.id) [1]
                                                                                                              ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2700:130: style: Words within variable and function names should be separated by '_' rather than '.'.
       next.parseData <- which(non.comment.parse.data$parent == last.parent & non.comment.parse.data$line1 >= last.ending.line & non.comment.parse.data$id > last.id) [1]
                                                                                                                                 ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2710:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.save.annotated.script <- function(cmds, script.name) {
^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2713:47: style: Put spaces around all infix operators.
    line <- paste(deparse(expr[[1]]), collapse="\n")
                                             ~^~
./R/RDataTracker.R:2717:25: style: Words within variable and function names should be separated by '_' rather than '.'.
  fileout <- file(paste(.ddg.path.debug(), "/annotated-", script.name, sep=""))
                        ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2717:25: warning: no visible global function definition for ‘.ddg.path.debug’
  fileout <- file(paste(.ddg.path.debug(), "/annotated-", script.name, sep=""))
                        ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2717:45: warning: Do not use absolute paths.
  fileout <- file(paste(.ddg.path.debug(), "/annotated-", script.name, sep=""))
                                            ^~~~~~~~~~~
./R/RDataTracker.R:2717:75: style: Put spaces around all infix operators.
  fileout <- file(paste(.ddg.path.debug(), "/annotated-", script.name, sep=""))
                                                                         ~^~
./R/RDataTracker.R:2761:1: style: lines should not be more than 80 characters.
.ddg.parse.commands <- function (exprs, script.name="", script.num=NA, environ, ignore.patterns=c('^ddg.'), node.name="Console", run.commands = FALSE, echo=FALSE, print.eval=echo, max.deparse.length=150, called.from.ddg.eval=FALSE, cmds=NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2761:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.parse.commands <- function (exprs, script.name="", script.num=NA, environ, ignore.patterns=c('^ddg.'), node.name="Console", run.commands = FALSE, echo=FALSE, print.eval=echo, max.deparse.length=150, called.from.ddg.eval=FALSE, cmds=NULL) {
^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2761:99: style: Only use double-quotes.
.ddg.parse.commands <- function (exprs, script.name="", script.num=NA, environ, ignore.patterns=c('^ddg.'), node.name="Console", run.commands = FALSE, echo=FALSE, print.eval=echo, max.deparse.length=150, called.from.ddg.eval=FALSE, cmds=NULL) {
                                                                                                  ^~~~~~~
./R/RDataTracker.R:2761:181: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.parse.commands <- function (exprs, script.name="", script.num=NA, environ, ignore.patterns=c('^ddg.'), node.name="Console", run.commands = FALSE, echo=FALSE, print.eval=echo, max.deparse.length=150, called.from.ddg.eval=FALSE, cmds=NULL) {
                                                                                                                                                                                    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2761:205: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.parse.commands <- function (exprs, script.name="", script.num=NA, environ, ignore.patterns=c('^ddg.'), node.name="Console", run.commands = FALSE, echo=FALSE, print.eval=echo, max.deparse.length=150, called.from.ddg.eval=FALSE, cmds=NULL) {
                                                                                                                                                                                                            ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2762:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:2765:13: style: Words within variable and function names should be separated by '_' rather than '.'.
    cmds <- .ddg.create.DDGStatements (exprs, script.name, script.num)
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2765:13: warning: no visible global function definition for ‘.ddg.create.DDGStatements’
    cmds <- .ddg.create.DDGStatements (exprs, script.name, script.num)
            ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2767:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.save.debug()) {
        ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2768:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.save.annotated.script(cmds, script.name)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2768:7: warning: no visible global function definition for ‘.ddg.save.annotated.script’
      .ddg.save.annotated.script(cmds, script.name)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2776:1: style: lines should not be more than 80 characters.
  # print (paste("ddg.parse.commands: .ddg.func.depth =", .ddg.get(".ddg.func.depth")))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2776:5: style: Commented code should be removed.
  # print (paste("ddg.parse.commands: .ddg.func.depth =", .ddg.get(".ddg.func.depth")))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2777:19: style: Words within variable and function names should be separated by '_' rather than '.'.
  inside.func <- (.ddg.get(".ddg.func.depth") > 0)
                  ^~~~~~~~
./R/RDataTracker.R:2777:19: warning: no visible global function definition for ‘.ddg.get’
  inside.func <- (.ddg.get(".ddg.func.depth") > 0)
                  ^~~~~~~~
./R/RDataTracker.R:2781:1: style: lines should not be more than 80 characters.
  if (.ddg.is.init() && !inside.func) .ddg.close.last.command.node(environ, initial=TRUE)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2781:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.init() && !inside.func) .ddg.close.last.command.node(environ, initial=TRUE)
      ^~~~~~~~~~~~
./R/RDataTracker.R:2781:7: warning: no visible global function definition for ‘.ddg.is.init’
  if (.ddg.is.init() && !inside.func) .ddg.close.last.command.node(environ, initial=TRUE)
      ^~~~~~~~~~~~
./R/RDataTracker.R:2781:39: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.init() && !inside.func) .ddg.close.last.command.node(environ, initial=TRUE)
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2781:39: warning: no visible global function definition for ‘.ddg.close.last.command.node’
  if (.ddg.is.init() && !inside.func) .ddg.close.last.command.node(environ, initial=TRUE)
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2781:84: style: Put spaces around all infix operators.
  if (.ddg.is.init() && !inside.func) .ddg.close.last.command.node(environ, initial=TRUE)
                                                                                  ~^~
./R/RDataTracker.R:2786:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.last.cmd <- cmds[[num.cmds]]
      ^~~~~~~~~~~~~
./R/RDataTracker.R:2787:1: style: lines should not be more than 80 characters.
    # print(paste(".ddg.parse.commands: setting .ddg.last.cmd to", .ddg.last.cmd$text))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2787:7: style: Commented code should be removed.
    # print(paste(".ddg.parse.commands: setting .ddg.last.cmd to", .ddg.last.cmd$text))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2788:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.last.cmd@isDdgFunc) {
        ^~~~~~~~~~~~~
./R/RDataTracker.R:2789:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.last.cmd <- NULL
      ^~~~~~~~~~~~~
./R/RDataTracker.R:2790:8: style: Commented code should be removed.
      #print(".ddg.parse.commands: setting .ddg.last.cmd to null")
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2794:30: style: Put spaces around all infix operators.
      cmds <- cmds[1:num.cmds-1]
                            ~^~
./R/RDataTracker.R:2801:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  named.node.set <- FALSE
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:2802:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  start.node.created <- ""
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2802:3: warning: local variable ‘start.node.created’ assigned but may not be used
  start.node.created <- ""
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2804:23: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (num.cmds > 0 && .ddg.is.init() && !inside.func && !called.from.ddg.eval) {
                      ^~~~~~~~~~~~
./R/RDataTracker.R:2804:58: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (num.cmds > 0 && .ddg.is.init() && !inside.func && !called.from.ddg.eval) {
                                                         ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2805:7: style: Commented code should be removed.
    # print(paste("ddg.new.parse.commands: Creating Start for", node.name))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2806:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.abstract.node("Start", node.name = node.name, env = environ)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2806:5: warning: no visible global function definition for ‘.ddg.add.abstract.node’
    .ddg.add.abstract.node("Start", node.name = node.name, env = environ)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2807:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    named.node.set <- TRUE
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:2808:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    start.node.created <- node.name
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2813:5: style: Commented code should be removed.
  # .ddg.set(".ddg.last.cmd", .ddg.last.cmd)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2832:19: style: Words within variable and function names should be separated by '_' rather than '.'.
      vars.set <- .ddg.find.var.assignments(cmds)
                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2832:19: warning: no visible global function definition for ‘.ddg.find.var.assignments’
      vars.set <- .ddg.find.var.assignments(cmds)
                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2835:19: style: Words within variable and function names should be separated by '_' rather than '.'.
      vars.set <- .ddg.create.empty.vars.set()
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2835:19: warning: no visible global function definition for ‘.ddg.create.empty.vars.set’
      vars.set <- .ddg.create.empty.vars.set()
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2842:1: style: lines should not be more than 80 characters.
      if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Processing", cmd@abbrev))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2842:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Processing", cmd@abbrev))
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:2842:11: warning: no visible global function definition for ‘.ddg.debug.lib’
      if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Processing", cmd@abbrev))
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:2844:1: style: lines should not be more than 80 characters.
      # Process breakpoint. We stop if there is a breakpoint set on this line or we are single-stepping.
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2845:9: style: Commented code should be removed.
      # print("Checking for breakpoints")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2846:1: style: lines should not be more than 80 characters.
      if (.ddg.is.sourced() & (cmd@is.breakpoint | .ddg.get("ddg.break")) & !.ddg.break.ignore()) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2846:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (.ddg.is.sourced() & (cmd@is.breakpoint | .ddg.get("ddg.break")) & !.ddg.break.ignore()) {
          ^~~~~~~~~~~~~~~
./R/RDataTracker.R:2846:52: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (.ddg.is.sourced() & (cmd@is.breakpoint | .ddg.get("ddg.break")) & !.ddg.break.ignore()) {
                                                   ^~~~~~~~
./R/RDataTracker.R:2846:78: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (.ddg.is.sourced() & (cmd@is.breakpoint | .ddg.get("ddg.break")) & !.ddg.break.ignore()) {
                                                                             ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2847:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.process.breakpoint(cmd, inside.function=called.from.ddg.eval)
        ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2847:9: warning: no visible global function definition for ‘.ddg.process.breakpoint’
        .ddg.process.breakpoint(cmd, inside.function=called.from.ddg.eval)
        ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2847:53: style: Put spaces around all infix operators.
        .ddg.process.breakpoint(cmd, inside.function=called.from.ddg.eval)
                                                   ~^~
./R/RDataTracker.R:2847:54: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.process.breakpoint(cmd, inside.function=called.from.ddg.eval)
                                                     ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2850:9: style: Commented code should be removed.
      # print("Checking whether to set last.cmd")
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2851:1: style: lines should not be more than 80 characters.
      if (.ddg.enable.source() && grepl("^ddg.eval", cmd@text) && .ddg.enable.console()) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2851:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (.ddg.enable.source() && grepl("^ddg.eval", cmd@text) && .ddg.enable.console()) {
          ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2851:67: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (.ddg.enable.source() && grepl("^ddg.eval", cmd@text) && .ddg.enable.console()) {
                                                                  ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2852:21: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (is.null(.ddg.last.cmd)) {
                    ^~~~~~~~~~~~~
./R/RDataTracker.R:2853:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.last.cmd <- cmd
          ^~~~~~~~~~~~~
./R/RDataTracker.R:2859:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (.ddg.is.global.assign(cmd@parsed[[1]])) d.environ <- globalenv()
          ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2859:11: warning: no visible global function definition for ‘.ddg.is.global.assign’
      if (.ddg.is.global.assign(cmd@parsed[[1]])) d.environ <- globalenv()
          ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2861:18: style: Words within variable and function names should be separated by '_' rather than '.'.
      st.type <- .ddg.get.statement.type(cmd@parsed[[1]])
                 ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2861:18: warning: no visible global function definition for ‘.ddg.get.statement.type’
      st.type <- .ddg.get.statement.type(cmd@parsed[[1]])
                 ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2862:1: style: Trailing whitespace is superfluous.
      
^~~~~~
./R/RDataTracker.R:2863:1: style: lines should not be more than 80 characters.
      control.statement <- (st.type == "if" || st.type == "for" || st.type == "while" || st.type == "repeat" || st.type == "{")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2864:1: style: Trailing whitespace is superfluous.
      
^~~~~~
./R/RDataTracker.R:2865:1: style: lines should not be more than 80 characters.
      loop.statement <- (st.type == "for" || st.type == "while" || st.type == "repeat")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2866:1: style: Trailing whitespace is superfluous.
      
^~~~~~
./R/RDataTracker.R:2869:71: style: Trailing whitespace is superfluous.
      # command is not a DDG command or a control statement, it should 
                                                                      ^
./R/RDataTracker.R:2872:70: style: Trailing whitespace is superfluous.
      # block, so there is no need to create additional nodes for the 
                                                                     ^
./R/RDataTracker.R:2875:1: style: lines should not be more than 80 characters.
      create <- !cmd@isDdgFunc && .ddg.is.init() && .ddg.enable.console() && !(control.statement && ddg.annotate.inside() && ddg.max.loops() > 0)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2875:35: style: Words within variable and function names should be separated by '_' rather than '.'.
      create <- !cmd@isDdgFunc && .ddg.is.init() && .ddg.enable.console() && !(control.statement && ddg.annotate.inside() && ddg.max.loops() > 0)
                                  ^~~~~~~~~~~~
./R/RDataTracker.R:2875:35: warning: no visible global function definition for ‘.ddg.is.init’
      create <- !cmd@isDdgFunc && .ddg.is.init() && .ddg.enable.console() && !(control.statement && ddg.annotate.inside() && ddg.max.loops() > 0)
                                  ^~~~~~~~~~~~
./R/RDataTracker.R:2875:53: style: Words within variable and function names should be separated by '_' rather than '.'.
      create <- !cmd@isDdgFunc && .ddg.is.init() && .ddg.enable.console() && !(control.statement && ddg.annotate.inside() && ddg.max.loops() > 0)
                                                    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2875:53: warning: no visible global function definition for ‘.ddg.enable.console’
      create <- !cmd@isDdgFunc && .ddg.is.init() && .ddg.enable.console() && !(control.statement && ddg.annotate.inside() && ddg.max.loops() > 0)
                                                    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2875:101: style: Words within variable and function names should be separated by '_' rather than '.'.
      create <- !cmd@isDdgFunc && .ddg.is.init() && .ddg.enable.console() && !(control.statement && ddg.annotate.inside() && ddg.max.loops() > 0)
                                                                                                    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2875:101: warning: no visible global function definition for ‘ddg.annotate.inside’
      create <- !cmd@isDdgFunc && .ddg.is.init() && .ddg.enable.console() && !(control.statement && ddg.annotate.inside() && ddg.max.loops() > 0)
                                                                                                    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2875:126: style: Words within variable and function names should be separated by '_' rather than '.'.
      create <- !cmd@isDdgFunc && .ddg.is.init() && .ddg.enable.console() && !(control.statement && ddg.annotate.inside() && ddg.max.loops() > 0)
                                                                                                                             ^~~~~~~~~~~~~
./R/RDataTracker.R:2875:126: warning: no visible global function definition for ‘ddg.max.loops’
      create <- !cmd@isDdgFunc && .ddg.is.init() && .ddg.enable.console() && !(control.statement && ddg.annotate.inside() && ddg.max.loops() > 0)
                                                                                                                             ^~~~~~~~~~~~~
./R/RDataTracker.R:2876:9: style: Commented code should be removed.
      # create <- !cmd@isDdgFunc && .ddg.is.init() && .ddg.enable.console()
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2877:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      start.finish.created <- FALSE
      ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2880:1: style: lines should not be more than 80 characters.
      if (!any(sapply(ignore.patterns, function(pattern){grepl(pattern, cmd@text)}))) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2880:57: style: Opening curly braces should never go on their own line and should always be followed by a new line.
      if (!any(sapply(ignore.patterns, function(pattern){grepl(pattern, cmd@text)}))) {
                                                        ^
./R/RDataTracker.R:2880:82: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
      if (!any(sapply(ignore.patterns, function(pattern){grepl(pattern, cmd@text)}))) {
                                                                                 ^
./R/RDataTracker.R:2887:30: style: Words within variable and function names should be separated by '_' rather than '.'.
            do.trunc <- nd > max.deparse.length
                             ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2889:27: style: Words within variable and function names should be separated by '_' rather than '.'.
                          max.deparse.length
                          ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2898:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.set(".ddg.possible.last.cmd", cmd)
            ^~~~~~~~
./R/RDataTracker.R:2898:13: warning: no visible global function definition for ‘.ddg.set’
            .ddg.set(".ddg.possible.last.cmd", cmd)
            ^~~~~~~~
./R/RDataTracker.R:2899:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.set (".ddg.cur.cmd", cmd)
            ^~~~~~~~
./R/RDataTracker.R:2899:13: warning: no visible global function definition for ‘.ddg.set’
            .ddg.set (".ddg.cur.cmd", cmd)
            ^~~~~~~~
./R/RDataTracker.R:2904:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
            ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2904:35: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
                                  ^~~~~~~~
./R/RDataTracker.R:2904:35: warning: no visible global function definition for ‘.ddg.get’
            .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
                                  ^~~~~~~~
./R/RDataTracker.R:2906:24: style: Words within variable and function names should be separated by '_' rather than '.'.
            if (length(.ddg.cur.cmd.stack) == 0) {
                       ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2907:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.cur.cmd.stack <- c(cmd, FALSE)
              ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2910:1: style: lines should not be more than 80 characters.
              .ddg.cur.cmd.stack <- c(.ddg.get(".ddg.cur.cmd.stack"), cmd, FALSE)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2910:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.cur.cmd.stack <- c(.ddg.get(".ddg.cur.cmd.stack"), cmd, FALSE)
              ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2910:39: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.cur.cmd.stack <- c(.ddg.get(".ddg.cur.cmd.stack"), cmd, FALSE)
                                      ^~~~~~~~
./R/RDataTracker.R:2910:39: warning: no visible global function definition for ‘.ddg.get’
              .ddg.cur.cmd.stack <- c(.ddg.get(".ddg.cur.cmd.stack"), cmd, FALSE)
                                      ^~~~~~~~
./R/RDataTracker.R:2912:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack)
            ^~~~~~~~
./R/RDataTracker.R:2912:13: warning: no visible global function definition for ‘.ddg.set’
            .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack)
            ^~~~~~~~
./R/RDataTracker.R:2912:44: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack)
                                           ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2915:20: style: Words within variable and function names should be separated by '_' rather than '.'.
          else if (.ddg.is.procedure.cmd(cmd)) {
                   ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2916:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.set(".ddg.possible.last.cmd", NULL)
            ^~~~~~~~
./R/RDataTracker.R:2916:13: warning: no visible global function definition for ‘.ddg.set’
            .ddg.set(".ddg.possible.last.cmd", NULL)
            ^~~~~~~~
./R/RDataTracker.R:2926:1: style: lines should not be more than 80 characters.
          if (.ddg.debug.lib()) print (paste (".ddg.parse.commands: Evaluating ", cmd@annotated))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2926:15: style: Words within variable and function names should be separated by '_' rather than '.'.
          if (.ddg.debug.lib()) print (paste (".ddg.parse.commands: Evaluating ", cmd@annotated))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:2926:15: warning: no visible global function definition for ‘.ddg.debug.lib’
          if (.ddg.debug.lib()) print (paste (".ddg.parse.commands: Evaluating ", cmd@annotated))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:2928:1: style: lines should not be more than 80 characters.
          result <- withCallingHandlers (eval(cmd@annotated, environ, NULL), warning = .ddg.set.warning)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2928:88: style: Words within variable and function names should be separated by '_' rather than '.'.
          result <- withCallingHandlers (eval(cmd@annotated, environ, NULL), warning = .ddg.set.warning)
                                                                                       ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2928:88: warning: no visible binding for global variable ‘.ddg.set.warning’
          result <- withCallingHandlers (eval(cmd@annotated, environ, NULL), warning = .ddg.set.warning)
                                                                                       ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:2930:1: style: lines should not be more than 80 characters.
          if (.ddg.debug.lib()) print (paste (".ddg.parse.commands: Done evaluating ", cmd@annotated))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2930:15: style: Words within variable and function names should be separated by '_' rather than '.'.
          if (.ddg.debug.lib()) print (paste (".ddg.parse.commands: Done evaluating ", cmd@annotated))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:2930:15: warning: no visible global function definition for ‘.ddg.debug.lib’
          if (.ddg.debug.lib()) print (paste (".ddg.parse.commands: Done evaluating ", cmd@annotated))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:2935:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
            ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2935:35: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
                                  ^~~~~~~~
./R/RDataTracker.R:2935:35: warning: no visible global function definition for ‘.ddg.get’
            .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
                                  ^~~~~~~~
./R/RDataTracker.R:2936:36: style: Words within variable and function names should be separated by '_' rather than '.'.
            stack.length <- length(.ddg.cur.cmd.stack)
                                   ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2937:30: style: Words within variable and function names should be separated by '_' rather than '.'.
            start.created <- .ddg.cur.cmd.stack[stack.length][[1]]
                             ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2943:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.add.abstract.node("Finish", cmd, environ)
              ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2943:15: warning: no visible global function definition for ‘.ddg.add.abstract.node’
              .ddg.add.abstract.node("Finish", cmd, environ)
              ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2944:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              start.finish.created <- TRUE
              ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2945:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.link.function.returns(cmd)
              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2945:15: warning: no visible global function definition for ‘.ddg.link.function.returns’
              .ddg.link.function.returns(cmd)
              ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2946:1: style: Trailing whitespace is superfluous.
              
^~~~~~~~~~~~~~
./R/RDataTracker.R:2949:38: style: Words within variable and function names should be separated by '_' rather than '.'.
              if (loop.statement && !ddg.loop.annotate()) {
                                     ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2950:30: style: Words within variable and function names should be separated by '_' rather than '.'.
                vars.set2 <- .ddg.add.to.vars.set(vars.set, cmd, i)
                             ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2950:30: warning: no visible global function definition for ‘.ddg.add.to.vars.set’
                vars.set2 <- .ddg.add.to.vars.set(vars.set, cmd, i)
                             ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2951:1: style: lines should not be more than 80 characters.
                .ddg.create.data.node.for.possible.writes(vars.set2, cmd, environ)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2951:17: style: Words within variable and function names should be separated by '_' rather than '.'.
                .ddg.create.data.node.for.possible.writes(vars.set2, cmd, environ)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2951:17: style: Variable and function names should not be longer than 30 characters.
                .ddg.create.data.node.for.possible.writes(vars.set2, cmd, environ)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2951:17: warning: no visible global function definition for ‘.ddg.create.data.node.for.possible.writes’
                .ddg.create.data.node.for.possible.writes(vars.set2, cmd, environ)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2958:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.set(".ddg.cur.cmd.stack", vector())
              ^~~~~~~~
./R/RDataTracker.R:2958:15: warning: no visible global function definition for ‘.ddg.set’
              .ddg.set(".ddg.cur.cmd.stack", vector())
              ^~~~~~~~
./R/RDataTracker.R:2961:1: style: lines should not be more than 80 characters.
              .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack[1:(stack.length-2)])
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2961:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack[1:(stack.length-2)])
              ^~~~~~~~
./R/RDataTracker.R:2961:15: warning: no visible global function definition for ‘.ddg.set’
              .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack[1:(stack.length-2)])
              ^~~~~~~~
./R/RDataTracker.R:2961:46: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack[1:(stack.length-2)])
                                             ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2961:80: style: Put spaces around all infix operators.
              .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack[1:(stack.length-2)])
                                                                              ~^~
./R/RDataTracker.R:2976:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        last.proc.node.created <-
        ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2977:1: style: lines should not be more than 80 characters.
            if (.ddg.is.set (".ddg.last.proc.node.created")).ddg.get(".ddg.last.proc.node.created")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2977:17: style: Words within variable and function names should be separated by '_' rather than '.'.
            if (.ddg.is.set (".ddg.last.proc.node.created")).ddg.get(".ddg.last.proc.node.created")
                ^~~~~~~~~~~
./R/RDataTracker.R:2977:61: style: Words within variable and function names should be separated by '_' rather than '.'.
            if (.ddg.is.set (".ddg.last.proc.node.created")).ddg.get(".ddg.last.proc.node.created")
                                                            ^~~~~~~~
./R/RDataTracker.R:2979:1: style: lines should not be more than 80 characters.
        cur.cmd.closed <- (last.proc.node.created == paste ("Finish", cmd@abbrev))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2979:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        cur.cmd.closed <- (last.proc.node.created == paste ("Finish", cmd@abbrev))
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:2979:28: style: Words within variable and function names should be separated by '_' rather than '.'.
        cur.cmd.closed <- (last.proc.node.created == paste ("Finish", cmd@abbrev))
                           ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2980:1: style: lines should not be more than 80 characters.
        create.procedure <- create && (!cur.cmd.closed || !named.node.set) && !start.finish.created  && !grepl("^ddg.source", cmd@text)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2980:41: style: Words within variable and function names should be separated by '_' rather than '.'.
        create.procedure <- create && (!cur.cmd.closed || !named.node.set) && !start.finish.created  && !grepl("^ddg.source", cmd@text)
                                        ^~~~~~~~~~~~~~
./R/RDataTracker.R:2980:60: style: Words within variable and function names should be separated by '_' rather than '.'.
        create.procedure <- create && (!cur.cmd.closed || !named.node.set) && !start.finish.created  && !grepl("^ddg.source", cmd@text)
                                                           ^~~~~~~~~~~~~~
./R/RDataTracker.R:2980:80: style: Words within variable and function names should be separated by '_' rather than '.'.
        create.procedure <- create && (!cur.cmd.closed || !named.node.set) && !start.finish.created  && !grepl("^ddg.source", cmd@text)
                                                                               ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2987:1: style: lines should not be more than 80 characters.
          if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding operation node for", cmd@abbrev))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2987:15: style: Words within variable and function names should be separated by '_' rather than '.'.
          if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding operation node for", cmd@abbrev))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:2987:15: warning: no visible global function definition for ‘.ddg.debug.lib’
          if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding operation node for", cmd@abbrev))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:2989:1: style: lines should not be more than 80 characters.
          .ddg.proc.node("Operation", cmd@abbrev, cmd@abbrev, env=environ, console=TRUE, cmd=cmd)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2989:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.proc.node("Operation", cmd@abbrev, cmd@abbrev, env=environ, console=TRUE, cmd=cmd)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:2989:11: warning: no visible global function definition for ‘.ddg.proc.node’
          .ddg.proc.node("Operation", cmd@abbrev, cmd@abbrev, env=environ, console=TRUE, cmd=cmd)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:2989:66: style: Put spaces around all infix operators.
          .ddg.proc.node("Operation", cmd@abbrev, cmd@abbrev, env=environ, console=TRUE, cmd=cmd)
                                                                ~^~
./R/RDataTracker.R:2989:83: style: Put spaces around all infix operators.
          .ddg.proc.node("Operation", cmd@abbrev, cmd@abbrev, env=environ, console=TRUE, cmd=cmd)
                                                                                 ~^~
./R/RDataTracker.R:2989:93: style: Put spaces around all infix operators.
          .ddg.proc.node("Operation", cmd@abbrev, cmd@abbrev, env=environ, console=TRUE, cmd=cmd)
                                                                                           ~^~
./R/RDataTracker.R:2990:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.proc2proc()
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:2990:11: warning: no visible global function definition for ‘.ddg.proc2proc’
          .ddg.proc2proc()
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:2994:15: style: Words within variable and function names should be separated by '_' rather than '.'.
          if (.ddg.warning.occurred()) {
              ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2995:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.record.warning()
            ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2995:13: warning: no visible global function definition for ‘.ddg.record.warning’
            .ddg.record.warning()
            ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:2999:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          last.proc.node <- cmd
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3005:25: style: Words within variable and function names should be separated by '_' rather than '.'.
            vars.set <- .ddg.add.to.vars.set(vars.set,cmd,i)
                        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3005:25: warning: no visible global function definition for ‘.ddg.add.to.vars.set’
            vars.set <- .ddg.add.to.vars.set(vars.set,cmd,i)
                        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3005:55: style: Commas should always have a space after.
            vars.set <- .ddg.add.to.vars.set(vars.set,cmd,i)
                                                      ^
./R/RDataTracker.R:3005:59: style: Commas should always have a space after.
            vars.set <- .ddg.add.to.vars.set(vars.set,cmd,i)
                                                          ^
./R/RDataTracker.R:3007:1: style: lines should not be more than 80 characters.
            if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding", cmd@abbrev, "information to vars.set"))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3007:17: style: Words within variable and function names should be separated by '_' rather than '.'.
            if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding", cmd@abbrev, "information to vars.set"))
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:3007:17: warning: no visible global function definition for ‘.ddg.debug.lib’
            if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding", cmd@abbrev, "information to vars.set"))
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:3010:1: style: lines should not be more than 80 characters.
          .ddg.create.data.use.edges.for.console.cmd(vars.set, cmd, i, for.caller=FALSE)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3010:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.create.data.use.edges.for.console.cmd(vars.set, cmd, i, for.caller=FALSE)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3010:11: style: Variable and function names should not be longer than 30 characters.
          .ddg.create.data.use.edges.for.console.cmd(vars.set, cmd, i, for.caller=FALSE)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3010:11: warning: no visible global function definition for ‘.ddg.create.data.use.edges.for.console.cmd’
          .ddg.create.data.use.edges.for.console.cmd(vars.set, cmd, i, for.caller=FALSE)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3010:82: style: Put spaces around all infix operators.
          .ddg.create.data.use.edges.for.console.cmd(vars.set, cmd, i, for.caller=FALSE)
                                                                                ~^~
./R/RDataTracker.R:3011:30: style: Words within variable and function names should be separated by '_' rather than '.'.
          if (cmd@readsFile) .ddg.create.file.read.nodes.and.edges(cmd, environ)
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3011:30: style: Variable and function names should not be longer than 30 characters.
          if (cmd@readsFile) .ddg.create.file.read.nodes.and.edges(cmd, environ)
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3011:30: warning: no visible global function definition for ‘.ddg.create.file.read.nodes.and.edges’
          if (cmd@readsFile) .ddg.create.file.read.nodes.and.edges(cmd, environ)
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3012:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.link.function.returns(cmd)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3012:11: warning: no visible global function definition for ‘.ddg.link.function.returns’
          .ddg.link.function.returns(cmd)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3014:1: style: lines should not be more than 80 characters.
          if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding input data nodes for", cmd@abbrev))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3014:15: style: Words within variable and function names should be separated by '_' rather than '.'.
          if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding input data nodes for", cmd@abbrev))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:3014:15: warning: no visible global function definition for ‘.ddg.debug.lib’
          if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding input data nodes for", cmd@abbrev))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:3015:1: style: Trailing whitespace is superfluous.
          
^~~~~~~~~~
./R/RDataTracker.R:3016:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.create.data.set.edges.for.cmd(vars.set, cmd, i, d.environ)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3016:11: style: Variable and function names should not be longer than 30 characters.
          .ddg.create.data.set.edges.for.cmd(vars.set, cmd, i, d.environ)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3016:11: warning: no visible global function definition for ‘.ddg.create.data.set.edges.for.cmd’
          .ddg.create.data.set.edges.for.cmd(vars.set, cmd, i, d.environ)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3017:1: style: Trailing whitespace is superfluous.
          
^~~~~~~~~~
./R/RDataTracker.R:3018:1: style: lines should not be more than 80 characters.
          if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding output data nodes for", cmd@abbrev))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3018:15: style: Words within variable and function names should be separated by '_' rather than '.'.
          if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding output data nodes for", cmd@abbrev))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:3018:15: warning: no visible global function definition for ‘.ddg.debug.lib’
          if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding output data nodes for", cmd@abbrev))
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:3020:1: style: lines should not be more than 80 characters.
          if (cmd@writesFile) .ddg.create.file.write.nodes.and.edges (cmd, environ)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3020:31: style: Words within variable and function names should be separated by '_' rather than '.'.
          if (cmd@writesFile) .ddg.create.file.write.nodes.and.edges (cmd, environ)
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3020:31: style: Variable and function names should not be longer than 30 characters.
          if (cmd@writesFile) .ddg.create.file.write.nodes.and.edges (cmd, environ)
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3020:31: warning: no visible global function definition for ‘.ddg.create.file.write.nodes.and.edges’
          if (cmd@writesFile) .ddg.create.file.write.nodes.and.edges (cmd, environ)
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3021:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.set.graphics.files (cmd, environ)
          ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3021:11: warning: no visible global function definition for ‘.ddg.set.graphics.files’
          .ddg.set.graphics.files (cmd, environ)
          ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3024:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.capture.graphics(cmd)
            ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3024:13: warning: no visible global function definition for ‘.ddg.capture.graphics’
            .ddg.capture.graphics(cmd)
            ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3029:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.close.last.command.node(environ, initial=TRUE)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3029:11: warning: no visible global function definition for ‘.ddg.close.last.command.node’
          .ddg.close.last.command.node(environ, initial=TRUE)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3029:56: style: Put spaces around all infix operators.
          .ddg.close.last.command.node(environ, initial=TRUE)
                                                      ~^~
./R/RDataTracker.R:3032:25: style: Words within variable and function names should be separated by '_' rather than '.'.
            vars.set <- .ddg.add.to.vars.set(vars.set,cmd, i)
                        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3032:25: warning: no visible global function definition for ‘.ddg.add.to.vars.set’
            vars.set <- .ddg.add.to.vars.set(vars.set,cmd, i)
                        ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3032:55: style: Commas should always have a space after.
            vars.set <- .ddg.add.to.vars.set(vars.set,cmd, i)
                                                      ^
./R/RDataTracker.R:3033:1: style: lines should not be more than 80 characters.
            if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding", cmd@abbrev, "information to vars.set"))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3033:17: style: Words within variable and function names should be separated by '_' rather than '.'.
            if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding", cmd@abbrev, "information to vars.set"))
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:3033:17: warning: no visible global function definition for ‘.ddg.debug.lib’
            if (.ddg.debug.lib()) print(paste(".ddg.parse.commands: Adding", cmd@abbrev, "information to vars.set"))
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:3034:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.create.data.set.edges.for.cmd(vars.set, cmd, i, environ)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3034:13: style: Variable and function names should not be longer than 30 characters.
            .ddg.create.data.set.edges.for.cmd(vars.set, cmd, i, environ)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3034:13: warning: no visible global function definition for ‘.ddg.create.data.set.edges.for.cmd’
            .ddg.create.data.set.edges.for.cmd(vars.set, cmd, i, environ)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3039:1: style: lines should not be more than 80 characters.
          .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3039:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3039:11: style: Variable and function names should not be longer than 30 characters.
          .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3039:11: warning: no visible global function definition for ‘.ddg.create.data.node.for.possible.writes’
          .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3039:63: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
                                                              ^~~~~~~~~~~~~~
./R/RDataTracker.R:3039:82: style: Put spaces around all infix operators.
          .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
                                                                                ~^~
./R/RDataTracker.R:3042:20: style: Words within variable and function names should be separated by '_' rather than '.'.
          vars.set$possible.last.writer <- vars.set$last.writer
                   ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3051:1: style: lines should not be more than 80 characters.
       .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3051:8: style: Words within variable and function names should be separated by '_' rather than '.'.
       .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3051:8: style: Variable and function names should not be longer than 30 characters.
       .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3051:8: warning: no visible global function definition for ‘.ddg.create.data.node.for.possible.writes’
       .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3051:60: style: Words within variable and function names should be separated by '_' rather than '.'.
       .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
                                                           ^~~~~~~~~~~~~~
./R/RDataTracker.R:3051:79: style: Put spaces around all infix operators.
       .ddg.create.data.node.for.possible.writes(vars.set, last.proc.node, env=environ)
                                                                             ~^~
./R/RDataTracker.R:3055:4: style: Commented code should be removed.
  #print("Done with ddg.parse.commands loop")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3058:1: style: lines should not be more than 80 characters.
  if (execute && !inside.func) .ddg.close.last.command.node(environ, initial=TRUE)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3058:32: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (execute && !inside.func) .ddg.close.last.command.node(environ, initial=TRUE)
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3058:32: warning: no visible global function definition for ‘.ddg.close.last.command.node’
  if (execute && !inside.func) .ddg.close.last.command.node(environ, initial=TRUE)
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3058:77: style: Put spaces around all infix operators.
  if (execute && !inside.func) .ddg.close.last.command.node(environ, initial=TRUE)
                                                                           ~^~
./R/RDataTracker.R:3063:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.init() && named.node.set && !inside.func) {
      ^~~~~~~~~~~~
./R/RDataTracker.R:3063:25: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.init() && named.node.set && !inside.func) {
                        ^~~~~~~~~~~~~~
./R/RDataTracker.R:3064:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.add.abstract.node("Finish", node.name = node.name, env=environ)
      ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3064:7: warning: no visible global function definition for ‘.ddg.add.abstract.node’
      .ddg.add.abstract.node("Finish", node.name = node.name, env=environ)
      ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3064:66: style: Put spaces around all infix operators.
      .ddg.add.abstract.node("Finish", node.name = node.name, env=environ)
                                                                ~^~
./R/RDataTracker.R:3071:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set(".ddg.possible.last.cmd", .ddg.last.cmd)
    ^~~~~~~~
./R/RDataTracker.R:3071:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set(".ddg.possible.last.cmd", .ddg.last.cmd)
    ^~~~~~~~
./R/RDataTracker.R:3071:40: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set(".ddg.possible.last.cmd", .ddg.last.cmd)
                                       ^~~~~~~~~~~~~
./R/RDataTracker.R:3072:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set(".ddg.last.cmd", .ddg.last.cmd)
    ^~~~~~~~
./R/RDataTracker.R:3072:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set(".ddg.last.cmd", .ddg.last.cmd)
    ^~~~~~~~
./R/RDataTracker.R:3072:31: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set(".ddg.last.cmd", .ddg.last.cmd)
                              ^~~~~~~~~~~~~
./R/RDataTracker.R:3073:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.open.new.command.node(environ)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3073:5: warning: no visible global function definition for ‘.ddg.open.new.command.node’
    .ddg.open.new.command.node(environ)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3077:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.init() && !.ddg.is.sourced()) .ddg.write.timestamp.to.history()
      ^~~~~~~~~~~~
./R/RDataTracker.R:3077:7: warning: no visible global function definition for ‘.ddg.is.init’
  if (.ddg.is.init() && !.ddg.is.sourced()) .ddg.write.timestamp.to.history()
      ^~~~~~~~~~~~
./R/RDataTracker.R:3077:26: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.init() && !.ddg.is.sourced()) .ddg.write.timestamp.to.history()
                         ^~~~~~~~~~~~~~~
./R/RDataTracker.R:3077:26: warning: no visible global function definition for ‘.ddg.is.sourced’
  if (.ddg.is.init() && !.ddg.is.sourced()) .ddg.write.timestamp.to.history()
                         ^~~~~~~~~~~~~~~
./R/RDataTracker.R:3077:45: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.init() && !.ddg.is.sourced()) .ddg.write.timestamp.to.history()
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3077:45: style: Variable and function names should not be longer than 30 characters.
  if (.ddg.is.init() && !.ddg.is.sourced()) .ddg.write.timestamp.to.history()
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3077:45: warning: no visible global function definition for ‘.ddg.write.timestamp.to.history’
  if (.ddg.is.init() && !.ddg.is.sourced()) .ddg.write.timestamp.to.history()
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3084:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.console.node <- function() {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3087:5: style: Place a space before left parenthesis, except in a function call.
  if(.ddg.enable.source()) return(NULL)
    ^
./R/RDataTracker.R:3087:6: style: Words within variable and function names should be separated by '_' rather than '.'.
  if(.ddg.enable.source()) return(NULL)
     ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3087:6: warning: no visible global function definition for ‘.ddg.enable.source’
  if(.ddg.enable.source()) return(NULL)
     ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3089:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.history.file=.ddg.get(".ddg.history.file")
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3089:19: style: Use <-, not =, for assignment.
  ddg.history.file=.ddg.get(".ddg.history.file")
                  ^
./R/RDataTracker.R:3089:19: style: Put spaces around all infix operators.
  ddg.history.file=.ddg.get(".ddg.history.file")
                 ~^~
./R/RDataTracker.R:3089:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.history.file=.ddg.get(".ddg.history.file")
                   ^~~~~~~~
./R/RDataTracker.R:3089:20: warning: no visible global function definition for ‘.ddg.get’
  ddg.history.file=.ddg.get(".ddg.history.file")
                   ^~~~~~~~
./R/RDataTracker.R:3090:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.history.timestamp=.ddg.get(".ddg.history.timestamp")
  ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3090:24: style: Use <-, not =, for assignment.
  ddg.history.timestamp=.ddg.get(".ddg.history.timestamp")
                       ^
./R/RDataTracker.R:3090:24: style: Put spaces around all infix operators.
  ddg.history.timestamp=.ddg.get(".ddg.history.timestamp")
                      ~^~
./R/RDataTracker.R:3090:25: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.history.timestamp=.ddg.get(".ddg.history.timestamp")
                        ^~~~~~~~
./R/RDataTracker.R:3090:25: warning: no visible global function definition for ‘.ddg.get’
  ddg.history.timestamp=.ddg.get(".ddg.history.timestamp")
                        ^~~~~~~~
./R/RDataTracker.R:3093:17: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!(is.null(ddg.history.file) || is.null(ddg.history.timestamp))) {
                ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3093:46: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!(is.null(ddg.history.file) || is.null(ddg.history.timestamp))) {
                                             ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3096:9: style: Opening curly braces should never go on their own line and should always be followed by a new line.
        {
        ^
./R/RDataTracker.R:3098:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.savehistory(ddg.history.file)
          ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3098:11: warning: no visible global function definition for ‘.ddg.savehistory’
          .ddg.savehistory(ddg.history.file)
          ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3098:28: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.savehistory(ddg.history.file)
                           ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3102:24: style: Words within variable and function names should be separated by '_' rather than '.'.
          new.lines <- .ddg.loadhistory(ddg.history.file,ddg.history.timestamp)
                       ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3102:24: warning: no visible global function definition for ‘.ddg.loadhistory’
          new.lines <- .ddg.loadhistory(ddg.history.file,ddg.history.timestamp)
                       ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3102:41: style: Words within variable and function names should be separated by '_' rather than '.'.
          new.lines <- .ddg.loadhistory(ddg.history.file,ddg.history.timestamp)
                                        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3102:58: style: Commas should always have a space after.
          new.lines <- .ddg.loadhistory(ddg.history.file,ddg.history.timestamp)
                                                         ^
./R/RDataTracker.R:3102:58: style: Words within variable and function names should be separated by '_' rather than '.'.
          new.lines <- .ddg.loadhistory(ddg.history.file,ddg.history.timestamp)
                                                         ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3105:30: style: Words within variable and function names should be separated by '_' rather than '.'.
          parsed.commands <- .ddg.parse.lines(new.lines)
                             ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3105:30: warning: no visible global function definition for ‘.ddg.parse.lines’
          parsed.commands <- .ddg.parse.lines(new.lines)
                             ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3109:12: style: Words within variable and function names should be separated by '_' rather than '.'.
           .ddg.parse.commands(parsed.commands,
           ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3111:29: style: Put spaces around all infix operators.
                run.commands=FALSE)
                           ~^~
./R/RDataTracker.R:3133:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.proc.node <- function(ptype, pname, pvalue="", console=FALSE,
^~~~~~~~~~~~~~
./R/RDataTracker.R:3134:41: style: Words within variable and function names should be separated by '_' rather than '.'.
    auto.created=FALSE, env = sys.frame(.ddg.get.frame.number(sys.calls())),
                                        ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3136:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) {
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:3137:12: style: Place a space before left parenthesis, except in a function call.
  	if (length(pname) > 1) {
           ^
./R/RDataTracker.R:3144:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.enable.console()) {
      ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3148:6: style: Commented code should be removed.
    #.ddg.auto.graphic.node()
     ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3150:22: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (!console && !.ddg.enable.source() && interactive()) {
                     ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3151:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.console.node()
      ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3151:7: warning: no visible global function definition for ‘.ddg.console.node’
      .ddg.console.node()
      ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3166:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.starts.open <- .ddg.get (".ddg.starts.open")
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3166:25: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.starts.open <- .ddg.get (".ddg.starts.open")
                        ^~~~~~~~
./R/RDataTracker.R:3166:25: warning: no visible global function definition for ‘.ddg.get’
    .ddg.starts.open <- .ddg.get (".ddg.starts.open")
                        ^~~~~~~~
./R/RDataTracker.R:3167:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.starts.open <- c(.ddg.starts.open, pname)
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3167:27: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.starts.open <- c(.ddg.starts.open, pname)
                          ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3168:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set (".ddg.starts.open", .ddg.starts.open)
    ^~~~~~~~
./R/RDataTracker.R:3168:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set (".ddg.starts.open", .ddg.starts.open)
    ^~~~~~~~
./R/RDataTracker.R:3168:35: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set (".ddg.starts.open", .ddg.starts.open)
                                  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3171:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.starts.open <- .ddg.get (".ddg.starts.open")
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3171:25: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.starts.open <- .ddg.get (".ddg.starts.open")
                        ^~~~~~~~
./R/RDataTracker.R:3171:25: warning: no visible global function definition for ‘.ddg.get’
    .ddg.starts.open <- .ddg.get (".ddg.starts.open")
                        ^~~~~~~~
./R/RDataTracker.R:3172:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    num.starts.open <- length(.ddg.starts.open)
    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:3172:31: style: Words within variable and function names should be separated by '_' rather than '.'.
    num.starts.open <- length(.ddg.starts.open)
                              ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3173:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (num.starts.open > 0) {
        ^~~~~~~~~~~~~~~
./R/RDataTracker.R:3174:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      last.start.open <- .ddg.starts.open[num.starts.open]
      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:3174:26: style: Words within variable and function names should be separated by '_' rather than '.'.
      last.start.open <- .ddg.starts.open[num.starts.open]
                         ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3174:43: style: Words within variable and function names should be separated by '_' rather than '.'.
      last.start.open <- .ddg.starts.open[num.starts.open]
                                          ^~~~~~~~~~~~~~~
./R/RDataTracker.R:3175:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (num.starts.open > 1) {
          ^~~~~~~~~~~~~~~
./R/RDataTracker.R:3176:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.starts.open <- .ddg.starts.open[1:num.starts.open-1]
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3176:29: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.starts.open <- .ddg.starts.open[1:num.starts.open-1]
                            ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3176:48: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.starts.open <- .ddg.starts.open[1:num.starts.open-1]
                                               ^~~~~~~~~~~~~~~
./R/RDataTracker.R:3176:63: style: Put spaces around all infix operators.
        .ddg.starts.open <- .ddg.starts.open[1:num.starts.open-1]
                                                             ~^~
./R/RDataTracker.R:3179:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.starts.open <- vector()
        ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3181:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.set (".ddg.starts.open", .ddg.starts.open)
      ^~~~~~~~
./R/RDataTracker.R:3181:7: warning: no visible global function definition for ‘.ddg.set’
      .ddg.set (".ddg.starts.open", .ddg.starts.open)
      ^~~~~~~~
./R/RDataTracker.R:3181:37: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.set (".ddg.starts.open", .ddg.starts.open)
                                    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3182:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (last.start.open != pname) {
          ^~~~~~~~~~~~~~~
./R/RDataTracker.R:3183:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.insert.error.message("Start and finish nodes do not match")
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3183:9: warning: no visible global function definition for ‘.ddg.insert.error.message’
        .ddg.insert.error.message("Start and finish nodes do not match")
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3187:1: style: lines should not be more than 80 characters.
      .ddg.insert.error.message("Attempting to create a finish node when there are no open blocks")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3187:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.insert.error.message("Attempting to create a finish node when there are no open blocks")
      ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3187:7: warning: no visible global function definition for ‘.ddg.insert.error.message’
      .ddg.insert.error.message("Attempting to create a finish node when there are no open blocks")
      ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3190:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.last.proc.node.created", paste(ptype, pname))
  ^~~~~~~~
./R/RDataTracker.R:3190:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.last.proc.node.created", paste(ptype, pname))
  ^~~~~~~~
./R/RDataTracker.R:3192:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  ptime <- .ddg.elapsed.time()
           ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3192:12: warning: no visible global function definition for ‘.ddg.elapsed.time’
  ptime <- .ddg.elapsed.time()
           ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3195:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.record.proc(ptype, pname, pvalue, auto.created, ptime, snum, pos)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3195:3: warning: no visible global function definition for ‘.ddg.record.proc’
  .ddg.record.proc(ptype, pname, pvalue, auto.created, ptime, snum, pos)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3197:4: style: Commented code should be removed.
  #if (ptype == "Finish") print(sys.calls())
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3198:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) print(paste("proc.node:", ptype, pname))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:3198:7: warning: no visible global function definition for ‘.ddg.debug.lib’
  if (.ddg.debug.lib()) print(paste("proc.node:", ptype, pname))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:3206:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.replace.quotes <- function(str) {
^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3209:36: style: Put spaces around all infix operators.
  str <- paste("\"", str, "\"", sep="")
                                  ~^~
./R/RDataTracker.R:3223:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.convert.list.to.string <- function (dvalue) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3224:13: style: Words within variable and function names should be separated by '_' rather than '.'.
  values <- .ddg.replace.quotes(lapply(dvalue, .ddg.as.character))
            ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3224:13: warning: no visible global function definition for ‘.ddg.replace.quotes’
  values <- .ddg.replace.quotes(lapply(dvalue, .ddg.as.character))
            ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3224:48: style: Words within variable and function names should be separated by '_' rather than '.'.
  values <- .ddg.replace.quotes(lapply(dvalue, .ddg.as.character))
                                               ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3224:48: warning: no visible binding for global variable ‘.ddg.as.character’
  values <- .ddg.replace.quotes(lapply(dvalue, .ddg.as.character))
                                               ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3226:48: style: Put spaces around all infix operators.
  paste("[[", positions, "]]", values, collapse="\n")
                                              ~^~
./R/RDataTracker.R:3232:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.as.character <- function (value) {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3234:18: style: Put spaces around all infix operators.
            error=function(e) {capture.output(print(value))})
                ~^~
./R/RDataTracker.R:3234:31: style: Opening curly braces should never go on their own line and should always be followed by a new line.
            error=function(e) {capture.output(print(value))})
                              ^
./R/RDataTracker.R:3234:60: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
            error=function(e) {capture.output(print(value))})
                                                           ^
./R/RDataTracker.R:3247:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.data.node <- function(dtype, dname, dvalue, dscope, from.env=FALSE) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:3248:4: style: Commented code should be removed.
  #print(paste(".ddg.data.node: dname =", dname))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3249:4: style: Commented code should be removed.
  #print(paste(".ddg.data.node: dscope =", dscope))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3252:6: style: Commented code should be removed.
    #print(".ddg.data.node: is object")
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3254:9: style: Opening curly braces should never go on their own line and should always be followed by a new line.
        {
        ^
./R/RDataTracker.R:3255:1: style: lines should not be more than 80 characters.
          .ddg.snapshot.node (dname, "txt", dvalue, dscope=dscope, from.env=from.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3255:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.snapshot.node (dname, "txt", dvalue, dscope=dscope, from.env=from.env)
          ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3255:11: warning: no visible global function definition for ‘.ddg.snapshot.node’
          .ddg.snapshot.node (dname, "txt", dvalue, dscope=dscope, from.env=from.env)
          ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3255:59: style: Put spaces around all infix operators.
          .ddg.snapshot.node (dname, "txt", dvalue, dscope=dscope, from.env=from.env)
                                                         ~^~
./R/RDataTracker.R:3255:76: style: Put spaces around all infix operators.
          .ddg.snapshot.node (dname, "txt", dvalue, dscope=dscope, from.env=from.env)
                                                                          ~^~
./R/RDataTracker.R:3259:1: style: lines should not be more than 80 characters.
          error.msg <- paste("Unable to create snapshot node for", dname, "Details:", e)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3260:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.insert.error.message(error.msg)
          ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3260:11: warning: no visible global function definition for ‘.ddg.insert.error.message’
          .ddg.insert.error.message(error.msg)
          ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3261:1: style: lines should not be more than 80 characters.
          return (.ddg.data.node (dtype, dname, "complex", dscope, from.env=from.env))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3261:19: style: Words within variable and function names should be separated by '_' rather than '.'.
          return (.ddg.data.node (dtype, dname, "complex", dscope, from.env=from.env))
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3261:76: style: Put spaces around all infix operators.
          return (.ddg.data.node (dtype, dname, "complex", dscope, from.env=from.env))
                                                                          ~^~
./R/RDataTracker.R:3268:6: style: Commented code should be removed.
    #print(".ddg.data.node: saving as csv")
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3269:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.snapshot.node (dname, "csv", dvalue, dscope=dscope, from.env=from.env)
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3269:5: warning: no visible global function definition for ‘.ddg.snapshot.node’
    .ddg.snapshot.node (dname, "csv", dvalue, dscope=dscope, from.env=from.env)
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3269:53: style: Put spaces around all infix operators.
    .ddg.snapshot.node (dname, "csv", dvalue, dscope=dscope, from.env=from.env)
                                                   ~^~
./R/RDataTracker.R:3269:70: style: Put spaces around all infix operators.
    .ddg.snapshot.node (dname, "csv", dvalue, dscope=dscope, from.env=from.env)
                                                                    ~^~
./R/RDataTracker.R:3277:13: style: Opening curly braces should never go on their own line and should always be followed by a new line.
            {
            ^
./R/RDataTracker.R:3278:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.convert.list.to.string(dvalue)
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3278:15: warning: no visible global function definition for ‘.ddg.convert.list.to.string’
              .ddg.convert.list.to.string(dvalue)
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3281:1: style: lines should not be more than 80 characters.
              error.msg <- paste("Unable to convert value of", dname, "to a string.")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3282:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.insert.error.message(error.msg)
              ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3282:15: warning: no visible global function definition for ‘.ddg.insert.error.message’
              .ddg.insert.error.message(error.msg)
              ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3289:24: style: Words within variable and function names should be separated by '_' rather than '.'.
        tryCatch(paste(.ddg.replace.quotes(dvalue), collapse=","),
                       ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3289:61: style: Put spaces around all infix operators.
        tryCatch(paste(.ddg.replace.quotes(dvalue), collapse=","),
                                                           ~^~
./R/RDataTracker.R:3290:33: style: Opening curly braces should never go on their own line and should always be followed by a new line.
            error = function(e) {"complex"})
                                ^
./R/RDataTracker.R:3290:43: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
            error = function(e) {"complex"})
                                          ^
./R/RDataTracker.R:3298:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.replace.quotes(dvalue)
        ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3298:9: warning: no visible global function definition for ‘.ddg.replace.quotes’
        .ddg.replace.quotes(dvalue)
        ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3301:4: style: Commented code should be removed.
  #print(".ddg.data.node: converted value to string")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3305:6: style: Commented code should be removed.
    #print(".ddg.data.node: saving as snapshot")
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3308:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.snapshot.node (dname, "txt", val, from.env=from.env)
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3308:5: warning: no visible global function definition for ‘.ddg.snapshot.node’
    .ddg.snapshot.node (dname, "txt", val, from.env=from.env)
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3308:52: style: Put spaces around all infix operators.
    .ddg.snapshot.node (dname, "txt", val, from.env=from.env)
                                                  ~^~
./R/RDataTracker.R:3313:6: style: Commented code should be removed.
    #print(".ddg.data.node: recording data")
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3316:36: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:3316:36: warning: no visible global function definition for ‘.ddg.get.scope’
    if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:3319:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.record.data(dtype, dname, val, dscope, from.env=from.env)
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3319:5: warning: no visible global function definition for ‘.ddg.record.data’
    .ddg.record.data(dtype, dname, val, dscope, from.env=from.env)
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3319:57: style: Put spaces around all infix operators.
    .ddg.record.data(dtype, dname, val, dscope, from.env=from.env)
                                                       ~^~
./R/RDataTracker.R:3321:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.debug.lib()) print(paste("data.node:", dtype, dname))
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:3321:9: warning: no visible global function definition for ‘.ddg.debug.lib’
    if (.ddg.debug.lib()) print(paste("data.node:", dtype, dname))
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:3334:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.supported.graphic <- function(ext){
^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3343:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.graphic.snapshot <-function(fext, dpfile) {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3343:23: style: Put spaces around all infix operators.
.ddg.graphic.snapshot <-function(fext, dpfile) {
                      ^~~
./R/RDataTracker.R:3345:12: style: Place a space before left parenthesis, except in a function call.
	if (fext == "pdf") dev.copy2pdf(file=dpfile)
           ^
./R/RDataTracker.R:3345:18: style: Put spaces around all infix operators.
	if (fext == "pdf") dev.copy2pdf(file=dpfile)
                ~^
./R/RDataTracker.R:3345:45: style: Put spaces around all infix operators.
	if (fext == "pdf") dev.copy2pdf(file=dpfile)
                                           ~^~
./R/RDataTracker.R:3351:22: style: Use <-, not =, for assignment.
		fext = ifelse(fext == "jpg", "jpeg", fext)
                     ^
./R/RDataTracker.R:3351:22: style: Put spaces around all infix operators.
		fext = ifelse(fext == "jpg", "jpeg", fext)
                     ^~
./R/RDataTracker.R:3351:36: style: Put spaces around all infix operators.
		fext = ifelse(fext == "jpg", "jpeg", fext)
                                  ~^~~
./R/RDataTracker.R:3355:17: style: Variable and function names should be all lowercase.
		strFun <- paste(fext, "(filename=dpfile, width=800, height=500)", sep="")
                ^~~~~~
./R/RDataTracker.R:3355:24: style: Put spaces around all infix operators.
		strFun <- paste(fext, "(filename=dpfile, width=800, height=500)", sep="")
                      ~^~~
./R/RDataTracker.R:3356:17: style: Variable and function names should be all lowercase.
		parseFun <- function(){eval(parse(text=strFun))}
                ^~~~~~~~
./R/RDataTracker.R:3356:26: style: Put spaces around all infix operators.
		parseFun <- function(){eval(parse(text=strFun))}
                        ~^~~
./R/RDataTracker.R:3356:39: style: Opening curly braces should never go on their own line and should always be followed by a new line.
		parseFun <- function(){eval(parse(text=strFun))}
                                      ^
./R/RDataTracker.R:3356:56: style: Variable and function names should be all lowercase.
		parseFun <- function(){eval(parse(text=strFun))}
                                                       ^~~~~~
./R/RDataTracker.R:3356:64: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
		parseFun <- function(){eval(parse(text=strFun))}
                                                               ^
./R/RDataTracker.R:3357:26: style: Variable and function names should be all lowercase.
		dev.copy(parseFun)
                         ^~~~~~~~
./R/RDataTracker.R:3384:1: style: lines should not be more than 80 characters.
.ddg.snapshot.node <- function(dname, fext, data, save.object = FALSE, dscope=NULL, from.env=FALSE) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3384:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.snapshot.node <- function(dname, fext, data, save.object = FALSE, dscope=NULL, from.env=FALSE) {
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3386:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  max.snapshot.size <- ddg.max.snapshot.size()
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3386:24: style: Words within variable and function names should be separated by '_' rather than '.'.
  max.snapshot.size <- ddg.max.snapshot.size()
                       ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3386:24: warning: no visible global function definition for ‘ddg.max.snapshot.size’
  max.snapshot.size <- ddg.max.snapshot.size()
                       ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3388:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (max.snapshot.size == 0) {
      ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3389:12: style: Words within variable and function names should be separated by '_' rather than '.'.
    return(.ddg.data.node ("Data", dname, "", dscope, from.env=from.env))
           ^~~~~~~~~~~~~~
./R/RDataTracker.R:3389:12: warning: no visible global function definition for ‘.ddg.data.node’
    return(.ddg.data.node ("Data", dname, "", dscope, from.env=from.env))
           ^~~~~~~~~~~~~~
./R/RDataTracker.R:3389:63: style: Put spaces around all infix operators.
    return(.ddg.data.node ("Data", dname, "", dscope, from.env=from.env))
                                                             ~^~
./R/RDataTracker.R:3393:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (max.snapshot.size == -1 || object.size(data) < max.snapshot.size * 1024) {
      ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3393:54: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (max.snapshot.size == -1 || object.size(data) < max.snapshot.size * 1024) {
                                                     ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3408:5: style: Variable and function names should be all lowercase.
    envHeader <- paste0 ("<environemnt: ", environmentName (data), ">")
    ^~~~~~~~~
./R/RDataTracker.R:3409:16: style: Variable and function names should be all lowercase.
    data <- c (envHeader, ls(data), recursive=TRUE)
               ^~~~~~~~~
./R/RDataTracker.R:3409:46: style: Put spaces around all infix operators.
    data <- c (envHeader, ls(data), recursive=TRUE)
                                            ~^~
./R/RDataTracker.R:3416:1: style: lines should not be more than 80 characters.
  else if (is.data.frame(data) || is.matrix(data) || is.array(data) || is.list(data)) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3418:27: style: Put spaces around all infix operators.
      data <- head(data, n=10*max.snapshot.size)
                         ~^~
./R/RDataTracker.R:3418:30: style: Put spaces around all infix operators.
      data <- head(data, n=10*max.snapshot.size)
                            ~^~
./R/RDataTracker.R:3418:31: style: Words within variable and function names should be separated by '_' rather than '.'.
      data <- head(data, n=10*max.snapshot.size)
                              ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3419:47: style: Put spaces around all infix operators.
      snapname <- paste(dname, "-PARTIAL", sep="")
                                             ~^~
./R/RDataTracker.R:3427:14: style: Commented code should be removed.
            #data <- capture.output(str(data));
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3428:14: style: Commented code should be removed.
            #print(paste(".ddg.snapshot.node: generating summary for", dname))
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3435:1: style: lines should not be more than 80 characters.
      if (fext == "" || is.null(fext)) paste(.ddg.dnum()+1, "-", snapname, sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3435:46: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (fext == "" || is.null(fext)) paste(.ddg.dnum()+1, "-", snapname, sep="")
                                             ^~~~~~~~~
./R/RDataTracker.R:3435:57: style: Put spaces around all infix operators.
      if (fext == "" || is.null(fext)) paste(.ddg.dnum()+1, "-", snapname, sep="")
                                                       ~^~
./R/RDataTracker.R:3435:79: style: Put spaces around all infix operators.
      if (fext == "" || is.null(fext)) paste(.ddg.dnum()+1, "-", snapname, sep="")
                                                                             ~^~
./R/RDataTracker.R:3436:18: style: Words within variable and function names should be separated by '_' rather than '.'.
      else paste(.ddg.dnum()+1, "-", snapname, ".", fext, sep="")
                 ^~~~~~~~~
./R/RDataTracker.R:3436:29: style: Put spaces around all infix operators.
      else paste(.ddg.dnum()+1, "-", snapname, ".", fext, sep="")
                           ~^~
./R/RDataTracker.R:3436:62: style: Put spaces around all infix operators.
      else paste(.ddg.dnum()+1, "-", snapname, ".", fext, sep="")
                                                            ~^~
./R/RDataTracker.R:3439:19: style: Words within variable and function names should be separated by '_' rather than '.'.
  dpfile <- paste(.ddg.path.data(), "/", dfile, sep="")
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3439:19: warning: no visible global function definition for ‘.ddg.path.data’
  dpfile <- paste(.ddg.path.data(), "/", dfile, sep="")
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3439:52: style: Put spaces around all infix operators.
  dpfile <- paste(.ddg.path.data(), "/", dfile, sep="")
                                                  ~^~
./R/RDataTracker.R:3440:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) print(paste("Saving snapshot in ", dpfile))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:3440:7: warning: no visible global function definition for ‘.ddg.debug.lib’
  if (.ddg.debug.lib()) print(paste("Saving snapshot in ", dpfile))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:3443:55: style: Put spaces around all infix operators.
  if (fext == "csv") write.csv(data, dpfile, row.names=FALSE)
                                                     ~^~
./R/RDataTracker.R:3445:27: style: Variable and function names should be all lowercase.
  else if (fext == "xml") saveXML (data, dpfile)
                          ^~~~~~~
./R/RDataTracker.R:3448:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  else if (.ddg.supported.graphic(fext)) .ddg.graphic.snapshot(fext, dpfile)
           ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3448:42: style: Words within variable and function names should be separated by '_' rather than '.'.
  else if (.ddg.supported.graphic(fext)) .ddg.graphic.snapshot(fext, dpfile)
                                         ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3451:1: style: lines should not be more than 80 characters.
  else if (fext == "RData") file.rename(paste(.ddg.path.data(), "/", dname, sep=""), dpfile)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3451:47: style: Words within variable and function names should be separated by '_' rather than '.'.
  else if (fext == "RData") file.rename(paste(.ddg.path.data(), "/", dname, sep=""), dpfile)
                                              ^~~~~~~~~~~~~~
./R/RDataTracker.R:3451:80: style: Put spaces around all infix operators.
  else if (fext == "RData") file.rename(paste(.ddg.path.data(), "/", dname, sep=""), dpfile)
                                                                              ~^~
./R/RDataTracker.R:3455:37: style: Put spaces around all infix operators.
    file.create(dpfile, showWarnings=FALSE)
                                   ~^~
./R/RDataTracker.R:3457:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      list.as.string <- .ddg.convert.list.to.string(data)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:3457:25: style: Words within variable and function names should be separated by '_' rather than '.'.
      list.as.string <- .ddg.convert.list.to.string(data)
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3457:25: warning: no visible global function definition for ‘.ddg.convert.list.to.string’
      list.as.string <- .ddg.convert.list.to.string(data)
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3458:13: style: Words within variable and function names should be separated by '_' rather than '.'.
      write(list.as.string, dpfile)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3463:38: style: Put spaces around all infix operators.
            capture.output(data, file=dpfile)
                                    ~^~
./R/RDataTracker.R:3471:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.insert.error.message(error.msg)
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3471:5: warning: no visible global function definition for ‘.ddg.insert.error.message’
    .ddg.insert.error.message(error.msg)
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3476:1: style: lines should not be more than 80 characters.
  if (save.object && full.snapshot) save(data, file = paste(.ddg.path.data(), "/", .ddg.dnum()+1, "-", snapname, ".RObject", sep=""), ascii = TRUE)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3476:61: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (save.object && full.snapshot) save(data, file = paste(.ddg.path.data(), "/", .ddg.dnum()+1, "-", snapname, ".RObject", sep=""), ascii = TRUE)
                                                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3476:61: warning: no visible global function definition for ‘.ddg.path.data’
  if (save.object && full.snapshot) save(data, file = paste(.ddg.path.data(), "/", .ddg.dnum()+1, "-", snapname, ".RObject", sep=""), ascii = TRUE)
                                                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3476:84: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (save.object && full.snapshot) save(data, file = paste(.ddg.path.data(), "/", .ddg.dnum()+1, "-", snapname, ".RObject", sep=""), ascii = TRUE)
                                                                                   ^~~~~~~~~
./R/RDataTracker.R:3476:84: warning: no visible global function definition for ‘.ddg.dnum’
  if (save.object && full.snapshot) save(data, file = paste(.ddg.path.data(), "/", .ddg.dnum()+1, "-", snapname, ".RObject", sep=""), ascii = TRUE)
                                                                                   ^~~~~~~~~
./R/RDataTracker.R:3476:95: style: Put spaces around all infix operators.
  if (save.object && full.snapshot) save(data, file = paste(.ddg.path.data(), "/", .ddg.dnum()+1, "-", snapname, ".RObject", sep=""), ascii = TRUE)
                                                                                             ~^~
./R/RDataTracker.R:3476:129: style: Put spaces around all infix operators.
  if (save.object && full.snapshot) save(data, file = paste(.ddg.path.data(), "/", .ddg.dnum()+1, "-", snapname, ".RObject", sep=""), ascii = TRUE)
                                                                                                                               ~^~
./R/RDataTracker.R:3478:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  dtime <- .ddg.timestamp()
           ^~~~~~~~~~~~~~
./R/RDataTracker.R:3478:12: warning: no visible global function definition for ‘.ddg.timestamp’
  dtime <- .ddg.timestamp()
           ^~~~~~~~~~~~~~
./R/RDataTracker.R:3481:34: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:3481:34: warning: no visible global function definition for ‘.ddg.get.scope’
  if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:3484:1: style: lines should not be more than 80 characters.
  .ddg.record.data(dtype, dname, paste(.ddg.data.dir(), dfile, sep="/"), dscope, from.env=from.env, dtime)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3484:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.record.data(dtype, dname, paste(.ddg.data.dir(), dfile, sep="/"), dscope, from.env=from.env, dtime)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3484:3: warning: no visible global function definition for ‘.ddg.record.data’
  .ddg.record.data(dtype, dname, paste(.ddg.data.dir(), dfile, sep="/"), dscope, from.env=from.env, dtime)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3484:40: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.record.data(dtype, dname, paste(.ddg.data.dir(), dfile, sep="/"), dscope, from.env=from.env, dtime)
                                       ^~~~~~~~~~~~~
./R/RDataTracker.R:3484:40: warning: no visible global function definition for ‘.ddg.data.dir’
  .ddg.record.data(dtype, dname, paste(.ddg.data.dir(), dfile, sep="/"), dscope, from.env=from.env, dtime)
                                       ^~~~~~~~~~~~~
./R/RDataTracker.R:3484:67: style: Put spaces around all infix operators.
  .ddg.record.data(dtype, dname, paste(.ddg.data.dir(), dfile, sep="/"), dscope, from.env=from.env, dtime)
                                                                 ~^~
./R/RDataTracker.R:3484:90: style: Put spaces around all infix operators.
  .ddg.record.data(dtype, dname, paste(.ddg.data.dir(), dfile, sep="/"), dscope, from.env=from.env, dtime)
                                                                                        ~^~
./R/RDataTracker.R:3486:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) print(paste("snapshot.node: ", dname))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:3486:7: warning: no visible global function definition for ‘.ddg.debug.lib’
  if (.ddg.debug.lib()) print(paste("snapshot.node: ", dname))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:3500:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.file.node <- function(dtype, fname, dname, dscope=NULL) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:3502:19: style: Put spaces around all infix operators.
	file.name <- basename(fname)
                 ~^~~
./R/RDataTracker.R:3503:18: style: Put spaces around all infix operators.
	file.loc <- normalizePath(fname, winslash="/", mustWork = FALSE)
                ~^~~
./R/RDataTracker.R:3503:50: style: Put spaces around all infix operators.
	file.loc <- normalizePath(fname, winslash="/", mustWork = FALSE)
                                                ~^~
./R/RDataTracker.R:3503:65: style: Put spaces around all infix operators.
	file.loc <- normalizePath(fname, winslash="/", mustWork = FALSE)
                                                               ~^~
./R/RDataTracker.R:3506:20: style: Place a space before left parenthesis, except in a function call.
		if (dtype == "File") paste(" Location=\"", file.loc, "\"", sep="")
                   ^
./R/RDataTracker.R:3506:27: style: Put spaces around all infix operators.
		if (dtype == "File") paste(" Location=\"", file.loc, "\"", sep="")
                         ~^~~
./R/RDataTracker.R:3510:15: style: Put spaces around all infix operators.
	dfile <- paste(.ddg.dnum()+1, "-", file.name, sep="")
             ~^~~
./R/RDataTracker.R:3510:17: warning: no visible global function definition for ‘.ddg.dnum’
	dfile <- paste(.ddg.dnum()+1, "-", file.name, sep="")
                ^~~~~~~~~
./R/RDataTracker.R:3510:24: style: Words within variable and function names should be separated by '_' rather than '.'.
	dfile <- paste(.ddg.dnum()+1, "-", file.name, sep="")
                       ^~~~~~~~~
./R/RDataTracker.R:3510:35: style: Put spaces around all infix operators.
	dfile <- paste(.ddg.dnum()+1, "-", file.name, sep="")
                                 ~^
./R/RDataTracker.R:3514:19: style: Words within variable and function names should be separated by '_' rather than '.'.
  dpfile <- paste(.ddg.data.dir(), dfile, sep="/")
                  ^~~~~~~~~~~~~
./R/RDataTracker.R:3514:19: warning: no visible global function definition for ‘.ddg.data.dir’
  dpfile <- paste(.ddg.data.dir(), dfile, sep="/")
                  ^~~~~~~~~~~~~
./R/RDataTracker.R:3514:46: style: Put spaces around all infix operators.
  dpfile <- paste(.ddg.data.dir(), dfile, sep="/")
                                            ~^~
./R/RDataTracker.R:3515:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:3516:11: warning: no visible global function definition for ‘.ddg.timestamp’
	dtime <- .ddg.timestamp()
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3516:15: style: Put spaces around all infix operators.
	dtime <- .ddg.timestamp()
             ~^~~
./R/RDataTracker.R:3516:18: style: Words within variable and function names should be separated by '_' rather than '.'.
	dtime <- .ddg.timestamp()
                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:3519:12: style: Place a space before left parenthesis, except in a function call.
	if (is.null(dname)) dname <- file.name
           ^
./R/RDataTracker.R:3519:35: style: Put spaces around all infix operators.
	if (is.null(dname)) dname <- file.name
                                 ~^~~
./R/RDataTracker.R:3522:12: style: Place a space before left parenthesis, except in a function call.
	if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
           ^
./R/RDataTracker.R:3522:33: warning: no visible global function definition for ‘.ddg.get.scope’
	if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                ^~~~~~~~~~~~~~
./R/RDataTracker.R:3522:37: style: Put spaces around all infix operators.
	if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                   ~^~~
./R/RDataTracker.R:3522:40: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (is.null(dscope)) dscope <- .ddg.get.scope(dname)
                                       ^~~~~~~~~~~~~~
./R/RDataTracker.R:3525:18: style: Put spaces around all infix operators.
	from.env <- FALSE
                ~^~~
./R/RDataTracker.R:3528:1: style: lines should not be more than 80 characters.
  .ddg.record.data(dtype, dname, dpfile, dscope, from.env=from.env, dtime, file.loc)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3528:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.record.data(dtype, dname, dpfile, dscope, from.env=from.env, dtime, file.loc)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3528:3: warning: no visible global function definition for ‘.ddg.record.data’
  .ddg.record.data(dtype, dname, dpfile, dscope, from.env=from.env, dtime, file.loc)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3528:58: style: Put spaces around all infix operators.
  .ddg.record.data(dtype, dname, dpfile, dscope, from.env=from.env, dtime, file.loc)
                                                        ~^~
./R/RDataTracker.R:3531:18: style: Words within variable and function names should be separated by '_' rather than '.'.
  dpath <- paste(.ddg.path.data(), "/", dfile, sep="")
                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:3531:18: warning: no visible global function definition for ‘.ddg.path.data’
  dpath <- paste(.ddg.path.data(), "/", dfile, sep="")
                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:3531:51: style: Put spaces around all infix operators.
  dpath <- paste(.ddg.path.data(), "/", dfile, sep="")
                                                 ~^~
./R/RDataTracker.R:3544:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.file.copy <- function(dtype, fname, dname, dscope) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:3546:18: style: Put spaces around all infix operators.
	file.loc <- normalizePath(fname, winslash="/", mustWork = FALSE)
                ~^~~
./R/RDataTracker.R:3546:50: style: Put spaces around all infix operators.
	file.loc <- normalizePath(fname, winslash="/", mustWork = FALSE)
                                                ~^~
./R/RDataTracker.R:3546:65: style: Put spaces around all infix operators.
	file.loc <- normalizePath(fname, winslash="/", mustWork = FALSE)
                                                               ~^~
./R/RDataTracker.R:3549:12: style: Place a space before left parenthesis, except in a function call.
	if (file.exists(file.loc)) {
           ^
./R/RDataTracker.R:3551:18: warning: no visible global function definition for ‘.ddg.file.node’
	  dpfile.out <- .ddg.file.node(dtype,fname,dname, dscope)
                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:3551:22: style: Put spaces around all infix operators.
	  dpfile.out <- .ddg.file.node(dtype,fname,dname, dscope)
                    ~^~~
./R/RDataTracker.R:3551:25: style: Words within variable and function names should be separated by '_' rather than '.'.
	  dpfile.out <- .ddg.file.node(dtype,fname,dname, dscope)
                        ^~~~~~~~~~~~~~
./R/RDataTracker.R:3552:46: style: Put spaces around all infix operators.
    file.copy(file.loc, dpfile.out, overwrite=TRUE)
                                            ~^~
./R/RDataTracker.R:3556:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.insert.error.message(error.msg)
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3556:5: warning: no visible global function definition for ‘.ddg.insert.error.message’
    .ddg.insert.error.message(error.msg)
    ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3560:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) print(paste("file.copy: ", dtype, " ", file.loc))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:3560:7: warning: no visible global function definition for ‘.ddg.debug.lib’
  if (.ddg.debug.lib()) print(paste("file.copy: ", dtype, " ", file.loc))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:3574:1: style: lines should not be more than 80 characters.
.ddg.insert.error.message <- function(msg, msg.type="error.msg", scope="ddg.library", doWarn = TRUE) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3574:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.insert.error.message <- function(msg, msg.type="error.msg", scope="ddg.library", doWarn = TRUE) {
^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3574:87: style: Variable and function names should be all lowercase.
.ddg.insert.error.message <- function(msg, msg.type="error.msg", scope="ddg.library", doWarn = TRUE) {
                                                                                      ^~~~~~
./R/RDataTracker.R:3575:7: style: Variable and function names should be all lowercase.
  if (doWarn) {
      ^~~~~~
./R/RDataTracker.R:3578:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.data.node("Exception", msg.type, msg, scope)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3578:3: warning: no visible global function definition for ‘.ddg.data.node’
  .ddg.data.node("Exception", msg.type, msg, scope)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3579:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.lastproc2data(msg.type, dscope=scope)
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3579:3: warning: no visible global function definition for ‘.ddg.lastproc2data’
  .ddg.lastproc2data(msg.type, dscope=scope)
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3579:38: style: Put spaces around all infix operators.
  .ddg.lastproc2data(msg.type, dscope=scope)
                                    ~^~
./R/RDataTracker.R:3590:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.lookup.function.name <- gtools::defmacro (pname,
^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3594:12: style: Commented code should be removed.
          #print(".ddg.lookup.function.name: pname is null")
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3595:12: style: Commented code should be removed.
          #print(".ddg.lookup.function.name: sys.calls() =")
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3596:12: style: Commented code should be removed.
          #print(sys.calls())
           ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3604:13: style: Commented code should be removed.
          # pname <- strsplit (as.character(call), "\\(")[[1]][1]
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3605:1: style: lines should not be more than 80 characters.
          #print(paste(".ddg.lookup.function.name: typeof(call[[1]] =", typeof(call[[1]])))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3605:12: style: Commented code should be removed.
          #print(paste(".ddg.lookup.function.name: typeof(call[[1]] =", typeof(call[[1]])))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3606:1: style: lines should not be more than 80 characters.
          #print(paste(".ddg.lookup.function.name: str(call[[1]] =", str(call[[1]])))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3606:12: style: Commented code should be removed.
          #print(paste(".ddg.lookup.function.name: str(call[[1]] =", str(call[[1]])))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3610:14: style: Commented code should be removed.
            #print(".ddg.lookup.function.name:  Found a closure!")
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3620:12: style: Commented code should be removed.
          #print(paste(".ddg.lookup.function.name: pname is string ", pname))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3624:1: style: lines should not be more than 80 characters.
        #  print(paste(".ddg.lookup.function.name: pname is NOT a string ", pname))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3624:12: style: Commented code should be removed.
        #  print(paste(".ddg.lookup.function.name: pname is NOT a string ", pname))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3644:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.lookup.value <- gtools::defmacro(expr, value, env, procname, warn=TRUE,
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3644:71: style: Put spaces around all infix operators.
.ddg.lookup.value <- gtools::defmacro(expr, value, env, procname, warn=TRUE,
                                                                     ~^~
./R/RDataTracker.R:3650:69: style: Opening curly braces should never go on their own line and should always be followed by a new line.
						error = function(e) {})
                                                                    ^
./R/RDataTracker.R:3650:70: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
						error = function(e) {})
                                                                     ^
./R/RDataTracker.R:3656:11: style: Commented code should be removed.
								# if (is.character(expr)) return (expr)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3658:1: style: lines should not be more than 80 characters.
                  error.msg <- paste("Unable to evaluate", expr, "in call to", procname)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3659:19: style: Words within variable and function names should be separated by '_' rather than '.'.
                  .ddg.insert.error.message(error.msg)
                  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3671:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.delete.temp <- function() {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:3673:6: warning: no visible global function definition for ‘.ddg.is.set’
	if (.ddg.is.set('ddg.history.file')) unlink(.ddg.get('ddg.history.file'))
     ^~~~~~~~~~~
./R/RDataTracker.R:3673:12: style: Place a space before left parenthesis, except in a function call.
	if (.ddg.is.set('ddg.history.file')) unlink(.ddg.get('ddg.history.file'))
           ^
./R/RDataTracker.R:3673:13: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (.ddg.is.set('ddg.history.file')) unlink(.ddg.get('ddg.history.file'))
            ^~~~~~~~~~~
./R/RDataTracker.R:3673:25: style: Only use double-quotes.
	if (.ddg.is.set('ddg.history.file')) unlink(.ddg.get('ddg.history.file'))
                        ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3673:46: warning: no visible global function definition for ‘.ddg.get’
	if (.ddg.is.set('ddg.history.file')) unlink(.ddg.get('ddg.history.file'))
                                             ^~~~~~~~
./R/RDataTracker.R:3673:53: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (.ddg.is.set('ddg.history.file')) unlink(.ddg.get('ddg.history.file'))
                                                    ^~~~~~~~
./R/RDataTracker.R:3673:62: style: Only use double-quotes.
	if (.ddg.is.set('ddg.history.file')) unlink(.ddg.get('ddg.history.file'))
                                                             ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3676:2: warning: local variable ‘.ddg.env’ assigned but may not be used
	.ddg.env <- new.env(parent=emptyenv())
 ^~~~~~~~
./R/RDataTracker.R:3676:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.env <- new.env(parent=emptyenv())
        ^~~~~~~~
./R/RDataTracker.R:3676:18: style: Put spaces around all infix operators.
	.ddg.env <- new.env(parent=emptyenv())
                ~^~~
./R/RDataTracker.R:3676:35: style: Put spaces around all infix operators.
	.ddg.env <- new.env(parent=emptyenv())
                                 ~^~
./R/RDataTracker.R:3697:1: style: lines should not be more than 80 characters.
.ddg.create.output.nodes<- function(fname, pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, env) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3697:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.output.nodes<- function(fname, pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, env) {
^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3697:25: style: Put spaces around all infix operators.
.ddg.create.output.nodes<- function(fname, pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, env) {
                       ~^
./R/RDataTracker.R:3703:1: style: lines should not be more than 80 characters.
    .ddg.write.graphic(name,"Graphical Plot. Not saved in script.",fext=gfext) # value is ignored
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3703:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.write.graphic(name,"Graphical Plot. Not saved in script.",fext=gfext) # value is ignored
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3703:5: warning: no visible global function definition for ‘.ddg.write.graphic’
    .ddg.write.graphic(name,"Graphical Plot. Not saved in script.",fext=gfext) # value is ignored
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3703:29: style: Commas should always have a space after.
    .ddg.write.graphic(name,"Graphical Plot. Not saved in script.",fext=gfext) # value is ignored
                            ^
./R/RDataTracker.R:3703:68: style: Commas should always have a space after.
    .ddg.write.graphic(name,"Graphical Plot. Not saved in script.",fext=gfext) # value is ignored
                                                                   ^
./R/RDataTracker.R:3703:72: style: Put spaces around all infix operators.
    .ddg.write.graphic(name,"Graphical Plot. Not saved in script.",fext=gfext) # value is ignored
                                                                      ~^~
./R/RDataTracker.R:3704:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.proc2data(pname,name)
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:3704:5: warning: no visible global function definition for ‘.ddg.proc2data’
    .ddg.proc2data(pname,name)
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:3704:26: style: Commas should always have a space after.
    .ddg.proc2data(pname,name)
                         ^
./R/RDataTracker.R:3713:7: style: Commented code should be removed.
    # scope <- .ddg.get.scope(outs.exception[[1]])
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3720:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
          ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3720:11: warning: no visible global function definition for ‘.ddg.lookup.value’
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
          ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3720:58: style: Put spaces around all infix operators.
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
                                                        ~^~
./R/RDataTracker.R:3723:20: style: Words within variable and function names should be separated by '_' rather than '.'.
          scope <- .ddg.get.scope(param, calls = stack)
                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:3723:20: warning: no visible global function definition for ‘.ddg.get.scope’
          scope <- .ddg.get.scope(param, calls = stack)
                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:3724:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.data.node("Exception", name, value, scope)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3724:11: warning: no visible global function definition for ‘.ddg.data.node’
          .ddg.data.node("Exception", name, value, scope)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3725:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.proc2data(pname, name, scope)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3725:11: warning: no visible global function definition for ‘.ddg.proc2data’
          .ddg.proc2data(pname, name, scope)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3734:7: style: Commented code should be removed.
    # scope <- .ddg.get.scope(outs.url[[1]])
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3741:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
          ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3741:11: warning: no visible global function definition for ‘.ddg.lookup.value’
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
          ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3741:58: style: Put spaces around all infix operators.
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
                                                        ~^~
./R/RDataTracker.R:3744:20: style: Words within variable and function names should be separated by '_' rather than '.'.
          scope <- .ddg.get.scope(param, calls=stack)
                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:3744:20: warning: no visible global function definition for ‘.ddg.get.scope’
          scope <- .ddg.get.scope(param, calls=stack)
                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:3744:47: style: Put spaces around all infix operators.
          scope <- .ddg.get.scope(param, calls=stack)
                                             ~^~
./R/RDataTracker.R:3745:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.data.node("URL", name, value, scope)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3745:11: warning: no visible global function definition for ‘.ddg.data.node’
          .ddg.data.node("URL", name, value, scope)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3746:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.proc2data(pname, name, scope)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3746:11: warning: no visible global function definition for ‘.ddg.proc2data’
          .ddg.proc2data(pname, name, scope)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3755:7: style: Commented code should be removed.
    # scope <- .ddg.get.scope(outs.data[[1]])
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3762:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
          ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3762:11: warning: no visible global function definition for ‘.ddg.lookup.value’
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
          ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3762:58: style: Put spaces around all infix operators.
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
                                                        ~^~
./R/RDataTracker.R:3766:17: style: Variable and function names should be all lowercase.
                envName <- environmentName(env)
                ^~~~~~~
./R/RDataTracker.R:3766:17: warning: local variable ‘envName’ assigned but may not be used
                envName <- environmentName(env)
                ^~~~~~~
./R/RDataTracker.R:3767:26: style: Words within variable and function names should be separated by '_' rather than '.'.
                scope <- .ddg.get.scope(param, calls=stack)
                         ^~~~~~~~~~~~~~
./R/RDataTracker.R:3767:26: warning: no visible global function definition for ‘.ddg.get.scope’
                scope <- .ddg.get.scope(param, calls=stack)
                         ^~~~~~~~~~~~~~
./R/RDataTracker.R:3767:53: style: Put spaces around all infix operators.
                scope <- .ddg.get.scope(param, calls=stack)
                                                   ~^~
./R/RDataTracker.R:3768:17: style: Words within variable and function names should be separated by '_' rather than '.'.
                .ddg.save.data(name, value, fname, error=TRUE, scope=scope)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:3768:17: warning: no visible global function definition for ‘.ddg.save.data’
                .ddg.save.data(name, value, fname, error=TRUE, scope=scope)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:3768:57: style: Put spaces around all infix operators.
                .ddg.save.data(name, value, fname, error=TRUE, scope=scope)
                                                       ~^~
./R/RDataTracker.R:3768:69: style: Put spaces around all infix operators.
                .ddg.save.data(name, value, fname, error=TRUE, scope=scope)
                                                                   ~^~
./R/RDataTracker.R:3769:17: style: Words within variable and function names should be separated by '_' rather than '.'.
                .ddg.proc2data(pname, name, scope)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:3769:17: warning: no visible global function definition for ‘.ddg.proc2data’
                .ddg.proc2data(pname, name, scope)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:3770:15: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
              }, error = function(e) {
              ^
./R/RDataTracker.R:3771:17: style: Words within variable and function names should be separated by '_' rather than '.'.
                .ddg.insert.error.message(e)
                ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3771:17: warning: no visible global function definition for ‘.ddg.insert.error.message’
                .ddg.insert.error.message(e)
                ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3781:7: style: Commented code should be removed.
    # scope <- .ddg.get.scope(outs.file[[1]])
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3789:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
          ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3789:11: warning: no visible global function definition for ‘.ddg.lookup.value’
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
          ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3789:58: style: Put spaces around all infix operators.
          .ddg.lookup.value(name, value, env, fname, warn=FALSE)
                                                        ~^~
./R/RDataTracker.R:3790:20: style: Words within variable and function names should be separated by '_' rather than '.'.
          scope <- .ddg.get.scope(param, calls=stack)
                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:3790:20: warning: no visible global function definition for ‘.ddg.get.scope’
          scope <- .ddg.get.scope(param, calls=stack)
                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:3790:47: style: Put spaces around all infix operators.
          scope <- .ddg.get.scope(param, calls=stack)
                                             ~^~
./R/RDataTracker.R:3794:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.file.copy("File", name, name, scope)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3794:13: warning: no visible global function definition for ‘.ddg.file.copy’
            .ddg.file.copy("File", name, name, scope)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3795:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.proc2data(pname, name, scope)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3795:13: warning: no visible global function definition for ‘.ddg.proc2data’
            .ddg.proc2data(pname, name, scope)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3799:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.file.copy("File", value, name, scope)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3799:13: warning: no visible global function definition for ‘.ddg.file.copy’
            .ddg.file.copy("File", value, name, scope)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3800:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.proc2data(pname, name, scope)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3800:13: warning: no visible global function definition for ‘.ddg.proc2data’
            .ddg.proc2data(pname, name, scope)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3817:1: style: lines should not be more than 80 characters.
.ddg.create.function.nodes <- function(pname, call, full.call, outs.graphic=NULL, outs.data=NULL, outs.exception=NULL, outs.url=NULL, outs.file=NULL, graphic.fext="jpeg", auto.created=FALSE, env=NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3817:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.function.nodes <- function(pname, call, full.call, outs.graphic=NULL, outs.data=NULL, outs.exception=NULL, outs.url=NULL, outs.file=NULL, graphic.fext="jpeg", auto.created=FALSE, env=NULL) {
^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3820:6: style: Commented code should be removed.
    #print(paste(".ddg.create.function.nodes: pname =", pname))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3821:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.abstract.node ("Start", node.name=pname, env=env)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3821:5: warning: no visible global function definition for ‘.ddg.add.abstract.node’
    .ddg.add.abstract.node ("Start", node.name=pname, env=env)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3821:47: style: Put spaces around all infix operators.
    .ddg.add.abstract.node ("Start", node.name=pname, env=env)
                                             ~^~
./R/RDataTracker.R:3821:58: style: Put spaces around all infix operators.
    .ddg.add.abstract.node ("Start", node.name=pname, env=env)
                                                        ~^~
./R/RDataTracker.R:3824:6: style: Commented code should be removed.
    #print(paste(".ddg.create.function.nodes: deparse(call) =", deparse(call)))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3825:1: style: lines should not be more than 80 characters.
    .ddg.add.abstract.node ("Start", node.name=paste(deparse(call), collapse=""), env=env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3825:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.abstract.node ("Start", node.name=paste(deparse(call), collapse=""), env=env)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3825:5: warning: no visible global function definition for ‘.ddg.add.abstract.node’
    .ddg.add.abstract.node ("Start", node.name=paste(deparse(call), collapse=""), env=env)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3825:47: style: Put spaces around all infix operators.
    .ddg.add.abstract.node ("Start", node.name=paste(deparse(call), collapse=""), env=env)
                                             ~^~
./R/RDataTracker.R:3825:77: style: Put spaces around all infix operators.
    .ddg.add.abstract.node ("Start", node.name=paste(deparse(call), collapse=""), env=env)
                                                                           ~^~
./R/RDataTracker.R:3825:86: style: Put spaces around all infix operators.
    .ddg.add.abstract.node ("Start", node.name=paste(deparse(call), collapse=""), env=env)
                                                                                    ~^~
./R/RDataTracker.R:3839:6: style: Commented code should be removed.
    #print(paste(".ddg.create.function.nodes: full.call =", full.call))
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3843:7: style: Commented code should be removed.
    # scope <- .ddg.get.scope(args[[1]], for.caller = TRUE)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3845:45: style: Put spaces around all infix operators.
    for (i in 1:length(args)) bindings[[i]] <-list(args[[i]], param.names[[i]])
                                            ^~~
./R/RDataTracker.R:3846:5: warning: local variable ‘missing.params’ assigned but may not be used
    missing.params <- character()
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:3851:12: style: Commented code should be removed.
          #print(paste(".ddg.create.function.nodes: binding =", binding))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3853:12: style: Commented code should be removed.
          #print(paste(".ddg.create.function.nodes: arg =", arg))
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3866:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            binding.node.name <- paste(formal, " <- \"", arg, "\"", sep="")
            ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3866:72: style: Put spaces around all infix operators.
            binding.node.name <- paste(formal, " <- \"", arg, "\"", sep="")
                                                                      ~^~
./R/RDataTracker.R:3869:26: style: Words within variable and function names should be separated by '_' rather than '.'.
            vars.used <- .ddg.find.var.uses(arg)
                         ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3869:26: warning: no visible global function definition for ‘.ddg.find.var.uses’
            vars.used <- .ddg.find.var.uses(arg)
                         ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3870:1: style: lines should not be more than 80 characters.
            binding.node.name <- paste(formal, " <- ", paste(deparse(arg), collapse=" "))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3870:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            binding.node.name <- paste(formal, " <- ", paste(deparse(arg), collapse=" "))
            ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3870:84: style: Put spaces around all infix operators.
            binding.node.name <- paste(formal, " <- ", paste(deparse(arg), collapse=" "))
                                                                                  ~^~
./R/RDataTracker.R:3871:1: style: lines should not be more than 80 characters.
            #print(paste(".ddg.create.function.nodes: binding.node.name =", binding.node.name))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3871:14: style: Commented code should be removed.
            #print(paste(".ddg.create.function.nodes: binding.node.name =", binding.node.name))
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3874:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.proc.node("Binding", binding.node.name, env=env)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3874:11: warning: no visible global function definition for ‘.ddg.proc.node’
          .ddg.proc.node("Binding", binding.node.name, env=env)
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3874:37: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.proc.node("Binding", binding.node.name, env=env)
                                    ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3874:59: style: Put spaces around all infix operators.
          .ddg.proc.node("Binding", binding.node.name, env=env)
                                                         ~^~
./R/RDataTracker.R:3875:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.proc2proc()
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3875:11: warning: no visible global function definition for ‘.ddg.proc2proc’
          .ddg.proc2proc()
          ^~~~~~~~~~~~~~
./R/RDataTracker.R:3877:28: style: Words within variable and function names should be separated by '_' rather than '.'.
            param.scope <- .ddg.get.scope(var, for.caller = TRUE, calls=stack)
                           ^~~~~~~~~~~~~~
./R/RDataTracker.R:3877:28: warning: no visible global function definition for ‘.ddg.get.scope’
            param.scope <- .ddg.get.scope(var, for.caller = TRUE, calls=stack)
                           ^~~~~~~~~~~~~~
./R/RDataTracker.R:3877:72: style: Put spaces around all infix operators.
            param.scope <- .ddg.get.scope(var, for.caller = TRUE, calls=stack)
                                                                      ~^~
./R/RDataTracker.R:3878:17: style: Words within variable and function names should be separated by '_' rather than '.'.
            if (.ddg.data.node.exists(var, param.scope)) {
                ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3879:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.data2proc(as.character(var), param.scope, binding.node.name)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:3879:15: warning: no visible global function definition for ‘.ddg.data2proc’
              .ddg.data2proc(as.character(var), param.scope, binding.node.name)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:3879:62: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.data2proc(as.character(var), param.scope, binding.node.name)
                                                             ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3880:19: style: Words within variable and function names should be separated by '_' rather than '.'.
              if (.ddg.debug.lib()) print(paste("param:", var))
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3880:19: warning: no visible global function definition for ‘.ddg.debug.lib’
              if (.ddg.debug.lib()) print(paste("param:", var))
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3884:29: style: Words within variable and function names should be separated by '_' rather than '.'.
            formal.scope <- .ddg.get.scope(formal, calls=stack)
                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3884:29: warning: no visible global function definition for ‘.ddg.get.scope’
            formal.scope <- .ddg.get.scope(formal, calls=stack)
                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3884:57: style: Put spaces around all infix operators.
            formal.scope <- .ddg.get.scope(formal, calls=stack)
                                                       ~^~
./R/RDataTracker.R:3885:27: style: Words within variable and function names should be separated by '_' rather than '.'.
            formal.env <- .ddg.get.env(formal, calls=stack)
                          ^~~~~~~~~~~~
./R/RDataTracker.R:3885:27: warning: no visible global function definition for ‘.ddg.get.env’
            formal.env <- .ddg.get.env(formal, calls=stack)
                          ^~~~~~~~~~~~
./R/RDataTracker.R:3885:53: style: Put spaces around all infix operators.
            formal.env <- .ddg.get.env(formal, calls=stack)
                                                   ~^~
./R/RDataTracker.R:3892:1: style: lines should not be more than 80 characters.
                  .ddg.save.data(formal, eval(parse(text=formal), formal.env), fname=".ddg.save.data", scope=formal.scope, stack=stack)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3892:19: style: Words within variable and function names should be separated by '_' rather than '.'.
                  .ddg.save.data(formal, eval(parse(text=formal), formal.env), fname=".ddg.save.data", scope=formal.scope, stack=stack)
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3892:19: warning: no visible global function definition for ‘.ddg.save.data’
                  .ddg.save.data(formal, eval(parse(text=formal), formal.env), fname=".ddg.save.data", scope=formal.scope, stack=stack)
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3892:57: style: Put spaces around all infix operators.
                  .ddg.save.data(formal, eval(parse(text=formal), formal.env), fname=".ddg.save.data", scope=formal.scope, stack=stack)
                                                       ~^~
./R/RDataTracker.R:3892:85: style: Put spaces around all infix operators.
                  .ddg.save.data(formal, eval(parse(text=formal), formal.env), fname=".ddg.save.data", scope=formal.scope, stack=stack)
                                                                                   ~^~
./R/RDataTracker.R:3892:109: style: Put spaces around all infix operators.
                  .ddg.save.data(formal, eval(parse(text=formal), formal.env), fname=".ddg.save.data", scope=formal.scope, stack=stack)
                                                                                                           ~^~
./R/RDataTracker.R:3892:129: style: Put spaces around all infix operators.
                  .ddg.save.data(formal, eval(parse(text=formal), formal.env), fname=".ddg.save.data", scope=formal.scope, stack=stack)
                                                                                                                               ~^~
./R/RDataTracker.R:3893:19: style: Words within variable and function names should be separated by '_' rather than '.'.
                  .ddg.proc2data(binding.node.name, formal, formal.scope)},
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3893:19: warning: no visible global function definition for ‘.ddg.proc2data’
                  .ddg.proc2data(binding.node.name, formal, formal.scope)},
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3893:34: style: Words within variable and function names should be separated by '_' rather than '.'.
                  .ddg.proc2data(binding.node.name, formal, formal.scope)},
                                 ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3893:74: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
                  .ddg.proc2data(binding.node.name, formal, formal.scope)},
                                                                         ^
./R/RDataTracker.R:3894:37: style: Opening curly braces should never go on their own line and should always be followed by a new line.
                error = function(e) {})
                                    ^
./R/RDataTracker.R:3894:38: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
                error = function(e) {})
                                     ^
./R/RDataTracker.R:3900:1: style: lines should not be more than 80 characters.
  .ddg.proc.node("Operation", pname, pname, auto.created = auto.created, env=env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3900:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc.node("Operation", pname, pname, auto.created = auto.created, env=env)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3900:3: warning: no visible global function definition for ‘.ddg.proc.node’
  .ddg.proc.node("Operation", pname, pname, auto.created = auto.created, env=env)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3900:77: style: Put spaces around all infix operators.
  .ddg.proc.node("Operation", pname, pname, auto.created = auto.created, env=env)
                                                                           ~^~
./R/RDataTracker.R:3902:1: style: lines should not be more than 80 characters.
  # Link to the definition of the function if the function is defined in this script.
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3903:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.data.node.exists(pname, environmentName(.GlobalEnv))) {
      ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3904:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.data2proc(pname, environmentName(.GlobalEnv), pname)
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:3904:5: warning: no visible global function definition for ‘.ddg.data2proc’
    .ddg.data2proc(pname, environmentName(.GlobalEnv), pname)
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:3911:1: style: lines should not be more than 80 characters.
          # Formal will be NULL if declared as ...  Don't create the data node in that case.
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3913:29: style: Words within variable and function names should be separated by '_' rather than '.'.
            formal.scope <- .ddg.get.scope(formal, calls=stack)
                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3913:29: warning: no visible global function definition for ‘.ddg.get.scope’
            formal.scope <- .ddg.get.scope(formal, calls=stack)
                            ^~~~~~~~~~~~~~
./R/RDataTracker.R:3913:57: style: Put spaces around all infix operators.
            formal.scope <- .ddg.get.scope(formal, calls=stack)
                                                       ~^~
./R/RDataTracker.R:3914:17: style: Words within variable and function names should be separated by '_' rather than '.'.
            if (.ddg.data.node.exists (formal, formal.scope)) {
                ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3915:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.data2proc(formal, formal.scope, pname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:3915:15: warning: no visible global function definition for ‘.ddg.data2proc’
              .ddg.data2proc(formal, formal.scope, pname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:3922:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3922:3: warning: no visible global function definition for ‘.ddg.proc2proc’
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:3926:1: style: lines should not be more than 80 characters.
  .ddg.create.output.nodes(fname="ddg.function", pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, parent.frame(2))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3926:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.create.output.nodes(fname="ddg.function", pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, parent.frame(2))
  ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3926:3: warning: no visible global function definition for ‘.ddg.create.output.nodes’
  .ddg.create.output.nodes(fname="ddg.function", pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, parent.frame(2))
  ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3926:33: style: Put spaces around all infix operators.
  .ddg.create.output.nodes(fname="ddg.function", pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, parent.frame(2))
                               ~^~
./R/RDataTracker.R:3936:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.get.frame.number <- function(calls, for.caller=FALSE) {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3937:4: style: Commented code should be removed.
  #print (".ddg.get.frame.number: for.caller =", for.caller)
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3939:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  script.func.found <- FALSE
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3943:1: style: lines should not be more than 80 characters.
    # Guess that if we have a closure it is a user-defined function and not a ddg function
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3946:26: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (for.caller && !script.func.found) {
                         ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3947:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        script.func.found <- TRUE
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3955:8: style: Commented code should be removed.
      #print(paste(".ddg.get.frame.number: call.func =", call.func))
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3956:1: style: lines should not be more than 80 characters.
      # Ignore calls to ddg functions or to the functions that get called from the outermost tryCatch
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3959:1: style: lines should not be more than 80 characters.
          && substr(call.func, 1, 10) != "doTryCatch" && substr(call.func, 1, 11) != "tryCatchOne"
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3960:1: style: lines should not be more than 80 characters.
          && substr(call.func, 1, 12) != "tryCatchList" && substr(call.func, 1, 8) != "tryCatch") {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3961:28: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (for.caller && !script.func.found) {
                           ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3962:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          script.func.found <- TRUE
          ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3979:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.where <- function(name, env=parent.frame()) {
^~~~~~~~~~
./R/RDataTracker.R:3982:7: style: Commented code should be removed.
    # stop("Can't find ", name, call.=FALSE)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:3986:33: style: Put spaces around all infix operators.
  if (exists(name, env, inherits=FALSE)) {
                               ~^~
./R/RDataTracker.R:3990:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.where(name, parent.env(env))
    ^~~~~~~~~~
./R/RDataTracker.R:4000:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.get.env <- function(name, for.caller=FALSE, calls=NULL) {
^~~~~~~~~~~~
./R/RDataTracker.R:4001:4: style: Commented code should be removed.
  #print (paste(".ddg.get.env: for.caller =", for.caller))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4003:4: style: Commented code should be removed.
  #print(".ddg.get.env getting the frame number")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4004:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  fnum <- .ddg.get.frame.number(calls, for.caller)
          ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4004:11: warning: no visible global function definition for ‘.ddg.get.frame.number’
  fnum <- .ddg.get.frame.number(calls, for.caller)
          ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4005:4: style: Commented code should be removed.
  #print(paste(".ddg.get.env: fnum =", fnum))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4015:1: style: lines should not be more than 80 characters.
  #	scope <- sub('<environment: (.*)>', '\\1', capture.output(.ddg.where(name, sys.frame(fnum))))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4015:5: style: Commented code should be removed.
  #	scope <- sub('<environment: (.*)>', '\\1', capture.output(.ddg.where(name, sys.frame(fnum))))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4017:7: style: Place a space before left parenthesis, except in a function call.
    if(!exists(name, sys.frame(fnum), inherits=TRUE)) return(NULL),
      ^
./R/RDataTracker.R:4017:47: style: Put spaces around all infix operators.
    if(!exists(name, sys.frame(fnum), inherits=TRUE)) return(NULL),
                                             ~^~
./R/RDataTracker.R:4018:25: style: Opening curly braces should never go on their own line and should always be followed by a new line.
    error = function(e) {}
                        ^
./R/RDataTracker.R:4018:26: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
    error = function(e) {}
                         ^
./R/RDataTracker.R:4020:4: style: Commented code should be removed.
  #print(".ddg.get.env calling .ddg.where")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4021:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  env <- .ddg.where(name, sys.frame(fnum))
         ^~~~~~~~~~
./R/RDataTracker.R:4021:10: warning: no visible global function definition for ‘.ddg.where’
  env <- .ddg.where(name, sys.frame(fnum))
         ^~~~~~~~~~
./R/RDataTracker.R:4022:4: style: Commented code should be removed.
  #print(".ddg.get.env Done")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4034:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.get.scope <- function(name, for.caller=FALSE, calls=NULL, env=NULL) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:4038:11: warning: no visible global function definition for ‘.ddg.get.env’
	  env <- .ddg.get.env(name, for.caller, calls)
          ^~~~~~~~~~~~
./R/RDataTracker.R:4038:15: style: Put spaces around all infix operators.
	  env <- .ddg.get.env(name, for.caller, calls)
             ~^~~
./R/RDataTracker.R:4038:18: style: Words within variable and function names should be separated by '_' rather than '.'.
	  env <- .ddg.get.env(name, for.caller, calls)
                 ^~~~~~~~~~~~
./R/RDataTracker.R:4047:16: style: Only use double-quotes.
  scope <- sub('^<environment: (.*)>$', '\\1', capture.output(env)[1])
               ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4047:41: style: Only use double-quotes.
  scope <- sub('^<environment: (.*)>$', '\\1', capture.output(env)[1])
                                        ^~~~~
./R/RDataTracker.R:4058:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.is.local <- function(name, scope) {
^~~~~~~~~~~~~
./R/RDataTracker.R:4059:38: style: Put spaces around all infix operators.
  return(exists(name, scope, inherits=FALSE))
                                    ~^~
./R/RDataTracker.R:4063:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.rm <-function()
^~~~~~~
./R/RDataTracker.R:4063:9: style: Put spaces around all infix operators.
.ddg.rm <-function()
        ^~~
./R/RDataTracker.R:4068:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.get.annotation.list <- function(parsed.command) {
^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4070:1: style: lines should not be more than 80 characters.
    if (toString(parsed.command[[1]][[1]]) == "ddg.annotate.on" | toString(parsed.command[[1]][[1]]) == "ddg.annotate.off") {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4078:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.create.start.for.cur.cmd <- function (call, caller.env) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4079:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.set(".ddg.cur.cmd")) {
      ^~~~~~~~~~~
./R/RDataTracker.R:4080:7: style: Commented code should be removed.
    # print("In .ddg.create.start.for.cur.cmd")
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4081:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.cur.cmd <- .ddg.get(".ddg.cur.cmd")
    ^~~~~~~~~~~~
./R/RDataTracker.R:4081:21: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.cur.cmd <- .ddg.get(".ddg.cur.cmd")
                    ^~~~~~~~
./R/RDataTracker.R:4081:21: warning: no visible global function definition for ‘.ddg.get’
    .ddg.cur.cmd <- .ddg.get(".ddg.cur.cmd")
                    ^~~~~~~~
./R/RDataTracker.R:4082:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4082:27: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
                          ^~~~~~~~
./R/RDataTracker.R:4082:27: warning: no visible global function definition for ‘.ddg.get’
    .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
                          ^~~~~~~~
./R/RDataTracker.R:4083:28: style: Words within variable and function names should be separated by '_' rather than '.'.
    stack.length <- length(.ddg.cur.cmd.stack)
                           ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4085:23: style: Words within variable and function names should be separated by '_' rather than '.'.
      last.created <- .ddg.cur.cmd.stack[stack.length]
                      ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4089:13: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (.ddg.cur.cmd@text != paste(deparse(call), collapse="")) {
            ^~~~~~~~~~~~
./R/RDataTracker.R:4089:63: style: Put spaces around all infix operators.
        if (.ddg.cur.cmd@text != paste(deparse(call), collapse="")) {
                                                             ~^~
./R/RDataTracker.R:4090:1: style: lines should not be more than 80 characters.
          cmd.abbrev <- .ddg.add.abstract.node ("Start", .ddg.cur.cmd, caller.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4090:11: warning: local variable ‘cmd.abbrev’ assigned but may not be used
          cmd.abbrev <- .ddg.add.abstract.node ("Start", .ddg.cur.cmd, caller.env)
          ^~~~~~~~~~
./R/RDataTracker.R:4090:25: style: Words within variable and function names should be separated by '_' rather than '.'.
          cmd.abbrev <- .ddg.add.abstract.node ("Start", .ddg.cur.cmd, caller.env)
                        ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4090:25: warning: no visible global function definition for ‘.ddg.add.abstract.node’
          cmd.abbrev <- .ddg.add.abstract.node ("Start", .ddg.cur.cmd, caller.env)
                        ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4090:58: style: Words within variable and function names should be separated by '_' rather than '.'.
          cmd.abbrev <- .ddg.add.abstract.node ("Start", .ddg.cur.cmd, caller.env)
                                                         ^~~~~~~~~~~~
./R/RDataTracker.R:4091:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.cur.expr.stack <- .ddg.get(".ddg.cur.expr.stack")
          ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4091:11: warning: local variable ‘.ddg.cur.expr.stack’ assigned but may not be used
          .ddg.cur.expr.stack <- .ddg.get(".ddg.cur.expr.stack")
          ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4091:34: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.cur.expr.stack <- .ddg.get(".ddg.cur.expr.stack")
                                 ^~~~~~~~
./R/RDataTracker.R:4091:34: warning: no visible global function definition for ‘.ddg.get’
          .ddg.cur.expr.stack <- .ddg.get(".ddg.cur.expr.stack")
                                 ^~~~~~~~
./R/RDataTracker.R:4092:1: style: lines should not be more than 80 characters.
          .ddg.create.data.use.edges.for.console.cmd(vars.set = data.frame(), .ddg.cur.cmd, 0, for.caller=TRUE)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4092:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.create.data.use.edges.for.console.cmd(vars.set = data.frame(), .ddg.cur.cmd, 0, for.caller=TRUE)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4092:11: style: Variable and function names should not be longer than 30 characters.
          .ddg.create.data.use.edges.for.console.cmd(vars.set = data.frame(), .ddg.cur.cmd, 0, for.caller=TRUE)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4092:11: warning: no visible global function definition for ‘.ddg.create.data.use.edges.for.console.cmd’
          .ddg.create.data.use.edges.for.console.cmd(vars.set = data.frame(), .ddg.cur.cmd, 0, for.caller=TRUE)
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4092:79: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.create.data.use.edges.for.console.cmd(vars.set = data.frame(), .ddg.cur.cmd, 0, for.caller=TRUE)
                                                                              ^~~~~~~~~~~~
./R/RDataTracker.R:4092:106: style: Put spaces around all infix operators.
          .ddg.create.data.use.edges.for.console.cmd(vars.set = data.frame(), .ddg.cur.cmd, 0, for.caller=TRUE)
                                                                                                        ~^~
./R/RDataTracker.R:4095:22: style: Words within variable and function names should be separated by '_' rather than '.'.
          st.type <- .ddg.get.statement.type(.ddg.cur.cmd@parsed[[1]])
                     ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4095:22: warning: no visible global function definition for ‘.ddg.get.statement.type’
          st.type <- .ddg.get.statement.type(.ddg.cur.cmd@parsed[[1]])
                     ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4095:46: style: Words within variable and function names should be separated by '_' rather than '.'.
          st.type <- .ddg.get.statement.type(.ddg.cur.cmd@parsed[[1]])
                                             ^~~~~~~~~~~~
./R/RDataTracker.R:4096:1: style: lines should not be more than 80 characters.
          loop.statement <- (st.type == "for" || st.type == "while" || st.type == "repeat")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4097:33: style: Words within variable and function names should be separated by '_' rather than '.'.
          if (loop.statement && ddg.first.loop() > 1) {
                                ^~~~~~~~~~~~~~
./R/RDataTracker.R:4098:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            ddg.details.omitted()
            ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4098:13: warning: no visible global function definition for ‘ddg.details.omitted’
            ddg.details.omitted()
            ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4101:1: style: lines should not be more than 80 characters.
          # Mark the start node as created on the stack.  Mark it even if we did not
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4103:1: style: lines should not be more than 80 characters.
          .ddg.set (".ddg.cur.cmd.stack", c(.ddg.cur.cmd.stack[1:stack.length-1], TRUE))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4103:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.set (".ddg.cur.cmd.stack", c(.ddg.cur.cmd.stack[1:stack.length-1], TRUE))
          ^~~~~~~~
./R/RDataTracker.R:4103:11: warning: no visible global function definition for ‘.ddg.set’
          .ddg.set (".ddg.cur.cmd.stack", c(.ddg.cur.cmd.stack[1:stack.length-1], TRUE))
          ^~~~~~~~
./R/RDataTracker.R:4103:45: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.set (".ddg.cur.cmd.stack", c(.ddg.cur.cmd.stack[1:stack.length-1], TRUE))
                                            ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4103:78: style: Put spaces around all infix operators.
          .ddg.set (".ddg.cur.cmd.stack", c(.ddg.cur.cmd.stack[1:stack.length-1], TRUE))
                                                                            ~^~
./R/RDataTracker.R:4106:1: style: lines should not be more than 80 characters.
          .ddg.set (".ddg.cur.cmd.stack", c(.ddg.cur.cmd.stack[1:stack.length-1], "MATCHES_CALL"))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4106:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.set (".ddg.cur.cmd.stack", c(.ddg.cur.cmd.stack[1:stack.length-1], "MATCHES_CALL"))
          ^~~~~~~~
./R/RDataTracker.R:4106:11: warning: no visible global function definition for ‘.ddg.set’
          .ddg.set (".ddg.cur.cmd.stack", c(.ddg.cur.cmd.stack[1:stack.length-1], "MATCHES_CALL"))
          ^~~~~~~~
./R/RDataTracker.R:4106:45: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.set (".ddg.cur.cmd.stack", c(.ddg.cur.cmd.stack[1:stack.length-1], "MATCHES_CALL"))
                                            ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4106:78: style: Put spaces around all infix operators.
          .ddg.set (".ddg.cur.cmd.stack", c(.ddg.cur.cmd.stack[1:stack.length-1], "MATCHES_CALL"))
                                                                            ~^~
./R/RDataTracker.R:4110:6: style: Commented code should be removed.
    #print("Done .ddg.create.start.for.cur.cmd")
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4116:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.get.last.cmd <- function() {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4117:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4117:25: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
                        ^~~~~~~~
./R/RDataTracker.R:4117:25: warning: no visible global function definition for ‘.ddg.get’
  .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
                        ^~~~~~~~
./R/RDataTracker.R:4118:26: style: Words within variable and function names should be separated by '_' rather than '.'.
  stack.length <- length(.ddg.cur.cmd.stack)
                         ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4119:3: warning: local variable ‘cmd’ assigned but may not be used
  cmd <- .ddg.cur.cmd.stack[stack.length-1][[1]]
  ^~~
./R/RDataTracker.R:4119:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  cmd <- .ddg.cur.cmd.stack[stack.length-1][[1]]
         ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4119:41: style: Put spaces around all infix operators.
  cmd <- .ddg.cur.cmd.stack[stack.length-1][[1]]
                                       ~^~
./R/RDataTracker.R:4125:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.remove.last.cmd.start.created <- function () {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4125:1: style: Variable and function names should not be longer than 30 characters.
.ddg.remove.last.cmd.start.created <- function () {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4126:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
  ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4126:25: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
                        ^~~~~~~~
./R/RDataTracker.R:4126:25: warning: no visible global function definition for ‘.ddg.get’
  .ddg.cur.cmd.stack <- .ddg.get(".ddg.cur.cmd.stack")
                        ^~~~~~~~
./R/RDataTracker.R:4127:26: style: Words within variable and function names should be separated by '_' rather than '.'.
  stack.length <- length(.ddg.cur.cmd.stack)
                         ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4128:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4130:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set(".ddg.cur.cmd.stack", vector())
    ^~~~~~~~
./R/RDataTracker.R:4130:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set(".ddg.cur.cmd.stack", vector())
    ^~~~~~~~
./R/RDataTracker.R:4133:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack[1:(stack.length-2)])
    ^~~~~~~~
./R/RDataTracker.R:4133:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack[1:(stack.length-2)])
    ^~~~~~~~
./R/RDataTracker.R:4133:36: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack[1:(stack.length-2)])
                                   ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4133:70: style: Put spaces around all infix operators.
    .ddg.set(".ddg.cur.cmd.stack", .ddg.cur.cmd.stack[1:(stack.length-2)])
                                                                    ~^~
./R/RDataTracker.R:4143:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.break.statement <- function() {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4145:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc.node("Operation", "break", "break")
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4145:3: warning: no visible global function definition for ‘.ddg.proc.node’
  .ddg.proc.node("Operation", "break", "break")
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4146:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4146:3: warning: no visible global function definition for ‘.ddg.proc2proc’
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4147:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4149:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  cmd <- .ddg.get.last.cmd()
         ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4149:10: warning: no visible global function definition for ‘.ddg.get.last.cmd’
  cmd <- .ddg.get.last.cmd()
         ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4152:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4156:5: warning: no visible global function definition for ‘ddg.finish’
    ddg.finish("if")
    ^~~~~~~~~~
./R/RDataTracker.R:4158:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.abstract.node("Finish", cmd, parent.frame())
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4158:5: warning: no visible global function definition for ‘.ddg.add.abstract.node’
    .ddg.add.abstract.node("Finish", cmd, parent.frame())
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4159:1: style: Trailing whitespace is superfluous.
    
^~~~
./R/RDataTracker.R:4161:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.remove.last.cmd.start.created()
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4161:5: style: Variable and function names should not be longer than 30 characters.
    .ddg.remove.last.cmd.start.created()
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4161:5: warning: no visible global function definition for ‘.ddg.remove.last.cmd.start.created’
    .ddg.remove.last.cmd.start.created()
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4163:12: style: Words within variable and function names should be separated by '_' rather than '.'.
    cmd <- .ddg.get.last.cmd()
           ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4163:12: warning: no visible global function definition for ‘.ddg.get.last.cmd’
    cmd <- .ddg.get.last.cmd()
           ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4167:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4170:3: warning: no visible global function definition for ‘ddg.finish’
  ddg.finish(loop.name)
  ^~~~~~~~~~
./R/RDataTracker.R:4171:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4173:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.add.abstract.node("Finish", cmd, parent.frame())
  ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4173:3: warning: no visible global function definition for ‘.ddg.add.abstract.node’
  .ddg.add.abstract.node("Finish", cmd, parent.frame())
  ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4174:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4176:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.remove.last.cmd.start.created()
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4176:3: style: Variable and function names should not be longer than 30 characters.
  .ddg.remove.last.cmd.start.created()
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4176:3: warning: no visible global function definition for ‘.ddg.remove.last.cmd.start.created’
  .ddg.remove.last.cmd.start.created()
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4184:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.next.statement <- function() {
^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4186:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc.node("Operation", "next", "next")
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4186:3: warning: no visible global function definition for ‘.ddg.proc.node’
  .ddg.proc.node("Operation", "next", "next")
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4187:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4187:3: warning: no visible global function definition for ‘.ddg.proc2proc’
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4188:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4190:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  cmd <- .ddg.get.last.cmd()
         ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4190:10: warning: no visible global function definition for ‘.ddg.get.last.cmd’
  cmd <- .ddg.get.last.cmd()
         ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4193:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4197:5: warning: no visible global function definition for ‘ddg.finish’
    ddg.finish("if")
    ^~~~~~~~~~
./R/RDataTracker.R:4199:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.abstract.node("Finish", cmd, parent.frame())
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4199:5: warning: no visible global function definition for ‘.ddg.add.abstract.node’
    .ddg.add.abstract.node("Finish", cmd, parent.frame())
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4200:1: style: Trailing whitespace is superfluous.
    
^~~~
./R/RDataTracker.R:4202:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.remove.last.cmd.start.created()
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4202:5: style: Variable and function names should not be longer than 30 characters.
    .ddg.remove.last.cmd.start.created()
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4202:5: warning: no visible global function definition for ‘.ddg.remove.last.cmd.start.created’
    .ddg.remove.last.cmd.start.created()
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4204:12: style: Words within variable and function names should be separated by '_' rather than '.'.
    cmd <- .ddg.get.last.cmd()
           ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4204:12: warning: no visible global function definition for ‘.ddg.get.last.cmd’
    cmd <- .ddg.get.last.cmd()
           ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4208:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4211:3: warning: no visible global function definition for ‘ddg.finish’
  ddg.finish(loop.name)
  ^~~~~~~~~~
./R/RDataTracker.R:4228:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.markdown <- function(r.script.path = NULL, output.path = NULL){
^~~~~~~~~~~~~
./R/RDataTracker.R:4228:27: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.markdown <- function(r.script.path = NULL, output.path = NULL){
                          ^~~~~~~~~~~~~
./R/RDataTracker.R:4231:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  knitr::purl(r.script.path, documentation = 2L, quiet = TRUE)
              ^~~~~~~~~~~~~
./R/RDataTracker.R:4234:1: style: lines should not be more than 80 characters.
  file.rename(from = paste(getwd(), "/", basename(tools::file_path_sans_ext(r.script.path)), ".R", sep = ""), to = output.path)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4234:77: style: Words within variable and function names should be separated by '_' rather than '.'.
  file.rename(from = paste(getwd(), "/", basename(tools::file_path_sans_ext(r.script.path)), ".R", sep = ""), to = output.path)
                                                                            ^~~~~~~~~~~~~
./R/RDataTracker.R:4245:6: style: Place a space before left parenthesis, except in a function call.
  for(i in 1:length(script)){
     ^
./R/RDataTracker.R:4248:7: style: Place a space before left parenthesis, except in a function call.
    if(regexpr("eval+(\\s*)+=+(\\s*)+FALSE", script[i]) != -1){
      ^
./R/RDataTracker.R:4253:12: style: Place a space before left parenthesis, except in a function call.
    else if(regexpr("## ----", script[i]) != -1){
           ^
./R/RDataTracker.R:4253:23: style: Commented code should be removed.
    else if(regexpr("## ----", script[i]) != -1){
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4256:9: style: Place a space before left parenthesis, except in a function call.
      if(regexpr("## -----", script[i]) == -1){
        ^
./R/RDataTracker.R:4256:20: style: Commented code should be removed.
      if(regexpr("## -----", script[i]) == -1){
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4257:11: style: Place a space before left parenthesis, except in a function call.
        if(regexpr("=", script[i]) == -1){
          ^
./R/RDataTracker.R:4259:54: style: Put spaces around all infix operators.
          name <- substring(script[i], 8, last = end -1)
                                                     ^~
./R/RDataTracker.R:4261:16: style: Place a space before left parenthesis, except in a function call.
        else if(regexpr(",", script[i]) != -1){
               ^
./R/RDataTracker.R:4263:56: style: Put spaces around all infix operators.
          name <- substring(script[i], 8, last = comma -1)
                                                       ^~
./R/RDataTracker.R:4275:1: style: lines should not be more than 80 characters.
      annotated <- append(annotated, paste("ddg.start(\"", name, "\")", sep = ""))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4277:12: style: Place a space before left parenthesis, except in a function call.
    else if(nchar(script[i]) == 0 && (regexpr("#'", script[i + 1]) != -1 ||
           ^
./R/RDataTracker.R:4278:1: style: lines should not be more than 80 characters.
                                      i == length(script) || regexpr("## ----", script[i + 1]) != -1 )){
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4278:72: style: Commented code should be removed.
                                      i == length(script) || regexpr("## ----", script[i + 1]) != -1 )){
                                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4279:9: style: Place a space before left parenthesis, except in a function call.
      if(skip){
        ^
./R/RDataTracker.R:4284:1: style: lines should not be more than 80 characters.
        annotated <- append(annotated, paste("ddg.finish(\"", name, "\")", sep = ""))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4292:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  r.script.path
  ^~~~~~~~~~~~~
./R/RDataTracker.R:4297:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.save.debug.files <- function() {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4299:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  fileout <- paste(.ddg.path.debug(), "/initial-environment.csv", sep="")
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4299:20: warning: no visible global function definition for ‘.ddg.path.debug’
  fileout <- paste(.ddg.path.debug(), "/initial-environment.csv", sep="")
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4299:40: warning: Do not use absolute paths.
  fileout <- paste(.ddg.path.debug(), "/initial-environment.csv", sep="")
                                       ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4299:70: style: Put spaces around all infix operators.
  fileout <- paste(.ddg.path.debug(), "/initial-environment.csv", sep="")
                                                                    ~^~
./R/RDataTracker.R:4300:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.initial.env <- .ddg.initial.env()
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4300:22: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.initial.env <- .ddg.initial.env()
                     ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4300:22: warning: no visible global function definition for ‘.ddg.initial.env’, Did you mean 'ddg.initial.env'?
  ddg.initial.env <- .ddg.initial.env()
                     ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4301:13: style: Words within variable and function names should be separated by '_' rather than '.'.
  write.csv(ddg.initial.env, fileout, row.names=FALSE)
            ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4301:48: style: Put spaces around all infix operators.
  write.csv(ddg.initial.env, fileout, row.names=FALSE)
                                              ~^~
./R/RDataTracker.R:4304:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  fileout <- paste(.ddg.path.debug(), "/procedure-nodes.csv", sep="")
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4304:20: warning: no visible global function definition for ‘.ddg.path.debug’
  fileout <- paste(.ddg.path.debug(), "/procedure-nodes.csv", sep="")
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4304:40: warning: Do not use absolute paths.
  fileout <- paste(.ddg.path.debug(), "/procedure-nodes.csv", sep="")
                                       ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4304:66: style: Put spaces around all infix operators.
  fileout <- paste(.ddg.path.debug(), "/procedure-nodes.csv", sep="")
                                                                ~^~
./R/RDataTracker.R:4305:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- .ddg.proc.nodes()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4305:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- .ddg.proc.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4305:21: warning: no visible global function definition for ‘.ddg.proc.nodes’, Did you mean 'ddg.proc.nodes'?
  ddg.proc.nodes <- .ddg.proc.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4306:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- ddg.proc.nodes[ddg.proc.nodes$ddg.num > 0, ]
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4306:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- ddg.proc.nodes[ddg.proc.nodes$ddg.num > 0, ]
                    ^~~~~~~~~~~~~~
./R/RDataTracker.R:4306:36: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.proc.nodes <- ddg.proc.nodes[ddg.proc.nodes$ddg.num > 0, ]
                                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:4307:13: style: Words within variable and function names should be separated by '_' rather than '.'.
  write.csv(ddg.proc.nodes, fileout, row.names=FALSE)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:4307:47: style: Put spaces around all infix operators.
  write.csv(ddg.proc.nodes, fileout, row.names=FALSE)
                                             ~^~
./R/RDataTracker.R:4310:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  fileout <- paste(.ddg.path.debug(), "/data-nodes.csv", sep="")
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4310:20: warning: no visible global function definition for ‘.ddg.path.debug’
  fileout <- paste(.ddg.path.debug(), "/data-nodes.csv", sep="")
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4310:40: warning: Do not use absolute paths.
  fileout <- paste(.ddg.path.debug(), "/data-nodes.csv", sep="")
                                       ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4310:61: style: Put spaces around all infix operators.
  fileout <- paste(.ddg.path.debug(), "/data-nodes.csv", sep="")
                                                           ~^~
./R/RDataTracker.R:4311:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes <- .ddg.data.nodes()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4311:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes <- .ddg.data.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4311:21: warning: no visible global function definition for ‘.ddg.data.nodes’, Did you mean 'ddg.data.nodes'?
  ddg.data.nodes <- .ddg.data.nodes()
                    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4312:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes2 <- ddg.data.nodes[ddg.data.nodes$ddg.num > 0, ]
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4312:22: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes2 <- ddg.data.nodes[ddg.data.nodes$ddg.num > 0, ]
                     ^~~~~~~~~~~~~~
./R/RDataTracker.R:4312:37: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.data.nodes2 <- ddg.data.nodes[ddg.data.nodes$ddg.num > 0, ]
                                    ^~~~~~~~~~~~~~
./R/RDataTracker.R:4313:13: style: Words within variable and function names should be separated by '_' rather than '.'.
  write.csv(ddg.data.nodes2, fileout, row.names=FALSE)
            ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4313:48: style: Put spaces around all infix operators.
  write.csv(ddg.data.nodes2, fileout, row.names=FALSE)
                                              ~^~
./R/RDataTracker.R:4316:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  fileout <- paste(.ddg.path.debug(), "/edges.csv", sep="")
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4316:20: warning: no visible global function definition for ‘.ddg.path.debug’
  fileout <- paste(.ddg.path.debug(), "/edges.csv", sep="")
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4316:40: warning: Do not use absolute paths.
  fileout <- paste(.ddg.path.debug(), "/edges.csv", sep="")
                                       ^~~~~~~~~~
./R/RDataTracker.R:4316:56: style: Put spaces around all infix operators.
  fileout <- paste(.ddg.path.debug(), "/edges.csv", sep="")
                                                      ~^~
./R/RDataTracker.R:4317:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.edges <- .ddg.edges()
               ^~~~~~~~~~
./R/RDataTracker.R:4317:16: warning: no visible global function definition for ‘.ddg.edges’, Did you mean 'ddg.edges'?
  ddg.edges <- .ddg.edges()
               ^~~~~~~~~~
./R/RDataTracker.R:4319:43: style: Put spaces around all infix operators.
  write.csv(ddg.edges2, fileout, row.names=FALSE)
                                         ~^~
./R/RDataTracker.R:4322:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  fileout <- paste(.ddg.path.debug(), "/function-returns.csv", sep="")
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4322:20: warning: no visible global function definition for ‘.ddg.path.debug’
  fileout <- paste(.ddg.path.debug(), "/function-returns.csv", sep="")
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4322:40: warning: Do not use absolute paths.
  fileout <- paste(.ddg.path.debug(), "/function-returns.csv", sep="")
                                       ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4322:67: style: Put spaces around all infix operators.
  fileout <- paste(.ddg.path.debug(), "/function-returns.csv", sep="")
                                                                 ~^~
./R/RDataTracker.R:4323:18: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.returns <- .ddg.get(".ddg.return.values")
                 ^~~~~~~~
./R/RDataTracker.R:4323:18: warning: no visible global function definition for ‘.ddg.get’
  ddg.returns <- .ddg.get(".ddg.return.values")
                 ^~~~~~~~
./R/RDataTracker.R:4324:43: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.returns2 <- ddg.returns[ddg.returns$return.node.id > 0, ]
                                          ^~~~~~~~~~~~~~
./R/RDataTracker.R:4325:45: style: Put spaces around all infix operators.
  write.csv(ddg.returns2, fileout, row.names=FALSE)
                                           ~^~
./R/RDataTracker.R:4328:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.sourced()) {
      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4330:22: style: Words within variable and function names should be separated by '_' rather than '.'.
    fileout <- paste(.ddg.path.debug(), "/sourced-scripts.csv", sep="")
                     ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4330:22: warning: no visible global function definition for ‘.ddg.path.debug’
    fileout <- paste(.ddg.path.debug(), "/sourced-scripts.csv", sep="")
                     ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4330:42: warning: Do not use absolute paths.
    fileout <- paste(.ddg.path.debug(), "/sourced-scripts.csv", sep="")
                                         ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4330:68: style: Put spaces around all infix operators.
    fileout <- paste(.ddg.path.debug(), "/sourced-scripts.csv", sep="")
                                                                  ~^~
./R/RDataTracker.R:4331:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.sourced.scripts <- .ddg.get(".ddg.sourced.scripts")
    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4331:28: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.sourced.scripts <- .ddg.get(".ddg.sourced.scripts")
                           ^~~~~~~~
./R/RDataTracker.R:4331:28: warning: no visible global function definition for ‘.ddg.get’
    ddg.sourced.scripts <- .ddg.get(".ddg.sourced.scripts")
                           ^~~~~~~~
./R/RDataTracker.R:4332:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.sourced.scripts2 <- ddg.sourced.scripts[ddg.sourced.scripts$snum >= 0, ]
    ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4332:29: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.sourced.scripts2 <- ddg.sourced.scripts[ddg.sourced.scripts$snum >= 0, ]
                            ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4332:49: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.sourced.scripts2 <- ddg.sourced.scripts[ddg.sourced.scripts$snum >= 0, ]
                                                ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4333:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    write.csv(ddg.sourced.scripts2, fileout, row.names=FALSE)
              ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4333:55: style: Put spaces around all infix operators.
    write.csv(ddg.sourced.scripts2, fileout, row.names=FALSE)
                                                     ~^~
./R/RDataTracker.R:4336:22: style: Words within variable and function names should be separated by '_' rather than '.'.
    fileout <- paste(.ddg.path.debug(), "/data-objects.csv", sep="")
                     ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4336:22: warning: no visible global function definition for ‘.ddg.path.debug’
    fileout <- paste(.ddg.path.debug(), "/data-objects.csv", sep="")
                     ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4336:42: warning: Do not use absolute paths.
    fileout <- paste(.ddg.path.debug(), "/data-objects.csv", sep="")
                                         ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4336:65: style: Put spaces around all infix operators.
    fileout <- paste(.ddg.path.debug(), "/data-objects.csv", sep="")
                                                               ~^~
./R/RDataTracker.R:4337:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.data.objects <- .ddg.data.objects()
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4337:25: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.data.objects <- .ddg.data.objects()
                        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4337:25: warning: no visible global function definition for ‘.ddg.data.objects’, Did you mean 'ddg.data.objects'?
    ddg.data.objects <- .ddg.data.objects()
                        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4338:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    write.csv(ddg.data.objects, fileout, row.names=FALSE)
              ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4338:51: style: Put spaces around all infix operators.
    write.csv(ddg.data.objects, fileout, row.names=FALSE)
                                                 ~^~
./R/RDataTracker.R:4359:1: style: lines should not be more than 80 characters.
ddg.function <- function(outs.graphic=NULL, outs.data=NULL, outs.exception=NULL, outs.url=NULL, outs.file=NULL, graphic.fext="jpeg") {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4360:4: style: Commented code should be removed.
  #print("In ddg.function")
   ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4361:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4361:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4363:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.inc(".ddg.func.depth")
  ^~~~~~~~
./R/RDataTracker.R:4363:3: warning: no visible global function definition for ‘.ddg.inc’
  .ddg.inc(".ddg.func.depth")
  ^~~~~~~~
./R/RDataTracker.R:4365:4: style: Commented code should be removed.
  #print("ddg.function: looking up function name")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4366:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.lookup.function.name(pname)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4366:3: warning: no visible global function definition for ‘.ddg.lookup.function.name’
  .ddg.lookup.function.name(pname)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4367:4: style: Commented code should be removed.
  #print(paste("ddg.function: pname =", pname))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4369:24: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (interactive() && .ddg.enable.console()) .ddg.console.node()
                       ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4369:24: warning: no visible global function definition for ‘.ddg.enable.console’
  if (interactive() && .ddg.enable.console()) .ddg.console.node()
                       ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4369:47: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (interactive() && .ddg.enable.console()) .ddg.console.node()
                                              ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4369:47: warning: no visible global function definition for ‘.ddg.console.node’
  if (interactive() && .ddg.enable.console()) .ddg.console.node()
                                              ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4374:4: style: Commented code should be removed.
  #tokens <- unlist(strsplit (as.character(call), "[(,)]"))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4377:4: style: Commented code should be removed.
  #print(paste("ddg.function: pname =", pname))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4378:4: style: Commented code should be removed.
  #print(paste("ddg.function: caller =", sys.call(-2)[[1]]))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4386:59: style: Put spaces around all infix operators.
  full.call <- tryCatch (match.call(sys.function(-1), call=call),
                                                         ~^~
./R/RDataTracker.R:4390:4: style: Commented code should be removed.
  #print("ddg.function creating start node")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4391:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.create.start.for.cur.cmd (call, sys.frame(-1))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4391:3: warning: no visible global function definition for ‘.ddg.create.start.for.cur.cmd’
  .ddg.create.start.for.cur.cmd (call, sys.frame(-1))
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4393:1: style: lines should not be more than 80 characters.
  .ddg.create.function.nodes(pname, call, full.call, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4393:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.create.function.nodes(pname, call, full.call, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext,
  ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4394:23: style: Words within variable and function names should be separated by '_' rather than '.'.
      env = sys.frame(.ddg.get.frame.number(sys.calls())))
                      ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4395:4: style: Commented code should be removed.
  #print("ddg.function ending")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4416:1: style: lines should not be more than 80 characters.
ddg.procedure <- function(pname, ins=NULL, outs.graphic=NULL, outs.data=NULL, outs.exception=NULL, outs.url=NULL, outs.file=NULL, graphic.fext="jpeg") {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4418:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4418:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4420:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.lookup.function.name(pname)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4420:3: warning: no visible global function definition for ‘.ddg.lookup.function.name’
  .ddg.lookup.function.name(pname)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4422:4: style: Commented code should be removed.
  #print(paste("ddg.procedure: length(pname) =", length(pname)))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4423:4: style: Commented code should be removed.
  #print(paste("ddg.procedure: pname =", pname))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4425:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc.node("Operation", pname, pname)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4425:3: warning: no visible global function definition for ‘.ddg.proc.node’
  .ddg.proc.node("Operation", pname, pname)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4428:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4428:3: warning: no visible global function definition for ‘.ddg.proc2proc’
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4435:7: style: Commented code should be removed.
    # scope <- .ddg.get.scope(ins[[1]], for.caller = TRUE)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4450:20: style: Words within variable and function names should be separated by '_' rather than '.'.
          scope <- .ddg.get.scope(param, calls=stack)
                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:4450:20: warning: no visible global function definition for ‘.ddg.get.scope’
          scope <- .ddg.get.scope(param, calls=stack)
                   ^~~~~~~~~~~~~~
./R/RDataTracker.R:4450:47: style: Put spaces around all infix operators.
          scope <- .ddg.get.scope(param, calls=stack)
                                             ~^~
./R/RDataTracker.R:4451:15: style: Words within variable and function names should be separated by '_' rather than '.'.
          if (.ddg.is.local(param, function.scope)) {
              ^~~~~~~~~~~~~
./R/RDataTracker.R:4452:17: style: Words within variable and function names should be separated by '_' rather than '.'.
            if (.ddg.data.node.exists(param, scope)) {
                ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4453:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.data2proc(param, scope, pname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:4453:15: warning: no visible global function definition for ‘.ddg.data2proc’
              .ddg.data2proc(param, scope, pname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:4454:19: style: Words within variable and function names should be separated by '_' rather than '.'.
              if (.ddg.debug.lib()) print(paste("param:", param))
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4454:19: warning: no visible global function definition for ‘.ddg.debug.lib’
              if (.ddg.debug.lib()) print(paste("param:", param))
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4458:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.insert.error.message(error.msg)
              ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4458:15: warning: no visible global function definition for ‘.ddg.insert.error.message’
              .ddg.insert.error.message(error.msg)
              ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4461:1: style: lines should not be more than 80 characters.
          else if (scope != "undefined" && .ddg.data.node.exists(param, scope)) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4461:44: style: Words within variable and function names should be separated by '_' rather than '.'.
          else if (scope != "undefined" && .ddg.data.node.exists(param, scope)) {
                                           ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4462:13: style: Words within variable and function names should be separated by '_' rather than '.'.
            .ddg.data2proc(param, scope, pname)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:4462:13: warning: no visible global function definition for ‘.ddg.data2proc’
            .ddg.data2proc(param, scope, pname)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:4463:17: style: Words within variable and function names should be separated by '_' rather than '.'.
            if (.ddg.debug.lib()) print(paste("param:", param))
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:4463:17: warning: no visible global function definition for ‘.ddg.debug.lib’
            if (.ddg.debug.lib()) print(paste("param:", param))
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:4466:22: style: Words within variable and function names should be separated by '_' rather than '.'.
            scope <- .ddg.get.scope(param, for.caller = TRUE, calls=stack)
                     ^~~~~~~~~~~~~~
./R/RDataTracker.R:4466:22: warning: no visible global function definition for ‘.ddg.get.scope’
            scope <- .ddg.get.scope(param, for.caller = TRUE, calls=stack)
                     ^~~~~~~~~~~~~~
./R/RDataTracker.R:4466:68: style: Put spaces around all infix operators.
            scope <- .ddg.get.scope(param, for.caller = TRUE, calls=stack)
                                                                  ~^~
./R/RDataTracker.R:4467:41: style: Words within variable and function names should be separated by '_' rather than '.'.
            if (scope != "undefined" && .ddg.data.node.exists(param, scope)) {
                                        ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4468:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.data2proc(param, scope, pname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:4468:15: warning: no visible global function definition for ‘.ddg.data2proc’
              .ddg.data2proc(param, scope, pname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:4469:19: style: Words within variable and function names should be separated by '_' rather than '.'.
              if (.ddg.debug.lib()) print(paste("param:", param))
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4469:19: warning: no visible global function definition for ‘.ddg.debug.lib’
              if (.ddg.debug.lib()) print(paste("param:", param))
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4472:22: style: Words within variable and function names should be separated by '_' rather than '.'.
            else if (.ddg.data.node.exists(param, "undefined")) {
                     ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4475:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.data2proc(param, "undefined", pname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:4475:15: warning: no visible global function definition for ‘.ddg.data2proc’
              .ddg.data2proc(param, "undefined", pname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:4476:19: style: Words within variable and function names should be separated by '_' rather than '.'.
              if (.ddg.debug.lib()) print(paste("param:", param))
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4476:19: warning: no visible global function definition for ‘.ddg.debug.lib’
              if (.ddg.debug.lib()) print(paste("param:", param))
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4486:17: style: Commented code should be removed.
              # arg <- substitute(param)
                ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4488:17: style: Commented code should be removed.
              #	.ddg.data2proc(deparse(arg), pname)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4489:17: style: Commented code should be removed.
              #	if (.ddg.debug.lib()) print(paste("param:", deparse(arg)))
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4494:15: style: Words within variable and function names should be separated by '_' rather than '.'.
              .ddg.insert.error.message(error.msg)
              ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4494:15: warning: no visible global function definition for ‘.ddg.insert.error.message’
              .ddg.insert.error.message(error.msg)
              ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4502:1: style: lines should not be more than 80 characters.
  .ddg.create.output.nodes(fname="ddg.procedure", pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, parent.frame())
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4502:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.create.output.nodes(fname="ddg.procedure", pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, parent.frame())
  ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4502:3: warning: no visible global function definition for ‘.ddg.create.output.nodes’
  .ddg.create.output.nodes(fname="ddg.procedure", pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, parent.frame())
  ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4502:33: style: Put spaces around all infix operators.
  .ddg.create.output.nodes(fname="ddg.procedure", pname, outs.graphic, outs.data, outs.exception, outs.url, outs.file, graphic.fext, parent.frame())
                               ~^~
./R/RDataTracker.R:4512:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.find.ddg.return.value.caller.frame.number <- function() {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4512:1: style: Variable and function names should not be longer than 30 characters.
.ddg.find.ddg.return.value.caller.frame.number <- function() {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4517:1: style: lines should not be more than 80 characters.
  ddg.funcs <- unlist(lapply (calls, function (call) return (grepl("^ddg|.ddg", deparse(call)[[1]]))))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4518:1: style: lines should not be more than 80 characters.
  calls.to.ddg.return.value <- unlist(lapply(calls, function (call) return(.ddg.is.call.to(call, as.name("ddg.return.value")))))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4518:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  calls.to.ddg.return.value <- unlist(lapply(calls, function (call) return(.ddg.is.call.to(call, as.name("ddg.return.value")))))
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4518:76: style: Words within variable and function names should be separated by '_' rather than '.'.
  calls.to.ddg.return.value <- unlist(lapply(calls, function (call) return(.ddg.is.call.to(call, as.name("ddg.return.value")))))
                                                                           ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4518:76: warning: no visible global function definition for ‘.ddg.is.call.to’
  calls.to.ddg.return.value <- unlist(lapply(calls, function (call) return(.ddg.is.call.to(call, as.name("ddg.return.value")))))
                                                                           ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4519:1: style: lines should not be more than 80 characters.
  non.ddg.calls.to.ddg.return.value <- !(ddg.funcs[1:length(ddg.funcs)-1]) & calls.to.ddg.return.value[2:length(calls.to.ddg.return.value)]
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4519:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  non.ddg.calls.to.ddg.return.value <- !(ddg.funcs[1:length(ddg.funcs)-1]) & calls.to.ddg.return.value[2:length(calls.to.ddg.return.value)]
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4519:3: style: Variable and function names should not be longer than 30 characters.
  non.ddg.calls.to.ddg.return.value <- !(ddg.funcs[1:length(ddg.funcs)-1]) & calls.to.ddg.return.value[2:length(calls.to.ddg.return.value)]
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4519:71: style: Put spaces around all infix operators.
  non.ddg.calls.to.ddg.return.value <- !(ddg.funcs[1:length(ddg.funcs)-1]) & calls.to.ddg.return.value[2:length(calls.to.ddg.return.value)]
                                                                     ~^~
./R/RDataTracker.R:4519:78: style: Words within variable and function names should be separated by '_' rather than '.'.
  non.ddg.calls.to.ddg.return.value <- !(ddg.funcs[1:length(ddg.funcs)-1]) & calls.to.ddg.return.value[2:length(calls.to.ddg.return.value)]
                                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4519:113: style: Words within variable and function names should be separated by '_' rather than '.'.
  non.ddg.calls.to.ddg.return.value <- !(ddg.funcs[1:length(ddg.funcs)-1]) & calls.to.ddg.return.value[2:length(calls.to.ddg.return.value)]
                                                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4520:1: style: lines should not be more than 80 characters.
  which.frame <- Position (function (call) return (call), non.ddg.calls.to.ddg.return.value, right=TRUE)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4520:59: style: Words within variable and function names should be separated by '_' rather than '.'.
  which.frame <- Position (function (call) return (call), non.ddg.calls.to.ddg.return.value, right=TRUE)
                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4520:59: style: Variable and function names should not be longer than 30 characters.
  which.frame <- Position (function (call) return (call), non.ddg.calls.to.ddg.return.value, right=TRUE)
                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4520:99: style: Put spaces around all infix operators.
  which.frame <- Position (function (call) return (call), non.ddg.calls.to.ddg.return.value, right=TRUE)
                                                                                                 ~^~
./R/RDataTracker.R:4538:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.return.value <- function (expr=NULL, cmd.func=NULL) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4539:4: style: Commented code should be removed.
  #print("In ddg.return.value")
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4541:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(expr)
       ^~~~~~~~~~~~
./R/RDataTracker.R:4541:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(expr)
       ^~~~~~~~~~~~
./R/RDataTracker.R:4546:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  frame.num <- .ddg.get.frame.number(sys.calls())
               ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4546:16: warning: no visible global function definition for ‘.ddg.get.frame.number’
  frame.num <- .ddg.get.frame.number(sys.calls())
               ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4549:63: style: Put spaces around all infix operators.
  orig.return <- paste("return(", deparse(orig.expr), ")", sep="")
                                                             ~^~
./R/RDataTracker.R:4552:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.lookup.function.name(pname)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4552:3: warning: no visible global function definition for ‘.ddg.lookup.function.name’
  .ddg.lookup.function.name(pname)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4557:21: style: Words within variable and function names should be separated by '_' rather than '.'.
    caller.frame <- .ddg.find.ddg.return.value.caller.frame.number ()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4557:21: style: Variable and function names should not be longer than 30 characters.
    caller.frame <- .ddg.find.ddg.return.value.caller.frame.number ()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4557:21: warning: no visible global function definition for ‘.ddg.find.ddg.return.value.caller.frame.number’
    caller.frame <- .ddg.find.ddg.return.value.caller.frame.number ()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4569:1: style: lines should not be more than 80 characters.
  #print(paste("ddg.return.value:", sys.call(caller.frame))) #, "returns", expr))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4569:4: style: Commented code should be removed.
  #print(paste("ddg.return.value:", sys.call(caller.frame))) #, "returns", expr))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4571:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.return.values <- .ddg.get(".ddg.return.values")
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4571:24: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.return.values <- .ddg.get(".ddg.return.values")
                       ^~~~~~~~
./R/RDataTracker.R:4571:24: warning: no visible global function definition for ‘.ddg.get’
  ddg.return.values <- .ddg.get(".ddg.return.values")
                       ^~~~~~~~
./R/RDataTracker.R:4572:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.num.returns <- .ddg.get(".ddg.num.returns")
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4572:22: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.num.returns <- .ddg.get(".ddg.num.returns")
                     ^~~~~~~~
./R/RDataTracker.R:4572:22: warning: no visible global function definition for ‘.ddg.get’
  ddg.num.returns <- .ddg.get(".ddg.num.returns")
                     ^~~~~~~~
./R/RDataTracker.R:4573:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (nrow(ddg.return.values) == ddg.num.returns) {
           ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4573:34: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (nrow(ddg.return.values) == ddg.num.returns) {
                                 ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4574:10: style: Use <-, not =, for assignment.
    size = 100
         ^
./R/RDataTracker.R:4578:44: style: Put spaces around all infix operators.
                           stringsAsFactors=FALSE)
                                          ~^~
./R/RDataTracker.R:4579:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.rows(".ddg.return.values", new.rows)
    ^~~~~~~~~~~~~
./R/RDataTracker.R:4579:5: warning: no visible global function definition for ‘.ddg.add.rows’
    .ddg.add.rows(".ddg.return.values", new.rows)
    ^~~~~~~~~~~~~
./R/RDataTracker.R:4580:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.return.values <- .ddg.get(".ddg.return.values")
    ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4580:26: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.return.values <- .ddg.get(".ddg.return.values")
                         ^~~~~~~~
./R/RDataTracker.R:4580:26: warning: no visible global function definition for ‘.ddg.get’
    ddg.return.values <- .ddg.get(".ddg.return.values")
                         ^~~~~~~~
./R/RDataTracker.R:4587:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.proc.node.exists(pname)) {
       ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4588:61: style: Put spaces around all infix operators.
    full.call <- match.call(sys.function(caller.frame), call=call)
                                                           ~^~
./R/RDataTracker.R:4589:1: style: lines should not be more than 80 characters.
    .ddg.create.function.nodes(pname, call, full.call, auto.created = TRUE, env = sys.frame(.ddg.get.frame.number(sys.calls()))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4589:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.create.function.nodes(pname, call, full.call, auto.created = TRUE, env = sys.frame(.ddg.get.frame.number(sys.calls()))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4589:93: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.create.function.nodes(pname, call, full.call, auto.created = TRUE, env = sys.frame(.ddg.get.frame.number(sys.calls()))
                                                                                            ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4593:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.dec (".ddg.func.depth")
    ^~~~~~~~
./R/RDataTracker.R:4593:5: warning: no visible global function definition for ‘.ddg.dec’
    .ddg.dec (".ddg.func.depth")
    ^~~~~~~~
./R/RDataTracker.R:4598:50: style: Put spaces around all infix operators.
  call.text <- gsub(" ", "", deparse(call, nlines=1))
                                                ~^~
./R/RDataTracker.R:4599:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  return.node.name <- paste(call.text, "return")
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4600:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  return.node.name <- gsub("\"", "\\\\\"", return.node.name)
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4600:44: style: Words within variable and function names should be separated by '_' rather than '.'.
  return.node.name <- gsub("\"", "\\\\\"", return.node.name)
                                           ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4602:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  return.node.scope <-
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4605:1: style: lines should not be more than 80 characters.
  .ddg.save.data(return.node.name, expr, fname="ddg.return", scope=return.node.scope)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4605:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.save.data(return.node.name, expr, fname="ddg.return", scope=return.node.scope)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4605:3: warning: no visible global function definition for ‘.ddg.save.data’
  .ddg.save.data(return.node.name, expr, fname="ddg.return", scope=return.node.scope)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4605:18: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.save.data(return.node.name, expr, fname="ddg.return", scope=return.node.scope)
                 ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4605:47: style: Put spaces around all infix operators.
  .ddg.save.data(return.node.name, expr, fname="ddg.return", scope=return.node.scope)
                                             ~^~
./R/RDataTracker.R:4605:67: style: Put spaces around all infix operators.
  .ddg.save.data(return.node.name, expr, fname="ddg.return", scope=return.node.scope)
                                                                 ~^~
./R/RDataTracker.R:4605:68: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.save.data(return.node.name, expr, fname="ddg.return", scope=return.node.scope)
                                                                   ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4610:1: style: lines should not be more than 80 characters.
    return.stmt <- .ddg.construct.DDGStatement (parse(text=orig.return), pos=NA, script.num=NA, breakpoints=NA)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4610:20: style: Words within variable and function names should be separated by '_' rather than '.'.
    return.stmt <- .ddg.construct.DDGStatement (parse(text=orig.return), pos=NA, script.num=NA, breakpoints=NA)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4610:20: warning: no visible global function definition for ‘.ddg.construct.DDGStatement’
    return.stmt <- .ddg.construct.DDGStatement (parse(text=orig.return), pos=NA, script.num=NA, breakpoints=NA)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4610:59: style: Put spaces around all infix operators.
    return.stmt <- .ddg.construct.DDGStatement (parse(text=orig.return), pos=NA, script.num=NA, breakpoints=NA)
                                                         ~^~
./R/RDataTracker.R:4610:77: style: Put spaces around all infix operators.
    return.stmt <- .ddg.construct.DDGStatement (parse(text=orig.return), pos=NA, script.num=NA, breakpoints=NA)
                                                                           ~^~
./R/RDataTracker.R:4610:92: style: Put spaces around all infix operators.
    return.stmt <- .ddg.construct.DDGStatement (parse(text=orig.return), pos=NA, script.num=NA, breakpoints=NA)
                                                                                          ~^~
./R/RDataTracker.R:4610:108: style: Put spaces around all infix operators.
    return.stmt <- .ddg.construct.DDGStatement (parse(text=orig.return), pos=NA, script.num=NA, breakpoints=NA)
                                                                                                          ~^~
./R/RDataTracker.R:4614:5: warning: local variable ‘parsed.statement’ assigned but may not be used
    parsed.statement <- return.stmt@parsed
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4617:1: style: lines should not be more than 80 characters.
  # Process breakpoint. We stop if there is a breakpoint set on this line or we are single-stepping.
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4618:1: style: lines should not be more than 80 characters.
  if (.ddg.is.sourced() & (return.stmt@is.breakpoint | .ddg.get("ddg.break")) & !.ddg.break.ignore()) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4618:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.sourced() & (return.stmt@is.breakpoint | .ddg.get("ddg.break")) & !.ddg.break.ignore()) {
      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4618:56: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.sourced() & (return.stmt@is.breakpoint | .ddg.get("ddg.break")) & !.ddg.break.ignore()) {
                                                       ^~~~~~~~
./R/RDataTracker.R:4618:82: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.sourced() & (return.stmt@is.breakpoint | .ddg.get("ddg.break")) & !.ddg.break.ignore()) {
                                                                                 ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4619:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.process.breakpoint(return.stmt, inside.function=TRUE)
    ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4619:5: warning: no visible global function definition for ‘.ddg.process.breakpoint’
    .ddg.process.breakpoint(return.stmt, inside.function=TRUE)
    ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4619:57: style: Put spaces around all infix operators.
    .ddg.process.breakpoint(return.stmt, inside.function=TRUE)
                                                       ~^~
./R/RDataTracker.R:4622:14: style: Use <-, not =, for assignment.
  caller.env = sys.frame(caller.frame)
             ^
./R/RDataTracker.R:4623:1: style: lines should not be more than 80 characters.
  .ddg.proc.node("Operation", return.stmt@abbrev, return.stmt@abbrev, console = TRUE, env=caller.env, cmd=return.stmt)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4623:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc.node("Operation", return.stmt@abbrev, return.stmt@abbrev, console = TRUE, env=caller.env, cmd=return.stmt)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4623:3: warning: no visible global function definition for ‘.ddg.proc.node’
  .ddg.proc.node("Operation", return.stmt@abbrev, return.stmt@abbrev, console = TRUE, env=caller.env, cmd=return.stmt)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4623:90: style: Put spaces around all infix operators.
  .ddg.proc.node("Operation", return.stmt@abbrev, return.stmt@abbrev, console = TRUE, env=caller.env, cmd=return.stmt)
                                                                                        ~^~
./R/RDataTracker.R:4623:106: style: Put spaces around all infix operators.
  .ddg.proc.node("Operation", return.stmt@abbrev, return.stmt@abbrev, console = TRUE, env=caller.env, cmd=return.stmt)
                                                                                                        ~^~
./R/RDataTracker.R:4626:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4626:3: warning: no visible global function definition for ‘.ddg.proc2proc’
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4629:1: style: lines should not be more than 80 characters.
  .ddg.proc2data(return.stmt@abbrev, return.node.name, return.node.scope, return.value=TRUE)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4629:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2data(return.stmt@abbrev, return.node.name, return.node.scope, return.value=TRUE)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4629:3: warning: no visible global function definition for ‘.ddg.proc2data’
  .ddg.proc2data(return.stmt@abbrev, return.node.name, return.node.scope, return.value=TRUE)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4629:38: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2data(return.stmt@abbrev, return.node.name, return.node.scope, return.value=TRUE)
                                     ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4629:56: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2data(return.stmt@abbrev, return.node.name, return.node.scope, return.value=TRUE)
                                                       ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4629:87: style: Put spaces around all infix operators.
  .ddg.proc2data(return.stmt@abbrev, return.node.name, return.node.scope, return.value=TRUE)
                                                                                     ~^~
./R/RDataTracker.R:4632:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.num.returns <- ddg.num.returns + 1
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4632:22: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.num.returns <- ddg.num.returns + 1
                     ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4633:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.return.values$ddg.call[ddg.num.returns] <- call.text
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4633:30: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.return.values$ddg.call[ddg.num.returns] <- call.text
                             ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4634:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.return.values$return.used[ddg.num.returns] <- FALSE
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4634:33: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.return.values$return.used[ddg.num.returns] <- FALSE
                                ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4635:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.return.values$return.node.id[ddg.num.returns] <- .ddg.dnum()
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4635:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.return.values$return.node.id[ddg.num.returns] <- .ddg.dnum()
                    ^~~~~~~~~~~~~~
./R/RDataTracker.R:4635:36: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.return.values$return.node.id[ddg.num.returns] <- .ddg.dnum()
                                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4635:56: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.return.values$return.node.id[ddg.num.returns] <- .ddg.dnum()
                                                       ^~~~~~~~~
./R/RDataTracker.R:4635:56: warning: no visible global function definition for ‘.ddg.dnum’
  ddg.return.values$return.node.id[ddg.num.returns] <- .ddg.dnum()
                                                       ^~~~~~~~~
./R/RDataTracker.R:4636:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.return.values", ddg.return.values)
  ^~~~~~~~
./R/RDataTracker.R:4636:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.return.values", ddg.return.values)
  ^~~~~~~~
./R/RDataTracker.R:4636:34: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.return.values", ddg.return.values)
                                 ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4637:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.num.returns", ddg.num.returns)
  ^~~~~~~~
./R/RDataTracker.R:4637:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.num.returns", ddg.num.returns)
  ^~~~~~~~
./R/RDataTracker.R:4637:32: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.num.returns", ddg.num.returns)
                               ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4643:14: style: Words within variable and function names should be separated by '_' rather than '.'.
    scope <- .ddg.get.scope(var)
             ^~~~~~~~~~~~~~
./R/RDataTracker.R:4643:14: warning: no visible global function definition for ‘.ddg.get.scope’
    scope <- .ddg.get.scope(var)
             ^~~~~~~~~~~~~~
./R/RDataTracker.R:4644:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.data.node.exists(var, scope)) {
        ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4645:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.data2proc(var, scope, return.stmt@abbrev)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4645:7: warning: no visible global function definition for ‘.ddg.data2proc’
      .ddg.data2proc(var, scope, return.stmt@abbrev)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4652:43: style: Put spaces around all infix operators.
      dvalue <- eval(as.symbol(var), envir=env)
                                         ~^~
./R/RDataTracker.R:4655:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (.ddg.is.global.assign(return.stmt@parsed)) env <- globalenv()
          ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4655:11: warning: no visible global function definition for ‘.ddg.is.global.assign’
      if (.ddg.is.global.assign(return.stmt@parsed)) env <- globalenv()
          ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4656:17: style: Words within variable and function names should be separated by '_' rather than '.'.
      dscope <- .ddg.get.scope(var, env=env)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:4656:17: warning: no visible global function definition for ‘.ddg.get.scope’
      dscope <- .ddg.get.scope(var, env=env)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:4656:40: style: Put spaces around all infix operators.
      dscope <- .ddg.get.scope(var, env=env)
                                      ~^~
./R/RDataTracker.R:4657:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.save.data(var, dvalue, scope=dscope)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4657:7: warning: no visible global function definition for ‘.ddg.save.data’
      .ddg.save.data(var, dvalue, scope=dscope)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4657:40: style: Put spaces around all infix operators.
      .ddg.save.data(var, dvalue, scope=dscope)
                                      ~^~
./R/RDataTracker.R:4659:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.proc2data(return.stmt@abbrev, var, dscope=dscope, return.value=FALSE)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4659:7: warning: no visible global function definition for ‘.ddg.proc2data’
      .ddg.proc2data(return.stmt@abbrev, var, dscope=dscope, return.value=FALSE)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4659:53: style: Put spaces around all infix operators.
      .ddg.proc2data(return.stmt@abbrev, var, dscope=dscope, return.value=FALSE)
                                                   ~^~
./R/RDataTracker.R:4659:74: style: Put spaces around all infix operators.
      .ddg.proc2data(return.stmt@abbrev, var, dscope=dscope, return.value=FALSE)
                                                                        ~^~
./R/RDataTracker.R:4665:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.create.file.read.nodes.and.edges(return.stmt, env)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4665:3: style: Variable and function names should not be longer than 30 characters.
  .ddg.create.file.read.nodes.and.edges(return.stmt, env)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4665:3: warning: no visible global function definition for ‘.ddg.create.file.read.nodes.and.edges’
  .ddg.create.file.read.nodes.and.edges(return.stmt, env)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4666:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.create.file.write.nodes.and.edges (return.stmt, env)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4666:3: style: Variable and function names should not be longer than 30 characters.
  .ddg.create.file.write.nodes.and.edges (return.stmt, env)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4666:3: warning: no visible global function definition for ‘.ddg.create.file.write.nodes.and.edges’
  .ddg.create.file.write.nodes.and.edges (return.stmt, env)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4667:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set.graphics.files (return.stmt, env)
  ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4667:3: warning: no visible global function definition for ‘.ddg.set.graphics.files’
  .ddg.set.graphics.files (return.stmt, env)
  ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4669:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.capture.graphics(return.stmt)
    ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4669:5: warning: no visible global function definition for ‘.ddg.capture.graphics’
    .ddg.capture.graphics(return.stmt)
    ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4674:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.abstract.node ("Finish", node.name=pname, env=caller.env)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4674:5: warning: no visible global function definition for ‘.ddg.add.abstract.node’
    .ddg.add.abstract.node ("Finish", node.name=pname, env=caller.env)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4674:48: style: Put spaces around all infix operators.
    .ddg.add.abstract.node ("Finish", node.name=pname, env=caller.env)
                                              ~^~
./R/RDataTracker.R:4674:59: style: Put spaces around all infix operators.
    .ddg.add.abstract.node ("Finish", node.name=pname, env=caller.env)
                                                         ~^~
./R/RDataTracker.R:4677:1: style: lines should not be more than 80 characters.
    .ddg.add.abstract.node ("Finish", node.name=paste(deparse(call),collapse=""), env=caller.env)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4677:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.add.abstract.node ("Finish", node.name=paste(deparse(call),collapse=""), env=caller.env)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4677:5: warning: no visible global function definition for ‘.ddg.add.abstract.node’
    .ddg.add.abstract.node ("Finish", node.name=paste(deparse(call),collapse=""), env=caller.env)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4677:48: style: Put spaces around all infix operators.
    .ddg.add.abstract.node ("Finish", node.name=paste(deparse(call),collapse=""), env=caller.env)
                                              ~^~
./R/RDataTracker.R:4677:69: style: Commas should always have a space after.
    .ddg.add.abstract.node ("Finish", node.name=paste(deparse(call),collapse=""), env=caller.env)
                                                                    ^
./R/RDataTracker.R:4677:77: style: Put spaces around all infix operators.
    .ddg.add.abstract.node ("Finish", node.name=paste(deparse(call),collapse=""), env=caller.env)
                                                                           ~^~
./R/RDataTracker.R:4677:86: style: Put spaces around all infix operators.
    .ddg.add.abstract.node ("Finish", node.name=paste(deparse(call),collapse=""), env=caller.env)
                                                                                    ~^~
./R/RDataTracker.R:4687:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.annotate.inside <- function() {
^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4688:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.annotate.inside"))
         ^~~~~~~~
./R/RDataTracker.R:4688:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.annotate.inside"))
         ^~~~~~~~
./R/RDataTracker.R:4693:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.first.loop <- function() {
^~~~~~~~~~~~~~
./R/RDataTracker.R:4694:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.first.loop"))
         ^~~~~~~~
./R/RDataTracker.R:4694:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.first.loop"))
         ^~~~~~~~
./R/RDataTracker.R:4699:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.max.loops <- function() {
^~~~~~~~~~~~~
./R/RDataTracker.R:4700:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.max.loops"))
         ^~~~~~~~
./R/RDataTracker.R:4700:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.max.loops"))
         ^~~~~~~~
./R/RDataTracker.R:4706:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.max.snapshot.size <- function() {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4707:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.max.snapshot.size"))
         ^~~~~~~~
./R/RDataTracker.R:4707:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.max.snapshot.size"))
         ^~~~~~~~
./R/RDataTracker.R:4711:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.loop.annotate <- function() {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4712:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.loop.annotate"))
         ^~~~~~~~
./R/RDataTracker.R:4712:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.loop.annotate"))
         ^~~~~~~~
./R/RDataTracker.R:4716:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.loop.annotate.on <- function() {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4717:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.loop.annotate", TRUE)
  ^~~~~~~~
./R/RDataTracker.R:4717:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.loop.annotate", TRUE)
  ^~~~~~~~
./R/RDataTracker.R:4721:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.loop.annotate.off <- function() {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4722:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.loop.annotate", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:4722:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.loop.annotate", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:4727:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.loop.count <- function(loop.num) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:4728:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.loops <- .ddg.loops()
               ^~~~~~~~~~
./R/RDataTracker.R:4728:16: warning: no visible global function definition for ‘.ddg.loops’, Did you mean 'ddg.loops'?
  ddg.loops <- .ddg.loops()
               ^~~~~~~~~~
./R/RDataTracker.R:4735:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.loop.count.inc <- function(loop.num) {
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4736:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.loops <- .ddg.loops()
               ^~~~~~~~~~
./R/RDataTracker.R:4736:16: warning: no visible global function definition for ‘.ddg.loops’, Did you mean 'ddg.loops'?
  ddg.loops <- .ddg.loops()
               ^~~~~~~~~~
./R/RDataTracker.R:4738:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.loops", ddg.loops)
  ^~~~~~~~
./R/RDataTracker.R:4738:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.loops", ddg.loops)
  ^~~~~~~~
./R/RDataTracker.R:4745:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.reset.loop.count <- function(loop.num) {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4746:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.loops <- .ddg.loops()
               ^~~~~~~~~~
./R/RDataTracker.R:4746:16: warning: no visible global function definition for ‘.ddg.loops’, Did you mean 'ddg.loops'?
  ddg.loops <- .ddg.loops()
               ^~~~~~~~~~
./R/RDataTracker.R:4748:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.loops", ddg.loops)
  ^~~~~~~~
./R/RDataTracker.R:4748:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.loops", ddg.loops)
  ^~~~~~~~
./R/RDataTracker.R:4757:13: style: Words within variable and function names should be separated by '_' rather than '.'.
  dscope <- .ddg.get.scope(index.name)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:4757:13: warning: no visible global function definition for ‘.ddg.get.scope’
  dscope <- .ddg.get.scope(index.name)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:4758:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4759:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc.node("Operation", pnode.name, pnode.name)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4759:3: warning: no visible global function definition for ‘.ddg.proc.node’
  .ddg.proc.node("Operation", pnode.name, pnode.name)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4760:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4760:3: warning: no visible global function definition for ‘.ddg.proc2proc’
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4761:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4762:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.data.node("Data", index.name, index.var, dscope, from.env=FALSE)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4762:3: warning: no visible global function definition for ‘.ddg.data.node’
  .ddg.data.node("Data", index.name, index.var, dscope, from.env=FALSE)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4762:65: style: Put spaces around all infix operators.
  .ddg.data.node("Data", index.name, index.var, dscope, from.env=FALSE)
                                                               ~^~
./R/RDataTracker.R:4763:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2data(pnode.name, index.name)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4763:3: warning: no visible global function definition for ‘.ddg.proc2data’
  .ddg.proc2data(pnode.name, index.name)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4772:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.details.omitted <- function() {
^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4774:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc.node("Incomplete", pnode.name, pnode.name)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4774:3: warning: no visible global function definition for ‘.ddg.proc.node’
  .ddg.proc.node("Incomplete", pnode.name, pnode.name)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4775:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4775:3: warning: no visible global function definition for ‘.ddg.proc2proc’
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4776:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4777:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) {
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4795:5: style: Commented code should be removed.
  # print(statement)
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:4796:5: style: Commented code should be removed.
  # print(cmd.func)
    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:4800:35: style: Put spaces around all infix operators.
    parsed.statement <- parse(text=statement)
                                 ~^~
./R/RDataTracker.R:4807:12: style: Words within variable and function names should be separated by '_' rather than '.'.
    cmd <- .ddg.statement(num)
           ^~~~~~~~~~~~~~
./R/RDataTracker.R:4807:12: warning: no visible global function definition for ‘.ddg.statement’
    cmd <- .ddg.statement(num)
           ^~~~~~~~~~~~~~
./R/RDataTracker.R:4809:7: style: Commented code should be removed.
    # print(paste("ddg.eval:", cmd@text))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4810:1: style: Trailing whitespace is superfluous.
    
^~~~
./R/RDataTracker.R:4815:7: style: Commented code should be removed.
    # print(paste("ddg.eval:", cmd@text))
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4816:7: style: Commented code should be removed.
    # print(paste("pos ="))
      ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4817:7: style: Commented code should be removed.
    # print(cmd@pos)
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4820:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.debug.lib()) print (paste("ddg.eval: statement =", statement))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4820:7: warning: no visible global function definition for ‘.ddg.debug.lib’
  if (.ddg.debug.lib()) print (paste("ddg.eval: statement =", statement))
      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4822:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  frame.num <- .ddg.get.frame.number(sys.calls())
               ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4822:16: warning: no visible global function definition for ‘.ddg.get.frame.number’
  frame.num <- .ddg.get.frame.number(sys.calls())
               ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4825:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) {
       ^~~~~~~~~~~~
./R/RDataTracker.R:4830:24: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (interactive() && .ddg.enable.console() && !.ddg.enable.source()) {
                       ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4830:50: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (interactive() && .ddg.enable.console() && !.ddg.enable.source()) {
                                                 ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4831:7: style: Commented code should be removed.
    # print("ddg.eval:  Creating console node")
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4832:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.console.node()
    ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4832:5: warning: no visible global function definition for ‘.ddg.console.node’
    .ddg.console.node()
    ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4838:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.break.statement()
    ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4838:5: warning: no visible global function definition for ‘.ddg.break.statement’
    .ddg.break.statement()
    ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4840:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4842:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4844:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.next.statement()
    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4844:5: warning: no visible global function definition for ‘.ddg.next.statement’
    .ddg.next.statement()
    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4846:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4847:1: style: lines should not be more than 80 characters.
  .ddg.parse.commands(parsed.statement, environ=env, run.commands = TRUE, node.name=statement, called.from.ddg.eval=TRUE, cmds=list(cmd))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4847:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.parse.commands(parsed.statement, environ=env, run.commands = TRUE, node.name=statement, called.from.ddg.eval=TRUE, cmds=list(cmd))
  ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4847:3: warning: no visible global function definition for ‘.ddg.parse.commands’
  .ddg.parse.commands(parsed.statement, environ=env, run.commands = TRUE, node.name=statement, called.from.ddg.eval=TRUE, cmds=list(cmd))
  ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4847:48: style: Put spaces around all infix operators.
  .ddg.parse.commands(parsed.statement, environ=env, run.commands = TRUE, node.name=statement, called.from.ddg.eval=TRUE, cmds=list(cmd))
                                              ~^~
./R/RDataTracker.R:4847:84: style: Put spaces around all infix operators.
  .ddg.parse.commands(parsed.statement, environ=env, run.commands = TRUE, node.name=statement, called.from.ddg.eval=TRUE, cmds=list(cmd))
                                                                                  ~^~
./R/RDataTracker.R:4847:116: style: Put spaces around all infix operators.
  .ddg.parse.commands(parsed.statement, environ=env, run.commands = TRUE, node.name=statement, called.from.ddg.eval=TRUE, cmds=list(cmd))
                                                                                                                  ~^~
./R/RDataTracker.R:4847:127: style: Put spaces around all infix operators.
  .ddg.parse.commands(parsed.statement, environ=env, run.commands = TRUE, node.name=statement, called.from.ddg.eval=TRUE, cmds=list(cmd))
                                                                                                                             ~^~
./R/RDataTracker.R:4848:1: style: lines should not be more than 80 characters.
  # cmd <- .ddg.parse.commands(parsed.statement, environ=env, run.commands = TRUE, node.name=statement, called.from.ddg.eval=TRUE, cmds=list(cmd))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4848:5: style: Commented code should be removed.
  # cmd <- .ddg.parse.commands(parsed.statement, environ=env, run.commands = TRUE, node.name=statement, called.from.ddg.eval=TRUE, cmds=list(cmd))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4850:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.get(".ddg.func.depth")) {
      ^~~~~~~~
./R/RDataTracker.R:4852:7: style: Words within variable and function names should be separated by '_' rather than '.'.
      .ddg.link.function.returns(cmd)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4852:7: warning: no visible global function definition for ‘.ddg.link.function.returns’
      .ddg.link.function.returns(cmd)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4854:7: style: Commented code should be removed.
    # .ddg.link.function.returns(statement)
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4856:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:4858:5: style: Commented code should be removed.
  # .ddg.create.data.set.edges.for.cmd(cmd@vars.set, cmd, 1, env)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4878:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4878:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4882:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.lookup.value(dname, dvalue, env, "ddg.data")
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4882:3: warning: no visible global function definition for ‘.ddg.lookup.value’
  .ddg.lookup.value(dname, dvalue, env, "ddg.data")
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4887:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.save.data(dname, dvalue, "ddg.data", graphic.fext, env=env)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4887:3: warning: no visible global function definition for ‘.ddg.save.data’
  .ddg.save.data(dname, dvalue, "ddg.data", graphic.fext, env=env)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4887:62: style: Put spaces around all infix operators.
  .ddg.save.data(dname, dvalue, "ddg.data", graphic.fext, env=env)
                                                            ~^~
./R/RDataTracker.R:4899:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4899:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4902:13: style: Put spaces around all infix operators.
	env <- parent.frame()
           ~^~~
./R/RDataTracker.R:4903:2: warning: no visible global function definition for ‘.ddg.lookup.value’
	.ddg.lookup.value(dname, dvalue, env, "ddg.exception")
 ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4903:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.value(dname, dvalue, env, "ddg.exception")
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4905:12: style: Place a space before left parenthesis, except in a function call.
	if (is.character(dname)) {
           ^
./R/RDataTracker.R:4906:36: style: Put spaces around all infix operators.
    if (exists(dname, env, inherits=TRUE)) {
                                  ~^~
./R/RDataTracker.R:4907:14: style: Use <-, not =, for assignment.
      dscope = .ddg.get.scope(dname)
             ^
./R/RDataTracker.R:4907:16: style: Words within variable and function names should be separated by '_' rather than '.'.
      dscope = .ddg.get.scope(dname)
               ^~~~~~~~~~~~~~
./R/RDataTracker.R:4907:16: warning: no visible global function definition for ‘.ddg.get.scope’
      dscope = .ddg.get.scope(dname)
               ^~~~~~~~~~~~~~
./R/RDataTracker.R:4910:14: style: Use <-, not =, for assignment.
      dscope = environmentName(.GlobalEnv)
             ^
./R/RDataTracker.R:4916:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    dscope <- .ddg.get.scope(dname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:4916:15: warning: no visible global function definition for ‘.ddg.get.scope’
    dscope <- .ddg.get.scope(dname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:4920:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.data.node("Exception", dname, dvalue, dscope)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4920:3: warning: no visible global function definition for ‘.ddg.data.node’
  .ddg.data.node("Exception", dname, dvalue, dscope)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4931:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4931:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4934:13: style: Put spaces around all infix operators.
	env <- parent.frame()
           ~^~~
./R/RDataTracker.R:4935:2: warning: no visible global function definition for ‘.ddg.lookup.value’
	.ddg.lookup.value(dname, dvalue, env, "ddg.url")
 ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4935:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.value(dname, dvalue, env, "ddg.url")
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4937:12: style: Place a space before left parenthesis, except in a function call.
	if (is.character(dname)) {
           ^
./R/RDataTracker.R:4938:24: style: Use <-, not =, for assignment.
		dscope = environmentName(.GlobalEnv)
                       ^
./R/RDataTracker.R:4938:24: style: Put spaces around all infix operators.
		dscope = environmentName(.GlobalEnv)
                      ~^~
./R/RDataTracker.R:4942:23: style: Put spaces around all infix operators.
		dname <- deparse(substitute(dname))
                     ~^~~
./R/RDataTracker.R:4943:13: warning: no visible global function definition for ‘.ddg.get.scope’
		dscope <- .ddg.get.scope(dname)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:4943:24: style: Put spaces around all infix operators.
		dscope <- .ddg.get.scope(dname)
                      ~^~~
./R/RDataTracker.R:4943:27: style: Words within variable and function names should be separated by '_' rather than '.'.
		dscope <- .ddg.get.scope(dname)
                          ^~~~~~~~~~~~~~
./R/RDataTracker.R:4947:2: warning: no visible global function definition for ‘.ddg.data.node’
	.ddg.data.node("URL", dname, dvalue, dscope)
 ^~~~~~~~~~~~~~
./R/RDataTracker.R:4947:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.data.node("URL", dname, dvalue, dscope)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:4959:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4959:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4961:15: style: Put spaces around all infix operators.
	scope <- if (!is.null(dname)) .ddg.get.scope(dname)
             ~^~~
./R/RDataTracker.R:4961:21: style: Place a space before left parenthesis, except in a function call.
	scope <- if (!is.null(dname)) .ddg.get.scope(dname)
                    ^
./R/RDataTracker.R:4961:39: style: Words within variable and function names should be separated by '_' rather than '.'.
	scope <- if (!is.null(dname)) .ddg.get.scope(dname)
                                      ^~~~~~~~~~~~~~
./R/RDataTracker.R:4963:12: warning: no visible global function definition for ‘.ddg.file.copy’
	invisible(.ddg.file.copy("File", filename, dname, scope))
           ^~~~~~~~~~~~~~
./R/RDataTracker.R:4963:19: style: Words within variable and function names should be separated by '_' rather than '.'.
	invisible(.ddg.file.copy("File", filename, dname, scope))
                  ^~~~~~~~~~~~~~
./R/RDataTracker.R:4976:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.data.in <- function(dname, pname=NULL) {
^~~~~~~~~~~
./R/RDataTracker.R:4977:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4977:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:4979:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.lookup.function.name(pname)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4979:3: warning: no visible global function definition for ‘.ddg.lookup.function.name’
  .ddg.lookup.function.name(pname)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4984:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    dscope <- .ddg.get.scope(argname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:4984:15: warning: no visible global function definition for ‘.ddg.get.scope’
    dscope <- .ddg.get.scope(argname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:4985:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.data.node.exists(argname, dscope)) {
        ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4989:17: style: Words within variable and function names should be separated by '_' rather than '.'.
      dscope <- .ddg.get.scope(argname, for.caller=TRUE)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:4989:17: warning: no visible global function definition for ‘.ddg.get.scope’
      dscope <- .ddg.get.scope(argname, for.caller=TRUE)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:4989:51: style: Put spaces around all infix operators.
      dscope <- .ddg.get.scope(argname, for.caller=TRUE)
                                                 ~^~
./R/RDataTracker.R:4990:11: style: Words within variable and function names should be separated by '_' rather than '.'.
      if (.ddg.data.node.exists(argname, dscope)) {
          ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4997:38: style: Words within variable and function names should be separated by '_' rather than '.'.
        if (!is.character(dname) || !.ddg.data.node.exists(dname, dscope)) {
                                     ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4999:11: style: Words within variable and function names should be separated by '_' rather than '.'.
          .ddg.insert.error.message(error.msg)
          ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:4999:11: warning: no visible global function definition for ‘.ddg.insert.error.message’
          .ddg.insert.error.message(error.msg)
          ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5005:30: style: Put spaces around all infix operators.
  else if (exists (arg, envir=parent.frame(), inherits=TRUE)) {
                            ~^~
./R/RDataTracker.R:5005:55: style: Put spaces around all infix operators.
  else if (exists (arg, envir=parent.frame(), inherits=TRUE)) {
                                                     ~^~
./R/RDataTracker.R:5006:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    dscope <- .ddg.get.scope(dname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5006:15: warning: no visible global function definition for ‘.ddg.get.scope’
    dscope <- .ddg.get.scope(dname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5008:30: style: Put spaces around all infix operators.
  else if (exists (arg, envir=parent.frame(2), inherits=TRUE)) {
                            ~^~
./R/RDataTracker.R:5008:56: style: Put spaces around all infix operators.
  else if (exists (arg, envir=parent.frame(2), inherits=TRUE)) {
                                                      ~^~
./R/RDataTracker.R:5009:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    dscope <- .ddg.get.scope(dname, for.caller=TRUE)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5009:15: warning: no visible global function definition for ‘.ddg.get.scope’
    dscope <- .ddg.get.scope(dname, for.caller=TRUE)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5009:47: style: Put spaces around all infix operators.
    dscope <- .ddg.get.scope(dname, for.caller=TRUE)
                                             ~^~
./R/RDataTracker.R:5016:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.data2proc(dname, dscope, pname)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5016:3: warning: no visible global function definition for ‘.ddg.data2proc’
  .ddg.data2proc(dname, dscope, pname)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5037:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.data.out <- function(dname, dvalue=NULL, pname=NULL, graphic.fext="jpeg") {
^~~~~~~~~~~~
./R/RDataTracker.R:5038:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:5038:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:5041:13: style: Put spaces around all infix operators.
	env <- parent.frame()
           ~^~~
./R/RDataTracker.R:5042:2: warning: no visible global function definition for ‘.ddg.lookup.value’
	.ddg.lookup.value(dname, dvalue, env, "ddg.data.out")
 ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5042:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.value(dname, dvalue, env, "ddg.data.out")
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5045:12: style: Place a space before left parenthesis, except in a function call.
	if (!is.character(dname)) dname <- deparse(substitute(dname))
           ^
./R/RDataTracker.R:5045:41: style: Put spaces around all infix operators.
	if (!is.character(dname)) dname <- deparse(substitute(dname))
                                       ~^~~
./R/RDataTracker.R:5048:2: warning: no visible global function definition for ‘.ddg.save.data’
	.ddg.save.data(dname, dvalue, "ddg.data.out", graphic.fext, env=env)
 ^~~~~~~~~~~~~~
./R/RDataTracker.R:5048:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.save.data(dname, dvalue, "ddg.data.out", graphic.fext, env=env)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:5050:2: warning: no visible global function definition for ‘.ddg.lookup.function.name’
	.ddg.lookup.function.name(pname)
 ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5050:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.function.name(pname)
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5053:2: warning: no visible global function definition for ‘.ddg.proc2data’
	.ddg.proc2data(pname, dname)
 ^~~~~~~~~~~~~~
./R/RDataTracker.R:5053:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.proc2data(pname, dname)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:5070:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.exception.out <- function(dname, dvalue=NULL, pname=NULL) {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5071:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:5071:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:5074:13: style: Put spaces around all infix operators.
	env <- parent.frame()
           ~^~~
./R/RDataTracker.R:5075:2: warning: no visible global function definition for ‘.ddg.lookup.value’
	.ddg.lookup.value(dname, dvalue, env, "ddg.exception.out")
 ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5075:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.value(dname, dvalue, env, "ddg.exception.out")
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5078:2: warning: no visible global function definition for ‘.ddg.data.node’
	.ddg.data.node("Exception", dname, dvalue, "ddg.library")
 ^~~~~~~~~~~~~~
./R/RDataTracker.R:5078:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.data.node("Exception", dname, dvalue, "ddg.library")
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:5080:2: warning: no visible global function definition for ‘.ddg.lookup.function.name’
	.ddg.lookup.function.name(pname)
 ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5080:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.function.name(pname)
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5083:2: warning: no visible global function definition for ‘.ddg.proc2data’
	.ddg.proc2data(pname, dname)
 ^~~~~~~~~~~~~~
./R/RDataTracker.R:5083:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.proc2data(pname, dname)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:5099:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.url.out <- function(dname, dvalue=NULL, pname=NULL) {
^~~~~~~~~~~
./R/RDataTracker.R:5100:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:5100:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:5103:13: style: Put spaces around all infix operators.
	env <- parent.frame()
           ~^~~
./R/RDataTracker.R:5104:2: warning: no visible global function definition for ‘.ddg.lookup.value’
	.ddg.lookup.value(dname, dvalue, env, "ddg.url.out")
 ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5104:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.value(dname, dvalue, env, "ddg.url.out")
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5109:15: style: Words within variable and function names should be separated by '_' rather than '.'.
    dscope <- .ddg.get.scope(dname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5109:15: warning: no visible global function definition for ‘.ddg.get.scope’
    dscope <- .ddg.get.scope(dname)
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5116:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.data.node("URL", dname, dvalue, dscope)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5116:3: warning: no visible global function definition for ‘.ddg.data.node’
  .ddg.data.node("URL", dname, dvalue, dscope)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5118:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.lookup.function.name(pname)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5118:3: warning: no visible global function definition for ‘.ddg.lookup.function.name’
  .ddg.lookup.function.name(pname)
  ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5121:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2data(pname, dname, dscope)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5121:3: warning: no visible global function definition for ‘.ddg.proc2data’
  .ddg.proc2data(pname, dname, dscope)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5140:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.file.out <- function(filename, dname=NULL, pname=NULL) {
^~~~~~~~~~~~
./R/RDataTracker.R:5141:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:5141:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:5143:12: style: Place a space before left parenthesis, except in a function call.
	if (is.null(dname)) {
           ^
./R/RDataTracker.R:5144:23: style: Put spaces around all infix operators.
		dname <- basename(filename)
                     ~^~~
./R/RDataTracker.R:5148:13: warning: no visible global function definition for ‘.ddg.get.scope’
 		scope <- .ddg.get.scope (dname)
            ^~~~~~~~~~~~~~
./R/RDataTracker.R:5148:23: style: Put spaces around all infix operators.
 		scope <- .ddg.get.scope (dname)
                     ~^~~
./R/RDataTracker.R:5148:26: style: Words within variable and function names should be separated by '_' rather than '.'.
 		scope <- .ddg.get.scope (dname)
                         ^~~~~~~~~~~~~~
./R/RDataTracker.R:5152:4: style: Commented code should be removed.
  #print(paste("ddg.file.out copying ", filename))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5153:17: style: Words within variable and function names should be separated by '_' rather than '.'.
  saved.file <- .ddg.file.copy("File", filename, dname, scope)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:5153:17: warning: no visible global function definition for ‘.ddg.file.copy’
  saved.file <- .ddg.file.copy("File", filename, dname, scope)
                ^~~~~~~~~~~~~~
./R/RDataTracker.R:5154:4: style: Commented code should be removed.
  #print(paste("ddg.file.out done copying ", filename))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5156:2: warning: no visible global function definition for ‘.ddg.lookup.function.name’
	.ddg.lookup.function.name(pname)
 ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5156:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.function.name(pname)
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5159:2: warning: no visible global function definition for ‘.ddg.proc2data’
	.ddg.proc2data(pname, dname, scope)
 ^~~~~~~~~~~~~~
./R/RDataTracker.R:5159:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.proc2data(pname, dname, scope)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:5180:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.graphic.out <- function(dname, pname=NULL, graphic.fext="jpeg") {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:5181:5: style: Place a space before left parenthesis, except in a function call.
  if(!.ddg.is.init()) return
    ^
./R/RDataTracker.R:5181:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if(!.ddg.is.init()) return
      ^~~~~~~~~~~~
./R/RDataTracker.R:5181:7: warning: no visible global function definition for ‘.ddg.is.init’
  if(!.ddg.is.init()) return
      ^~~~~~~~~~~~
./R/RDataTracker.R:5183:2: warning: no visible global function definition for ‘.ddg.write.graphic’
	.ddg.write.graphic(dname, 'Graphical Plot. Not saved in script.', graphic.fext)
 ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5183:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.write.graphic(dname, 'Graphical Plot. Not saved in script.', graphic.fext)
        ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5183:35: style: Only use double-quotes.
	.ddg.write.graphic(dname, 'Graphical Plot. Not saved in script.', graphic.fext)
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5185:2: warning: no visible global function definition for ‘.ddg.lookup.function.name’
	.ddg.lookup.function.name(pname)
 ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5185:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.function.name(pname)
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5188:2: warning: no visible global function definition for ‘.ddg.proc2data’
	.ddg.proc2data(pname,dname)
 ^~~~~~~~~~~~~~
./R/RDataTracker.R:5188:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.proc2data(pname,dname)
        ^~~~~~~~~~~~~~
./R/RDataTracker.R:5201:7: warning: no visible global function definition for ‘.ddg.is.init’
	if (!.ddg.is.init()) return(invisible())
      ^~~~~~~~~~~~
./R/RDataTracker.R:5201:12: style: Place a space before left parenthesis, except in a function call.
	if (!.ddg.is.init()) return(invisible())
           ^
./R/RDataTracker.R:5201:14: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!.ddg.is.init()) return(invisible())
             ^~~~~~~~~~~~
./R/RDataTracker.R:5203:2: warning: no visible global function definition for ‘.ddg.lookup.function.name’
	.ddg.lookup.function.name(pname)
 ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5203:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.function.name(pname)
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5206:11: style: Place a space before left parenthesis, except in a function call.
	if(is.null(pname)) {
          ^
./R/RDataTracker.R:5207:21: style: Put spaces around all infix operators.
		msg <- "Cannot call ddg.start with NULL value from top-level."
                   ~^~~
./R/RDataTracker.R:5208:4: warning: no visible global function definition for ‘.ddg.insert.error.message’
  	.ddg.insert.error.message(msg)
   ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5208:9: style: Words within variable and function names should be separated by '_' rather than '.'.
  	.ddg.insert.error.message(msg)
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5213:19: style: Words within variable and function names should be separated by '_' rather than '.'.
  frame.number <- .ddg.get.frame.number(sys.calls())
                  ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5213:19: warning: no visible global function definition for ‘.ddg.get.frame.number’
  frame.number <- .ddg.get.frame.number(sys.calls())
                  ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5215:3: warning: local variable ‘call’ assigned but may not be used
  call <- sys.call(frame.number)
  ^~~~
./R/RDataTracker.R:5216:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.create.start.for.cur.cmd (env)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5216:3: warning: no visible global function definition for ‘.ddg.create.start.for.cur.cmd’
  .ddg.create.start.for.cur.cmd (env)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5219:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc.node("Start", pname, pname)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5219:3: warning: no visible global function definition for ‘.ddg.proc.node’
  .ddg.proc.node("Start", pname, pname)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5222:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5222:3: warning: no visible global function definition for ‘.ddg.proc2proc’
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5236:7: warning: no visible global function definition for ‘.ddg.is.init’
	if (!.ddg.is.init()) return(invisible())
      ^~~~~~~~~~~~
./R/RDataTracker.R:5236:12: style: Place a space before left parenthesis, except in a function call.
	if (!.ddg.is.init()) return(invisible())
           ^
./R/RDataTracker.R:5236:14: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!.ddg.is.init()) return(invisible())
             ^~~~~~~~~~~~
./R/RDataTracker.R:5238:2: warning: no visible global function definition for ‘.ddg.lookup.function.name’
	.ddg.lookup.function.name(pname)
 ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5238:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.lookup.function.name(pname)
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5241:11: style: Place a space before left parenthesis, except in a function call.
	if(is.null(pname)) {
          ^
./R/RDataTracker.R:5242:21: style: Put spaces around all infix operators.
		msg <- "Cannot call ddg.finish with NULL value from top-level."
                   ~^~~
./R/RDataTracker.R:5243:4: warning: no visible global function definition for ‘.ddg.insert.error.message’
  	.ddg.insert.error.message(msg)
   ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5243:9: style: Words within variable and function names should be separated by '_' rather than '.'.
  	.ddg.insert.error.message(msg)
        ^~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5247:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc.node("Finish", pname, pname)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5247:3: warning: no visible global function definition for ‘.ddg.proc.node’
  .ddg.proc.node("Finish", pname, pname)
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5250:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5250:3: warning: no visible global function definition for ‘.ddg.proc2proc’
  .ddg.proc2proc()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5270:1: style: lines should not be more than 80 characters.
ddg.init <- function(r.script.path = NULL, ddgdir = NULL, overwrite = TRUE, enable.console = TRUE, max.snapshot.size = 100) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5270:22: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.init <- function(r.script.path = NULL, ddgdir = NULL, overwrite = TRUE, enable.console = TRUE, max.snapshot.size = 100) {
                     ^~~~~~~~~~~~~
./R/RDataTracker.R:5270:100: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.init <- function(r.script.path = NULL, ddgdir = NULL, overwrite = TRUE, enable.console = TRUE, max.snapshot.size = 100) {
                                                                                                   ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5271:4: style: Commented code should be removed.
  #.ddg.DDGStatement.init()
   ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5272:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.init.tables()
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5272:3: warning: no visible global function definition for ‘.ddg.init.tables’
  .ddg.init.tables()
  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5278:18: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (!is.null(r.script.path)){
                 ^~~~~~~~~~~~~
./R/RDataTracker.R:5279:1: style: lines should not be more than 80 characters.
      ddg.path <- paste(dirname(r.script.path), "/", basename(tools::file_path_sans_ext(r.script.path)), "_ddg", sep="")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5279:33: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.path <- paste(dirname(r.script.path), "/", basename(tools::file_path_sans_ext(r.script.path)), "_ddg", sep="")
                                ^~~~~~~~~~~~~
./R/RDataTracker.R:5279:89: style: Words within variable and function names should be separated by '_' rather than '.'.
      ddg.path <- paste(dirname(r.script.path), "/", basename(tools::file_path_sans_ext(r.script.path)), "_ddg", sep="")
                                                                                        ^~~~~~~~~~~~~
./R/RDataTracker.R:5279:117: style: Put spaces around all infix operators.
      ddg.path <- paste(dirname(r.script.path), "/", basename(tools::file_path_sans_ext(r.script.path)), "_ddg", sep="")
                                                                                                                   ~^~
./R/RDataTracker.R:5282:38: style: Commas should always have a space after.
      ddg.path <- paste(getwd(), "/","ddg",sep = "")
                                     ^
./R/RDataTracker.R:5282:44: style: Commas should always have a space after.
      ddg.path <- paste(getwd(), "/","ddg",sep = "")
                                           ^
./R/RDataTracker.R:5284:52: style: Put spaces around all infix operators.
  } else ddg.path <- normalizePath(ddgdir, winslash="/", mustWork=FALSE)
                                                  ~^~
./R/RDataTracker.R:5284:66: style: Put spaces around all infix operators.
  } else ddg.path <- normalizePath(ddgdir, winslash="/", mustWork=FALSE)
                                                                ~^~
./R/RDataTracker.R:5287:5: style: Place a space before left parenthesis, except in a function call.
  if(!overwrite){
    ^
./R/RDataTracker.R:5288:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    no.overwrite.folder <- paste(ddg.path, "_timestamps", sep = "")
    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5289:7: style: Place a space before left parenthesis, except in a function call.
    if(!dir.exists(no.overwrite.folder)){
      ^
./R/RDataTracker.R:5289:20: style: Words within variable and function names should be separated by '_' rather than '.'.
    if(!dir.exists(no.overwrite.folder)){
                   ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5290:18: style: Words within variable and function names should be separated by '_' rather than '.'.
      dir.create(no.overwrite.folder)
                 ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5292:1: style: lines should not be more than 80 characters.
    ddg.path <- paste(no.overwrite.folder, "/",  basename(tools::file_path_sans_ext(r.script.path)), "_ddg_", .ddg.timestamp(), sep = "")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5292:23: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.path <- paste(no.overwrite.folder, "/",  basename(tools::file_path_sans_ext(r.script.path)), "_ddg_", .ddg.timestamp(), sep = "")
                      ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5292:85: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.path <- paste(no.overwrite.folder, "/",  basename(tools::file_path_sans_ext(r.script.path)), "_ddg_", .ddg.timestamp(), sep = "")
                                                                                    ^~~~~~~~~~~~~
./R/RDataTracker.R:5292:111: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.path <- paste(no.overwrite.folder, "/",  basename(tools::file_path_sans_ext(r.script.path)), "_ddg_", .ddg.timestamp(), sep = "")
                                                                                                              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5292:111: warning: no visible global function definition for ‘.ddg.timestamp’
    ddg.path <- paste(no.overwrite.folder, "/",  basename(tools::file_path_sans_ext(r.script.path)), "_ddg_", .ddg.timestamp(), sep = "")
                                                                                                              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5295:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.path", ddg.path)
  ^~~~~~~~
./R/RDataTracker.R:5295:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.path", ddg.path)
  ^~~~~~~~
./R/RDataTracker.R:5298:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.flush.ddg()
  ^~~~~~~~~~~~~
./R/RDataTracker.R:5298:3: warning: no visible global function definition for ‘ddg.flush.ddg’
  ddg.flush.ddg()
  ^~~~~~~~~~~~~
./R/RDataTracker.R:5301:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.init.environ()
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5301:3: warning: no visible global function definition for ‘.ddg.init.environ’
  .ddg.init.environ()
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5304:1: style: lines should not be more than 80 characters.
  file.copy(r.script.path, paste(.ddg.path.scripts(), "/", basename(r.script.path), sep = ""))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5304:13: style: Words within variable and function names should be separated by '_' rather than '.'.
  file.copy(r.script.path, paste(.ddg.path.scripts(), "/", basename(r.script.path), sep = ""))
            ^~~~~~~~~~~~~
./R/RDataTracker.R:5304:34: style: Words within variable and function names should be separated by '_' rather than '.'.
  file.copy(r.script.path, paste(.ddg.path.scripts(), "/", basename(r.script.path), sep = ""))
                                 ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5304:34: warning: no visible global function definition for ‘.ddg.path.scripts’
  file.copy(r.script.path, paste(.ddg.path.scripts(), "/", basename(r.script.path), sep = ""))
                                 ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5304:69: style: Words within variable and function names should be separated by '_' rather than '.'.
  file.copy(r.script.path, paste(.ddg.path.scripts(), "/", basename(r.script.path), sep = ""))
                                                                    ^~~~~~~~~~~~~
./R/RDataTracker.R:5308:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!is.null(r.script.path) && tools::file_ext(r.script.path) == "Rmd") {
               ^~~~~~~~~~~~~
./R/RDataTracker.R:5308:50: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!is.null(r.script.path) && tools::file_ext(r.script.path) == "Rmd") {
                                                 ^~~~~~~~~~~~~
./R/RDataTracker.R:5309:1: style: lines should not be more than 80 characters.
    output.path <- paste(.ddg.path.scripts(), "/", basename(tools::file_path_sans_ext(r.script.path)), ".R", sep = "")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5309:26: style: Words within variable and function names should be separated by '_' rather than '.'.
    output.path <- paste(.ddg.path.scripts(), "/", basename(tools::file_path_sans_ext(r.script.path)), ".R", sep = "")
                         ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5309:26: warning: no visible global function definition for ‘.ddg.path.scripts’
    output.path <- paste(.ddg.path.scripts(), "/", basename(tools::file_path_sans_ext(r.script.path)), ".R", sep = "")
                         ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5309:87: style: Words within variable and function names should be separated by '_' rather than '.'.
    output.path <- paste(.ddg.path.scripts(), "/", basename(tools::file_path_sans_ext(r.script.path)), ".R", sep = "")
                                                                                      ^~~~~~~~~~~~~
./R/RDataTracker.R:5310:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.markdown(r.script.path, output.path)
    ^~~~~~~~~~~~~
./R/RDataTracker.R:5310:5: warning: no visible global function definition for ‘.ddg.markdown’
    .ddg.markdown(r.script.path, output.path)
    ^~~~~~~~~~~~~
./R/RDataTracker.R:5310:19: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.markdown(r.script.path, output.path)
                  ^~~~~~~~~~~~~
./R/RDataTracker.R:5311:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.r.script.path", output.path)
    ^~~~~~~~
./R/RDataTracker.R:5311:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.r.script.path", output.path)
    ^~~~~~~~
./R/RDataTracker.R:5313:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.r.script.path",
    ^~~~~~~~
./R/RDataTracker.R:5314:26: style: Words within variable and function names should be separated by '_' rather than '.'.
             if (is.null(r.script.path)) NULL
                         ^~~~~~~~~~~~~
./R/RDataTracker.R:5315:33: style: Words within variable and function names should be separated by '_' rather than '.'.
             else normalizePath(r.script.path, winslash="/"))
                                ^~~~~~~~~~~~~
./R/RDataTracker.R:5315:56: style: Put spaces around all infix operators.
             else normalizePath(r.script.path, winslash="/"))
                                                      ~^~
./R/RDataTracker.R:5319:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.enable.console", enable.console)
  ^~~~~~~~
./R/RDataTracker.R:5319:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.enable.console", enable.console)
  ^~~~~~~~
./R/RDataTracker.R:5320:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.func.depth", 0)
  ^~~~~~~~
./R/RDataTracker.R:5320:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.func.depth", 0)
  ^~~~~~~~
./R/RDataTracker.R:5321:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.explorer.port", 6096)
  ^~~~~~~~
./R/RDataTracker.R:5321:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.explorer.port", 6096)
  ^~~~~~~~
./R/RDataTracker.R:5322:5: style: Commented code should be removed.
  # .ddg.init.environ()
    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5325:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set (".ddg.starts.open", vector())
  ^~~~~~~~
./R/RDataTracker.R:5325:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set (".ddg.starts.open", vector())
  ^~~~~~~~
./R/RDataTracker.R:5327:1: style: lines should not be more than 80 characters.
  # Initialize the stack of commands and environments being executed in active functions
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5328:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.cur.cmd.stack", vector())
  ^~~~~~~~
./R/RDataTracker.R:5328:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.cur.cmd.stack", vector())
  ^~~~~~~~
./R/RDataTracker.R:5329:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.cur.expr.stack", vector())
  ^~~~~~~~
./R/RDataTracker.R:5329:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.cur.expr.stack", vector())
  ^~~~~~~~
./R/RDataTracker.R:5332:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.initialized", TRUE)
  ^~~~~~~~
./R/RDataTracker.R:5332:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.initialized", TRUE)
  ^~~~~~~~
./R/RDataTracker.R:5335:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("prev.device", dev.cur())
  ^~~~~~~~
./R/RDataTracker.R:5335:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("prev.device", dev.cur())
  ^~~~~~~~
./R/RDataTracker.R:5337:24: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (interactive() && .ddg.enable.console()) {
                       ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5338:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.history.file <- paste(.ddg.path.data(), "/.ddghistory", sep="")
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5338:31: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.history.file <- paste(.ddg.path.data(), "/.ddghistory", sep="")
                              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5338:31: warning: no visible global function definition for ‘.ddg.path.data’
    ddg.history.file <- paste(.ddg.path.data(), "/.ddghistory", sep="")
                              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5338:50: warning: Do not use absolute paths.
    ddg.history.file <- paste(.ddg.path.data(), "/.ddghistory", sep="")
                                                 ^~~~~~~~~~~~
./R/RDataTracker.R:5338:68: style: Put spaces around all infix operators.
    ddg.history.file <- paste(.ddg.path.data(), "/.ddghistory", sep="")
                                                                  ~^~
./R/RDataTracker.R:5339:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set(".ddg.history.file", ddg.history.file)
    ^~~~~~~~
./R/RDataTracker.R:5339:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set(".ddg.history.file", ddg.history.file)
    ^~~~~~~~
./R/RDataTracker.R:5339:35: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set(".ddg.history.file", ddg.history.file)
                                  ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5342:17: style: Words within variable and function names should be separated by '_' rather than '.'.
    file.create(ddg.history.file, showWarnings=FALSE)
                ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5342:47: style: Put spaces around all infix operators.
    file.create(ddg.history.file, showWarnings=FALSE)
                                             ~^~
./R/RDataTracker.R:5345:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.write.timestamp.to.history()
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5345:5: style: Variable and function names should not be longer than 30 characters.
    .ddg.write.timestamp.to.history()
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5345:5: warning: no visible global function definition for ‘.ddg.write.timestamp.to.history’
    .ddg.write.timestamp.to.history()
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5348:27: style: Words within variable and function names should be separated by '_' rather than '.'.
    tryCatch (savehistory(ddg.history.file),
                          ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5349:35: style: Opening curly braces should never go on their own line and should always be followed by a new line.
              error = function(e) {})
                                  ^
./R/RDataTracker.R:5349:36: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
              error = function(e) {})
                                   ^
./R/RDataTracker.R:5352:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.proc.start.time", .ddg.elapsed.time())
  ^~~~~~~~
./R/RDataTracker.R:5352:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.proc.start.time", .ddg.elapsed.time())
  ^~~~~~~~
./R/RDataTracker.R:5352:36: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.proc.start.time", .ddg.elapsed.time())
                                   ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5352:36: warning: no visible global function definition for ‘.ddg.elapsed.time’
  .ddg.set(".ddg.proc.start.time", .ddg.elapsed.time())
                                   ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5355:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.start.time", .ddg.timestamp())
  ^~~~~~~~
./R/RDataTracker.R:5355:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.start.time", .ddg.timestamp())
  ^~~~~~~~
./R/RDataTracker.R:5355:30: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.start.time", .ddg.timestamp())
                             ^~~~~~~~~~~~~~
./R/RDataTracker.R:5355:30: warning: no visible global function definition for ‘.ddg.timestamp’
  .ddg.set("ddg.start.time", .ddg.timestamp())
                             ^~~~~~~~~~~~~~
./R/RDataTracker.R:5396:1: style: lines should not be more than 80 characters.
ddg.run <- function(r.script.path = NULL, ddgdir = NULL, overwrite = TRUE, f = NULL, enable.console = TRUE, annotate.inside = TRUE, first.loop = 1, max.loops = 1, max.snapshot.size = 10, debug = FALSE, save.debug = FALSE, display = FALSE) {
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5396:21: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.run <- function(r.script.path = NULL, ddgdir = NULL, overwrite = TRUE, f = NULL, enable.console = TRUE, annotate.inside = TRUE, first.loop = 1, max.loops = 1, max.snapshot.size = 10, debug = FALSE, save.debug = FALSE, display = FALSE) {
                    ^~~~~~~~~~~~~
./R/RDataTracker.R:5396:164: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.run <- function(r.script.path = NULL, ddgdir = NULL, overwrite = TRUE, f = NULL, enable.console = TRUE, annotate.inside = TRUE, first.loop = 1, max.loops = 1, max.snapshot.size = 10, debug = FALSE, save.debug = FALSE, display = FALSE) {
                                                                                                                                                                   ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5399:3: warning: no visible global function definition for ‘ddg.init’
  ddg.init(r.script.path, ddgdir, overwrite, enable.console)
  ^~~~~~~~
./R/RDataTracker.R:5399:12: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.init(r.script.path, ddgdir, overwrite, enable.console)
           ^~~~~~~~~~~~~
./R/RDataTracker.R:5402:5: style: Commented code should be removed.
  # dir.create(.ddg.path(), showWarnings = FALSE)
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5406:5: style: Commented code should be removed.
  # ddg.flush.ddg()
    ^~~~~~~~~~~~~~~
./R/RDataTracker.R:5409:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!is.null(r.script.path)) .ddg.set(".ddg.is.sourced", TRUE)
               ^~~~~~~~~~~~~
./R/RDataTracker.R:5409:32: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!is.null(r.script.path)) .ddg.set(".ddg.is.sourced", TRUE)
                               ^~~~~~~~
./R/RDataTracker.R:5409:32: warning: no visible global function definition for ‘.ddg.set’
  if (!is.null(r.script.path)) .ddg.set(".ddg.is.sourced", TRUE)
                               ^~~~~~~~
./R/RDataTracker.R:5413:15: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (is.null(ddg.get.detail())) {
              ^~~~~~~~~~~~~~
./R/RDataTracker.R:5415:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.annotate.inside", annotate.inside)
    ^~~~~~~~
./R/RDataTracker.R:5415:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.annotate.inside", annotate.inside)
    ^~~~~~~~
./R/RDataTracker.R:5416:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5418:39: style: Put spaces around all infix operators.
    if (max.loops < 0) max.loops <- 10^10
                                     ~^~
./R/RDataTracker.R:5419:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.loops", max.loops)
    ^~~~~~~~
./R/RDataTracker.R:5419:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.loops", max.loops)
    ^~~~~~~~
./R/RDataTracker.R:5420:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5422:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.snapshot.size", max.snapshot.size)
    ^~~~~~~~
./R/RDataTracker.R:5422:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.snapshot.size", max.snapshot.size)
    ^~~~~~~~
./R/RDataTracker.R:5422:39: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.snapshot.size", max.snapshot.size)
                                      ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5424:1: style: Trailing whitespace is superfluous.
    
^~~~
./R/RDataTracker.R:5425:1: style: lines should not be more than 80 characters.
  # If loops are not annotated, do not annotate functions called from inside a loop.
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5426:23: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (max.loops == 0) ddg.loop.annotate.off()
                      ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5426:23: warning: no visible global function definition for ‘ddg.loop.annotate.off’
  if (max.loops == 0) ddg.loop.annotate.off()
                      ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5427:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5429:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.first.loop", first.loop)
  ^~~~~~~~
./R/RDataTracker.R:5429:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.first.loop", first.loop)
  ^~~~~~~~
./R/RDataTracker.R:5430:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5432:14: warning: no visible global function definition for ‘ddg.breakpoint’
  if (debug) ddg.breakpoint()
             ^~~~~~~~~~~~~~
./R/RDataTracker.R:5435:19: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (save.debug) .ddg.set("ddg.save.debug", TRUE)
                  ^~~~~~~~
./R/RDataTracker.R:5435:19: warning: no visible global function definition for ‘.ddg.set’
  if (save.debug) .ddg.set("ddg.save.debug", TRUE)
                  ^~~~~~~~
./R/RDataTracker.R:5441:29: style: Words within variable and function names should be separated by '_' rather than '.'.
          else if (!is.null(r.script.path)) ddg.source(
                            ^~~~~~~~~~~~~
./R/RDataTracker.R:5442:16: style: Words within variable and function names should be separated by '_' rather than '.'.
               .ddg.get("ddg.r.script.path"),
               ^~~~~~~~
./R/RDataTracker.R:5448:12: style: Put spaces around all infix operators.
      error=function(e) {
          ~^~
./R/RDataTracker.R:5451:9: warning: no visible global function definition for ‘ddg.procedure’
        ddg.procedure(pname="tryCatch")
        ^~~~~~~~~~~~~
./R/RDataTracker.R:5451:28: style: Put spaces around all infix operators.
        ddg.procedure(pname="tryCatch")
                          ~^~
./R/RDataTracker.R:5452:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        ddg.exception.out("error.msg", e.str, "tryCatch")
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5452:9: warning: no visible global function definition for ‘ddg.exception.out’
        ddg.exception.out("error.msg", e.str, "tryCatch")
        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5454:14: style: Put spaces around all infix operators.
      finally={
            ~^~
./R/RDataTracker.R:5455:9: warning: no visible global function definition for ‘ddg.save’
        ddg.save(r.script.path)
        ^~~~~~~~
./R/RDataTracker.R:5455:18: style: Words within variable and function names should be separated by '_' rather than '.'.
        ddg.save(r.script.path)
                 ^~~~~~~~~~~~~
./R/RDataTracker.R:5456:11: style: Place a space before left parenthesis, except in a function call.
        if(display==TRUE){
          ^
./R/RDataTracker.R:5456:19: style: Put spaces around all infix operators.
        if(display==TRUE){
                 ~^~~
./R/RDataTracker.R:5457:11: warning: no visible global function definition for ‘ddg.display’
          ddg.display()
          ^~~~~~~~~~~
./R/RDataTracker.R:5461:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5475:22: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.save <- function(r.script.path = NULL, save.debug = FALSE, quit = FALSE) {
                     ^~~~~~~~~~~~~
./R/RDataTracker.R:5476:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:5476:8: warning: no visible global function definition for ‘.ddg.is.init’
  if (!.ddg.is.init()) return(invisible())
       ^~~~~~~~~~~~
./R/RDataTracker.R:5478:24: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (interactive() && .ddg.enable.console()) {
                       ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5480:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.console.node()
    ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5480:5: warning: no visible global function definition for ‘.ddg.console.node’
    .ddg.console.node()
    ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5485:7: style: Commented code should be removed.
     #print("ddg.save: Saving graphics open at end of script")
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5487:1: style: lines should not be more than 80 characters.
     tryCatch (.ddg.capture.current.graphics(basename(.ddg.get("ddg.r.script.path"))),
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5487:16: style: Words within variable and function names should be separated by '_' rather than '.'.
     tryCatch (.ddg.capture.current.graphics(basename(.ddg.get("ddg.r.script.path"))),
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5487:55: style: Words within variable and function names should be separated by '_' rather than '.'.
     tryCatch (.ddg.capture.current.graphics(basename(.ddg.get("ddg.r.script.path"))),
                                                      ^~~~~~~~
./R/RDataTracker.R:5492:5: style: Commented code should be removed.
  # .ddg.delete.temp()
    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5495:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.txt.write()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5495:3: warning: no visible global function definition for ‘.ddg.txt.write’
  .ddg.txt.write()
  ^~~~~~~~~~~~~~
./R/RDataTracker.R:5496:56: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (interactive()) print(paste("Saving ddg.txt in ", .ddg.path(), sep=""))
                                                       ^~~~~~~~~
./R/RDataTracker.R:5496:56: warning: no visible global function definition for ‘.ddg.path’
  if (interactive()) print(paste("Saving ddg.txt in ", .ddg.path(), sep=""))
                                                       ^~~~~~~~~
./R/RDataTracker.R:5496:72: style: Put spaces around all infix operators.
  if (interactive()) print(paste("Saving ddg.txt in ", .ddg.path(), sep=""))
                                                                      ~^~
./R/RDataTracker.R:5499:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.json.write()
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:5499:3: warning: no visible global function definition for ‘.ddg.json.write’
  .ddg.json.write()
  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:5500:57: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (interactive()) print(paste("Saving ddg.json in ", .ddg.path(), sep=""))
                                                        ^~~~~~~~~
./R/RDataTracker.R:5500:57: warning: no visible global function definition for ‘.ddg.path’
  if (interactive()) print(paste("Saving ddg.json in ", .ddg.path(), sep=""))
                                                        ^~~~~~~~~
./R/RDataTracker.R:5500:73: style: Put spaces around all infix operators.
  if (interactive()) print(paste("Saving ddg.json in ", .ddg.path(), sep=""))
                                                                       ~^~
./R/RDataTracker.R:5503:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.sourced.scripts <- .ddg.get(".ddg.sourced.scripts")
  ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5503:26: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddg.sourced.scripts <- .ddg.get(".ddg.sourced.scripts")
                         ^~~~~~~~
./R/RDataTracker.R:5503:26: warning: no visible global function definition for ‘.ddg.get’
  ddg.sourced.scripts <- .ddg.get(".ddg.sourced.scripts")
                         ^~~~~~~~
./R/RDataTracker.R:5504:16: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!is.null(ddg.sourced.scripts)) {
               ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5505:14: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (nrow(ddg.sourced.scripts) > 1 ) {
             ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5506:24: style: Words within variable and function names should be separated by '_' rather than '.'.
      for (i in 1:nrow(ddg.sourced.scripts)) {
                       ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5507:18: style: Words within variable and function names should be separated by '_' rather than '.'.
        sname <- ddg.sourced.scripts[i, "sname"]
                 ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5508:32: style: Words within variable and function names should be separated by '_' rather than '.'.
        file.copy(sname, paste(.ddg.path.scripts(), basename(sname), sep="/"))
                               ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5508:32: warning: no visible global function definition for ‘.ddg.path.scripts’
        file.copy(sname, paste(.ddg.path.scripts(), basename(sname), sep="/"))
                               ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5508:73: style: Put spaces around all infix operators.
        file.copy(sname, paste(.ddg.path.scripts(), basename(sname), sep="/"))
                                                                       ~^~
./R/RDataTracker.R:5514:20: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (save.debug | .ddg.save.debug()) {
                   ^~~~~~~~~~~~~~~
./R/RDataTracker.R:5515:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.save.debug.files()
    ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5515:5: warning: no visible global function definition for ‘.ddg.save.debug.files’
    .ddg.save.debug.files()
    ^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5519:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.statement.num", 0)
  ^~~~~~~~
./R/RDataTracker.R:5519:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.statement.num", 0)
  ^~~~~~~~
./R/RDataTracker.R:5520:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.statements", list())
  ^~~~~~~~
./R/RDataTracker.R:5520:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.statements", list())
  ^~~~~~~~
./R/RDataTracker.R:5521:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5523:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.loop.num", 0)
  ^~~~~~~~
./R/RDataTracker.R:5523:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.loop.num", 0)
  ^~~~~~~~
./R/RDataTracker.R:5524:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.loops", list())
  ^~~~~~~~
./R/RDataTracker.R:5524:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.loops", list())
  ^~~~~~~~
./R/RDataTracker.R:5525:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5529:1: style: lines should not be more than 80 characters.
    if (.ddg.is.set('ddg.original.hist.size')) Sys.setenv("R_HISTSIZE"=.ddg.get('ddg.original.hist.size'))
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5529:9: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.set('ddg.original.hist.size')) Sys.setenv("R_HISTSIZE"=.ddg.get('ddg.original.hist.size'))
        ^~~~~~~~~~~
./R/RDataTracker.R:5529:9: warning: no visible global function definition for ‘.ddg.is.set’
    if (.ddg.is.set('ddg.original.hist.size')) Sys.setenv("R_HISTSIZE"=.ddg.get('ddg.original.hist.size'))
        ^~~~~~~~~~~
./R/RDataTracker.R:5529:21: style: Only use double-quotes.
    if (.ddg.is.set('ddg.original.hist.size')) Sys.setenv("R_HISTSIZE"=.ddg.get('ddg.original.hist.size'))
                    ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5529:71: style: Put spaces around all infix operators.
    if (.ddg.is.set('ddg.original.hist.size')) Sys.setenv("R_HISTSIZE"=.ddg.get('ddg.original.hist.size'))
                                                                     ~^~
./R/RDataTracker.R:5529:72: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (.ddg.is.set('ddg.original.hist.size')) Sys.setenv("R_HISTSIZE"=.ddg.get('ddg.original.hist.size'))
                                                                       ^~~~~~~~
./R/RDataTracker.R:5529:72: warning: no visible global function definition for ‘.ddg.get’
    if (.ddg.is.set('ddg.original.hist.size')) Sys.setenv("R_HISTSIZE"=.ddg.get('ddg.original.hist.size'))
                                                                       ^~~~~~~~
./R/RDataTracker.R:5529:81: style: Only use double-quotes.
    if (.ddg.is.set('ddg.original.hist.size')) Sys.setenv("R_HISTSIZE"=.ddg.get('ddg.original.hist.size'))
                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5532:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.delete.temp()
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5532:5: warning: no visible global function definition for ‘.ddg.delete.temp’
    .ddg.delete.temp()
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5535:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.auto.graphic.node(dev.to.capture=dev.cur)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5535:5: warning: no visible global function definition for ‘.ddg.auto.graphic.node’
    .ddg.auto.graphic.node(dev.to.capture=dev.cur)
    ^~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5535:42: style: Put spaces around all infix operators.
    .ddg.auto.graphic.node(dev.to.capture=dev.cur)
                                        ~^~
./R/RDataTracker.R:5538:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.clear()
    ^~~~~~~~~~
./R/RDataTracker.R:5538:5: warning: no visible global function definition for ‘.ddg.clear’
    .ddg.clear()
    ^~~~~~~~~~
./R/RDataTracker.R:5569:1: style: lines should not be more than 80 characters.
ddg.source <- function (file,  ddgdir = NULL, local = FALSE, echo = verbose, print.eval = echo,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5570:1: style: lines should not be more than 80 characters.
    verbose = getOption("verbose"), max.deparse.length = 150, chdir = FALSE, encoding = getOption("encoding"),
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5570:37: style: Words within variable and function names should be separated by '_' rather than '.'.
    verbose = getOption("verbose"), max.deparse.length = 150, chdir = FALSE, encoding = getOption("encoding"),
                                    ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5571:1: style: lines should not be more than 80 characters.
    ignore.ddg.calls = TRUE, ignore.init = ignore.ddg.calls, force.console=ignore.init){
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5571:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ignore.ddg.calls = TRUE, ignore.init = ignore.ddg.calls, force.console=ignore.init){
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5571:44: style: Words within variable and function names should be separated by '_' rather than '.'.
    ignore.ddg.calls = TRUE, ignore.init = ignore.ddg.calls, force.console=ignore.init){
                                           ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5574:11: style: Words within variable and function names should be separated by '_' rather than '.'.
  snum <- .ddg.next.script.num()
          ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5574:11: warning: no visible global function definition for ‘.ddg.next.script.num’
  snum <- .ddg.next.script.num()
          ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5578:51: style: Put spaces around all infix operators.
    df <- data.frame(snum, sname, stringsAsFactors=FALSE)
                                                 ~^~
./R/RDataTracker.R:5580:7: style: Put spaces around all infix operators.
    df<- rbind(.ddg.sourced.scripts(), c(snum, sname))
     ~^
./R/RDataTracker.R:5580:16: style: Words within variable and function names should be separated by '_' rather than '.'.
    df<- rbind(.ddg.sourced.scripts(), c(snum, sname))
               ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5580:16: warning: no visible global function definition for ‘.ddg.sourced.scripts’
    df<- rbind(.ddg.sourced.scripts(), c(snum, sname))
               ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5582:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set(".ddg.sourced.scripts", df)
  ^~~~~~~~
./R/RDataTracker.R:5582:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set(".ddg.sourced.scripts", df)
  ^~~~~~~~
./R/RDataTracker.R:5585:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.inc(".ddg.next.script.num")
  ^~~~~~~~
./R/RDataTracker.R:5585:3: warning: no visible global function definition for ‘.ddg.inc’
  .ddg.inc(".ddg.next.script.num")
  ^~~~~~~~
./R/RDataTracker.R:5685:36: style: Put spaces around all infix operators.
              encoding, keep.source=TRUE)
                                  ~^~
./R/RDataTracker.R:5690:70: style: Put spaces around all infix operators.
        parse(file, n = -1, NULL, "?", srcfile, encoding, keep.source=TRUE)
                                                                    ~^~
./R/RDataTracker.R:5704:7: style: Variable and function names should be all lowercase.
      isURL <- length(grep("^(ftp|http|file)://", ofile)) >
      ^~~~~
./R/RDataTracker.R:5706:11: style: Variable and function names should be all lowercase.
      if (isURL)
          ^~~~~
./R/RDataTracker.R:5708:12: style: Variable and function names should be all lowercase.
      if (!isURL && (path <- dirname(ofile)) != ".") {
           ^~~~~
./R/RDataTracker.R:5726:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (ignore.ddg.calls && !ignore.init) {
      ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5727:1: style: lines should not be more than 80 characters.
    if(verbose) warning("'ignore.ddg.calls' is TRUE, 'ignore.int' not; ... coercion 'ignore.init <- TRUE'\n")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5727:7: style: Place a space before left parenthesis, except in a function call.
    if(verbose) warning("'ignore.ddg.calls' is TRUE, 'ignore.int' not; ... coercion 'ignore.init <- TRUE'\n")
      ^
./R/RDataTracker.R:5733:9: style: Place a space before left parenthesis, except in a function call.
      if(ignore.ddg.calls) "^ddg."
        ^
./R/RDataTracker.R:5733:10: style: Words within variable and function names should be separated by '_' rather than '.'.
      if(ignore.ddg.calls) "^ddg."
         ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5738:5: style: Place a space before left parenthesis, except in a function call.
  if(length(exprs) > 0) {
    ^
./R/RDataTracker.R:5742:16: style: Words within variable and function names should be separated by '_' rather than '.'.
    prev.on <- .ddg.is.init() && .ddg.enable.console()
               ^~~~~~~~~~~~
./R/RDataTracker.R:5742:16: warning: no visible global function definition for ‘.ddg.is.init’
    prev.on <- .ddg.is.init() && .ddg.enable.console()
               ^~~~~~~~~~~~
./R/RDataTracker.R:5742:34: style: Words within variable and function names should be separated by '_' rather than '.'.
    prev.on <- .ddg.is.init() && .ddg.enable.console()
                                 ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5742:34: warning: no visible global function definition for ‘.ddg.enable.console’
    prev.on <- .ddg.is.init() && .ddg.enable.console()
                                 ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5743:35: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (prev.on && interactive()) .ddg.console.node()
                                  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5743:35: warning: no visible global function definition for ‘.ddg.console.node’
    if (prev.on && interactive()) .ddg.console.node()
                                  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5744:24: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (force.console) ddg.console.on()
                       ^~~~~~~~~~~~~~
./R/RDataTracker.R:5744:24: warning: no visible global function definition for ‘ddg.console.on’
    if (force.console) ddg.console.on()
                       ^~~~~~~~~~~~~~
./R/RDataTracker.R:5747:20: style: Words within variable and function names should be separated by '_' rather than '.'.
    prev.source <- .ddg.is.init() && .ddg.enable.source()
                   ^~~~~~~~~~~~
./R/RDataTracker.R:5747:20: warning: no visible global function definition for ‘.ddg.is.init’
    prev.source <- .ddg.is.init() && .ddg.enable.source()
                   ^~~~~~~~~~~~
./R/RDataTracker.R:5747:38: style: Words within variable and function names should be separated by '_' rather than '.'.
    prev.source <- .ddg.is.init() && .ddg.enable.source()
                                     ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5747:38: warning: no visible global function definition for ‘.ddg.enable.source’
    prev.source <- .ddg.is.init() && .ddg.enable.source()
                                     ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5750:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("from.source", TRUE)
    ^~~~~~~~
./R/RDataTracker.R:5750:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("from.source", TRUE)
    ^~~~~~~~
./R/RDataTracker.R:5753:1: style: lines should not be more than 80 characters.
    .ddg.parse.commands(exprs, sname, snum, environ=envir, ignore.patterns=ignores, node.name=sname,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5753:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.parse.commands(exprs, sname, snum, environ=envir, ignore.patterns=ignores, node.name=sname,
    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5753:52: style: Put spaces around all infix operators.
    .ddg.parse.commands(exprs, sname, snum, environ=envir, ignore.patterns=ignores, node.name=sname,
                                                  ~^~
./R/RDataTracker.R:5753:75: style: Put spaces around all infix operators.
    .ddg.parse.commands(exprs, sname, snum, environ=envir, ignore.patterns=ignores, node.name=sname,
                                                                         ~^~
./R/RDataTracker.R:5753:94: style: Put spaces around all infix operators.
    .ddg.parse.commands(exprs, sname, snum, environ=envir, ignore.patterns=ignores, node.name=sname,
                                                                                            ~^~
./R/RDataTracker.R:5754:1: style: lines should not be more than 80 characters.
        echo = echo, print.eval = print.eval, max.deparse.length = max.deparse.length,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5754:68: style: Words within variable and function names should be separated by '_' rather than '.'.
        echo = echo, print.eval = print.eval, max.deparse.length = max.deparse.length,
                                                                   ^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5760:7: style: Commented code should be removed.
    # ddg.save()
      ^~~~~~~~~~
./R/RDataTracker.R:5761:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("from.source", prev.source)
    ^~~~~~~~
./R/RDataTracker.R:5761:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("from.source", prev.source)
    ^~~~~~~~
./R/RDataTracker.R:5764:19: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (!prev.on) ddg.console.off() else ddg.console.on()
                  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:5764:19: warning: no visible global function definition for ‘ddg.console.off’
    if (!prev.on) ddg.console.off() else ddg.console.on()
                  ^~~~~~~~~~~~~~~
./R/RDataTracker.R:5764:42: style: Words within variable and function names should be separated by '_' rather than '.'.
    if (!prev.on) ddg.console.off() else ddg.console.on()
                                         ^~~~~~~~~~~~~~
./R/RDataTracker.R:5764:42: warning: no visible global function definition for ‘ddg.console.on’
    if (!prev.on) ddg.console.off() else ddg.console.on()
                                         ^~~~~~~~~~~~~~
./R/RDataTracker.R:5770:1: style: Words within variable and function names should be separated by '_' rather than '.'.
.ddg.start.ddg.explorer <- function () {
^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5771:11: style: Put spaces around all infix operators.
  jar.path<- "/RDataTracker/java/DDGExplorer.jar"
         ~^
./R/RDataTracker.R:5771:15: warning: Do not use absolute paths.
  jar.path<- "/RDataTracker/java/DDGExplorer.jar"
              ^~~~~~~~~~~~~
./R/RDataTracker.R:5772:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  check.library.paths<- file.exists(paste(.libPaths(),jar.path,sep = ""))
  ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5772:22: style: Put spaces around all infix operators.
  check.library.paths<- file.exists(paste(.libPaths(),jar.path,sep = ""))
                    ~^
./R/RDataTracker.R:5772:55: style: Commas should always have a space after.
  check.library.paths<- file.exists(paste(.libPaths(),jar.path,sep = ""))
                                                      ^
./R/RDataTracker.R:5772:64: style: Commas should always have a space after.
  check.library.paths<- file.exists(paste(.libPaths(),jar.path,sep = ""))
                                                               ^
./R/RDataTracker.R:5773:8: style: Put spaces around all infix operators.
  index<- min(which(check.library.paths == TRUE))
      ~^
./R/RDataTracker.R:5773:21: style: Words within variable and function names should be separated by '_' rather than '.'.
  index<- min(which(check.library.paths == TRUE))
                    ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5774:19: style: Put spaces around all infix operators.
  ddgexplorer_path<- paste(.libPaths()[index],jar.path,sep = "")
                 ~^
./R/RDataTracker.R:5774:47: style: Commas should always have a space after.
  ddgexplorer_path<- paste(.libPaths()[index],jar.path,sep = "")
                                              ^
./R/RDataTracker.R:5774:56: style: Commas should always have a space after.
  ddgexplorer_path<- paste(.libPaths()[index],jar.path,sep = "")
                                                       ^
./R/RDataTracker.R:5775:14: style: Put spaces around all infix operators.
  ddgtxt.path<- paste(.ddg.path() ,"/ddg.txt",sep = "")
            ~^
./R/RDataTracker.R:5775:23: style: Words within variable and function names should be separated by '_' rather than '.'.
  ddgtxt.path<- paste(.ddg.path() ,"/ddg.txt",sep = "")
                      ^~~~~~~~~
./R/RDataTracker.R:5775:23: warning: no visible global function definition for ‘.ddg.path’
  ddgtxt.path<- paste(.ddg.path() ,"/ddg.txt",sep = "")
                      ^~~~~~~~~
./R/RDataTracker.R:5775:35: style: Commas should never have a space before.
  ddgtxt.path<- paste(.ddg.path() ,"/ddg.txt",sep = "")
                                 ~^
./R/RDataTracker.R:5775:36: style: Commas should always have a space after.
  ddgtxt.path<- paste(.ddg.path() ,"/ddg.txt",sep = "")
                                   ^
./R/RDataTracker.R:5775:37: warning: Do not use absolute paths.
  ddgtxt.path<- paste(.ddg.path() ,"/ddg.txt",sep = "")
                                    ^~~~~~~~
./R/RDataTracker.R:5775:47: style: Commas should always have a space after.
  ddgtxt.path<- paste(.ddg.path() ,"/ddg.txt",sep = "")
                                              ^
./R/RDataTracker.R:5776:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5778:57: style: Trailing whitespace is superfluous.
  # up in a new tab of an existing running DDG Explorer. 
                                                        ^
./R/RDataTracker.R:5779:5: style: Commented code should be removed.
  # print("Starting DDG Explorer server")
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5780:1: style: lines should not be more than 80 characters.
  systemResult <- system2("java", c("-jar", ddgexplorer_path, ddgtxt.path, "-port", .ddg.get(".ddg.explorer.port")), wait = FALSE)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5780:3: style: Variable and function names should be all lowercase.
  systemResult <- system2("java", c("-jar", ddgexplorer_path, ddgtxt.path, "-port", .ddg.get(".ddg.explorer.port")), wait = FALSE)
  ^~~~~~~~~~~~
./R/RDataTracker.R:5780:3: warning: local variable ‘systemResult’ assigned but may not be used
  systemResult <- system2("java", c("-jar", ddgexplorer_path, ddgtxt.path, "-port", .ddg.get(".ddg.explorer.port")), wait = FALSE)
  ^~~~~~~~~~~~
./R/RDataTracker.R:5780:85: style: Words within variable and function names should be separated by '_' rather than '.'.
  systemResult <- system2("java", c("-jar", ddgexplorer_path, ddgtxt.path, "-port", .ddg.get(".ddg.explorer.port")), wait = FALSE)
                                                                                    ^~~~~~~~
./R/RDataTracker.R:5780:85: warning: no visible global function definition for ‘.ddg.get’
  systemResult <- system2("java", c("-jar", ddgexplorer_path, ddgtxt.path, "-port", .ddg.get(".ddg.explorer.port")), wait = FALSE)
                                                                                    ^~~~~~~~
./R/RDataTracker.R:5781:5: style: Commented code should be removed.
  # print(paste("Starting java server return code:", systemResult))
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5787:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5789:5: style: Commented code should be removed.
  # print("Opening socket connection")
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5791:1: style: lines should not be more than 80 characters.
        con <- socketConnection(host= "localhost", port = .ddg.get(".ddg.explorer.port"), blocking = FALSE,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5791:37: style: Put spaces around all infix operators.
        con <- socketConnection(host= "localhost", port = .ddg.get(".ddg.explorer.port"), blocking = FALSE,
                                   ~^
./R/RDataTracker.R:5791:59: style: Words within variable and function names should be separated by '_' rather than '.'.
        con <- socketConnection(host= "localhost", port = .ddg.get(".ddg.explorer.port"), blocking = FALSE,
                                                          ^~~~~~~~
./R/RDataTracker.R:5792:19: style: Put spaces around all infix operators.
            server=FALSE, open="w")
                 ~^~
./R/RDataTracker.R:5792:31: style: Put spaces around all infix operators.
            server=FALSE, open="w")
                             ~^~
./R/RDataTracker.R:5793:20: style: Put spaces around all infix operators.
        ddgtxt.path<- paste(getwd(), .ddg.path() ,"ddg.txt",sep = "/")
                  ~^
./R/RDataTracker.R:5793:38: style: Words within variable and function names should be separated by '_' rather than '.'.
        ddgtxt.path<- paste(getwd(), .ddg.path() ,"ddg.txt",sep = "/")
                                     ^~~~~~~~~
./R/RDataTracker.R:5793:38: warning: no visible global function definition for ‘.ddg.path’
        ddgtxt.path<- paste(getwd(), .ddg.path() ,"ddg.txt",sep = "/")
                                     ^~~~~~~~~
./R/RDataTracker.R:5793:50: style: Commas should never have a space before.
        ddgtxt.path<- paste(getwd(), .ddg.path() ,"ddg.txt",sep = "/")
                                                ~^
./R/RDataTracker.R:5793:51: style: Commas should always have a space after.
        ddgtxt.path<- paste(getwd(), .ddg.path() ,"ddg.txt",sep = "/")
                                                  ^
./R/RDataTracker.R:5793:61: style: Commas should always have a space after.
        ddgtxt.path<- paste(getwd(), .ddg.path() ,"ddg.txt",sep = "/")
                                                            ^
./R/RDataTracker.R:5800:9: style: Words within variable and function names should be separated by '_' rather than '.'.
        .ddg.start.ddg.explorer()
        ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5800:9: warning: no visible global function definition for ‘.ddg.start.ddg.explorer’
        .ddg.start.ddg.explorer()
        ^~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5803:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5805:1: style: lines should not be more than 80 characters.
    if(is.element('CamFlow', installed.packages()[,1])){ # did we install the CamFlow visualiser?
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5805:7: style: Place a space before left parenthesis, except in a function call.
    if(is.element('CamFlow', installed.packages()[,1])){ # did we install the CamFlow visualiser?
      ^
./R/RDataTracker.R:5805:19: style: Only use double-quotes.
    if(is.element('CamFlow', installed.packages()[,1])){ # did we install the CamFlow visualiser?
                  ^~~~~~~~~
./R/RDataTracker.R:5805:52: style: Commas should always have a space after.
    if(is.element('CamFlow', installed.packages()[,1])){ # did we install the CamFlow visualiser?
                                                   ^
./R/RDataTracker.R:5805:56: style: Opening curly braces should never go on their own line and should always be followed by a new line.
    if(is.element('CamFlow', installed.packages()[,1])){ # did we install the CamFlow visualiser?
                                                       ^
./R/RDataTracker.R:5806:15: style: Words within variable and function names should be separated by '_' rather than '.'.
      json <- .ddg.json.current()
              ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5806:15: warning: no visible global function definition for ‘.ddg.json.current’
      json <- .ddg.json.current()
              ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5807:7: style: Variable and function names should be all lowercase.
      CamFlowVisualiser(json)
      ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5807:7: warning: no visible global function definition for ‘CamFlowVisualiser’
      CamFlowVisualiser(json)
      ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5809:25: style: Opening curly braces should never go on their own line and should always be followed by a new line.
    error = function(e) {}
                        ^
./R/RDataTracker.R:5809:26: style: Closing curly-braces should always be on their own line, unless it's followed by an else.
    error = function(e) {}
                         ^
./R/RDataTracker.R:5811:1: style: Trailing whitespace is superfluous.
  
^~
./R/RDataTracker.R:5817:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.debug.lib.on <- function () {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5818:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.debug.lib", TRUE)
  ^~~~~~~~
./R/RDataTracker.R:5818:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.debug.lib", TRUE)
  ^~~~~~~~
./R/RDataTracker.R:5823:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.debug.lib.off <- function () {
^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5824:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.debug.lib", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:5824:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.debug.lib", FALSE)
  ^~~~~~~~
./R/RDataTracker.R:5831:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.break.ignore()) {
       ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5832:1: style: lines should not be more than 80 characters.
    writeLines("\nEnter = next command, C = next breakpoint, D = display DDG, Q = quit debugging\n")
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5833:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.break", TRUE)
    ^~~~~~~~
./R/RDataTracker.R:5833:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.break", TRUE)
    ^~~~~~~~
./R/RDataTracker.R:5840:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.set.breakpoint <- function(script.name, line.num) {
^~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5844:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.set("ddg.breakpoints")) {
      ^~~~~~~~~~~
./R/RDataTracker.R:5845:12: style: Words within variable and function names should be separated by '_' rather than '.'.
    df1 <- ddg.list.breakpoints()
           ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5845:12: warning: no visible global function definition for ‘ddg.list.breakpoints’
    df1 <- ddg.list.breakpoints()
           ^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5846:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.breakpoints", rbind(df1, df2))
    ^~~~~~~~
./R/RDataTracker.R:5846:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.breakpoints", rbind(df1, df2))
    ^~~~~~~~
./R/RDataTracker.R:5848:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.breakpoints", df2)
    ^~~~~~~~
./R/RDataTracker.R:5848:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.breakpoints", df2)
    ^~~~~~~~
./R/RDataTracker.R:5855:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.list.breakpoints <- function() {
^~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5856:7: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.set("ddg.breakpoints")) return (.ddg.get("ddg.breakpoints"))
      ^~~~~~~~~~~
./R/RDataTracker.R:5856:47: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (.ddg.is.set("ddg.breakpoints")) return (.ddg.get("ddg.breakpoints"))
                                              ^~~~~~~~
./R/RDataTracker.R:5863:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.clear.breakpoints <- function() {
^~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5864:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.breakpoints", NULL)
  ^~~~~~~~
./R/RDataTracker.R:5864:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.breakpoints", NULL)
  ^~~~~~~~
./R/RDataTracker.R:5876:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.set.detail <- function(detail.level) {
^~~~~~~~~~~~~~
./R/RDataTracker.R:5878:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.annotate.inside", FALSE)
    ^~~~~~~~
./R/RDataTracker.R:5878:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.annotate.inside", FALSE)
    ^~~~~~~~
./R/RDataTracker.R:5879:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.loops", 0)
    ^~~~~~~~
./R/RDataTracker.R:5879:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.loops", 0)
    ^~~~~~~~
./R/RDataTracker.R:5880:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.snapshot.size", 0)
    ^~~~~~~~
./R/RDataTracker.R:5880:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.snapshot.size", 0)
    ^~~~~~~~
./R/RDataTracker.R:5881:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.detail", 0)
    ^~~~~~~~
./R/RDataTracker.R:5881:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.detail", 0)
    ^~~~~~~~
./R/RDataTracker.R:5883:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.annotate.inside", TRUE)
    ^~~~~~~~
./R/RDataTracker.R:5883:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.annotate.inside", TRUE)
    ^~~~~~~~
./R/RDataTracker.R:5884:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.loops", 1)
    ^~~~~~~~
./R/RDataTracker.R:5884:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.loops", 1)
    ^~~~~~~~
./R/RDataTracker.R:5885:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.snapshot.size", 10)
    ^~~~~~~~
./R/RDataTracker.R:5885:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.snapshot.size", 10)
    ^~~~~~~~
./R/RDataTracker.R:5886:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.detail", 1)
    ^~~~~~~~
./R/RDataTracker.R:5886:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.detail", 1)
    ^~~~~~~~
./R/RDataTracker.R:5888:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.annotate.inside", TRUE)
    ^~~~~~~~
./R/RDataTracker.R:5888:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.annotate.inside", TRUE)
    ^~~~~~~~
./R/RDataTracker.R:5889:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.loops", 10)
    ^~~~~~~~
./R/RDataTracker.R:5889:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.loops", 10)
    ^~~~~~~~
./R/RDataTracker.R:5890:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.snapshot.size", 100)
    ^~~~~~~~
./R/RDataTracker.R:5890:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.snapshot.size", 100)
    ^~~~~~~~
./R/RDataTracker.R:5891:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.detail", 2)
    ^~~~~~~~
./R/RDataTracker.R:5891:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.detail", 2)
    ^~~~~~~~
./R/RDataTracker.R:5893:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.annotate.inside", TRUE)
    ^~~~~~~~
./R/RDataTracker.R:5893:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.annotate.inside", TRUE)
    ^~~~~~~~
./R/RDataTracker.R:5894:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.loops", 10^10)
    ^~~~~~~~
./R/RDataTracker.R:5894:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.loops", 10^10)
    ^~~~~~~~
./R/RDataTracker.R:5894:33: style: Put spaces around all infix operators.
    .ddg.set("ddg.max.loops", 10^10)
                               ~^~
./R/RDataTracker.R:5895:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.max.snapshot.size", -1)
    ^~~~~~~~
./R/RDataTracker.R:5895:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.max.snapshot.size", -1)
    ^~~~~~~~
./R/RDataTracker.R:5896:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    .ddg.set("ddg.detail", 3)
    ^~~~~~~~
./R/RDataTracker.R:5896:5: warning: no visible global function definition for ‘.ddg.set’
    .ddg.set("ddg.detail", 3)
    ^~~~~~~~
./R/RDataTracker.R:5907:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.get.detail <- function() {
^~~~~~~~~~~~~~
./R/RDataTracker.R:5908:8: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.set("ddg.detail")) .ddg.set("ddg.detail", NULL)
       ^~~~~~~~~~~
./R/RDataTracker.R:5908:8: warning: no visible global function definition for ‘.ddg.is.set’
  if (!.ddg.is.set("ddg.detail")) .ddg.set("ddg.detail", NULL)
       ^~~~~~~~~~~
./R/RDataTracker.R:5908:35: style: Words within variable and function names should be separated by '_' rather than '.'.
  if (!.ddg.is.set("ddg.detail")) .ddg.set("ddg.detail", NULL)
                                  ^~~~~~~~
./R/RDataTracker.R:5908:35: warning: no visible global function definition for ‘.ddg.set’
  if (!.ddg.is.set("ddg.detail")) .ddg.set("ddg.detail", NULL)
                                  ^~~~~~~~
./R/RDataTracker.R:5909:10: style: Words within variable and function names should be separated by '_' rather than '.'.
  return(.ddg.get("ddg.detail"))
         ^~~~~~~~
./R/RDataTracker.R:5909:10: warning: no visible global function definition for ‘.ddg.get’
  return(.ddg.get("ddg.detail"))
         ^~~~~~~~
./R/RDataTracker.R:5914:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.clear.detail <- function() {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5915:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.detail", NULL)
  ^~~~~~~~
./R/RDataTracker.R:5915:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.detail", NULL)
  ^~~~~~~~
./R/RDataTracker.R:5920:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.console.off <- function() {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:5921:7: warning: no visible global function definition for ‘.ddg.is.init’
	if (!.ddg.is.init()) return(invisible())
      ^~~~~~~~~~~~
./R/RDataTracker.R:5921:12: style: Place a space before left parenthesis, except in a function call.
	if (!.ddg.is.init()) return(invisible())
           ^
./R/RDataTracker.R:5921:14: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!.ddg.is.init()) return(invisible())
             ^~~~~~~~~~~~
./R/RDataTracker.R:5924:12: style: Place a space before left parenthesis, except in a function call.
	if (interactive() && .ddg.enable.console()) {
           ^
./R/RDataTracker.R:5924:27: style: Put spaces around all infix operators.
	if (interactive() && .ddg.enable.console()) {
                         ~^~~
./R/RDataTracker.R:5924:30: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (interactive() && .ddg.enable.console()) {
                             ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5925:3: warning: no visible global function definition for ‘.ddg.console.node’
		.ddg.console.node()
  ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5925:17: style: Words within variable and function names should be separated by '_' rather than '.'.
		.ddg.console.node()
                ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5929:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set(".ddg.enable.console", FALSE)
 ^~~~~~~~
./R/RDataTracker.R:5929:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set(".ddg.enable.console", FALSE)
        ^~~~~~~~
./R/RDataTracker.R:5934:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.console.on <- function() {
^~~~~~~~~~~~~~
./R/RDataTracker.R:5935:7: warning: no visible global function definition for ‘.ddg.is.init’
	if (!.ddg.is.init()) return(invisible())
      ^~~~~~~~~~~~
./R/RDataTracker.R:5935:12: style: Place a space before left parenthesis, except in a function call.
	if (!.ddg.is.init()) return(invisible())
           ^
./R/RDataTracker.R:5935:14: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!.ddg.is.init()) return(invisible())
             ^~~~~~~~~~~~
./R/RDataTracker.R:5939:7: warning: no visible global function definition for ‘.ddg.enable.console’
	if (!.ddg.enable.console()) .ddg.write.timestamp.to.history()
      ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5939:12: style: Place a space before left parenthesis, except in a function call.
	if (!.ddg.enable.console()) .ddg.write.timestamp.to.history()
           ^
./R/RDataTracker.R:5939:14: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!.ddg.enable.console()) .ddg.write.timestamp.to.history()
             ^~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5939:30: warning: no visible global function definition for ‘.ddg.write.timestamp.to.history’
	if (!.ddg.enable.console()) .ddg.write.timestamp.to.history()
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5939:37: style: Words within variable and function names should be separated by '_' rather than '.'.
	if (!.ddg.enable.console()) .ddg.write.timestamp.to.history()
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5939:37: style: Variable and function names should not be longer than 30 characters.
	if (!.ddg.enable.console()) .ddg.write.timestamp.to.history()
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5940:2: warning: no visible global function definition for ‘.ddg.set’
	.ddg.set(".ddg.enable.console", TRUE)
 ^~~~~~~~
./R/RDataTracker.R:5940:9: style: Words within variable and function names should be separated by '_' rather than '.'.
	.ddg.set(".ddg.enable.console", TRUE)
        ^~~~~~~~
./R/RDataTracker.R:5948:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.annotate.on <- function (fnames=NULL) {
^~~~~~~~~~~~~~~
./R/RDataTracker.R:5949:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.annotate.on", fnames)
  ^~~~~~~~
./R/RDataTracker.R:5949:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.annotate.on", fnames)
  ^~~~~~~~
./R/RDataTracker.R:5957:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.annotate.off <- function (fnames=NULL) {
^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5958:3: style: Words within variable and function names should be separated by '_' rather than '.'.
  .ddg.set("ddg.annotate.off", fnames)
  ^~~~~~~~
./R/RDataTracker.R:5958:3: warning: no visible global function definition for ‘.ddg.set’
  .ddg.set("ddg.annotate.off", fnames)
  ^~~~~~~~
./R/RDataTracker.R:5967:1: style: Words within variable and function names should be separated by '_' rather than '.'.
ddg.flush.ddg <- function(ddg.path=NULL) {
^~~~~~~~~~~~~
./R/RDataTracker.R:5970:17: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.path <- .ddg.path()
                ^~~~~~~~~
./R/RDataTracker.R:5970:17: warning: no visible global function definition for ‘.ddg.path’, Did you mean 'ddg.path'?
    ddg.path <- .ddg.path()
                ^~~~~~~~~
./R/RDataTracker.R:5971:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.path.data <- .ddg.path.data()
    ^~~~~~~~~~~~~
./R/RDataTracker.R:5971:22: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.path.data <- .ddg.path.data()
                     ^~~~~~~~~~~~~~
./R/RDataTracker.R:5971:22: warning: no visible global function definition for ‘.ddg.path.data’, Did you mean 'ddg.path.data'?
    ddg.path.data <- .ddg.path.data()
                     ^~~~~~~~~~~~~~
./R/RDataTracker.R:5972:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.path.debug <- .ddg.path.debug()
    ^~~~~~~~~~~~~~
./R/RDataTracker.R:5972:23: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.path.debug <- .ddg.path.debug()
                      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:5972:23: warning: no visible global function definition for ‘.ddg.path.debug’, Did you mean 'ddg.path.debug'?
    ddg.path.debug <- .ddg.path.debug()
                      ^~~~~~~~~~~~~~~
./R/RDataTracker.R:5973:5: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.path.scripts <- .ddg.path.scripts()
    ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5973:25: style: Words within variable and function names should be separated by '_' rather than '.'.
    ddg.path.scripts <- .ddg.path.scripts()
                        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5973:25: warning: no visible global function definition for ‘.ddg.path.scripts’, Did you mean 'ddg.path.scripts'?
    ddg.path.scripts <- .ddg.path.scripts()
                        ^~~~~~~~~~~~~~~~~
./R/RDataTracker.R:5978:38: style: Put spaces around all infix operators.
    unlink(paste(ddg.path, "*.*", sep="/"))
                                    ~^~
./R/RDataTracker.R:5979:18: style: Words within variable and function names should be separated by '_' rather than '.'.
    unlink(paste(ddg.path.data, "*.*", sep="/"))
                 ^~~~~~~~~~~~~
./R/RDataTracker.R:5979:43: style: Put spaces around all infix operators.
    unlink(paste(ddg.path.data, "*.*", sep="/"))
                                         ~^~
./R/RDataTracker.R:5980:18: style: Words within variable and function names should be separated by '_' rather than '.'.
    unlink(paste(ddg.path.data, ".ddghistory", sep="/"))
                 ^~~~~~~~~~~~~
./R/RDataTracker.R:5980:51: style: Put spaces around all infix operators.
    unlink(paste(ddg.path.data, ".ddghistory", sep="/"))
                                                 ~^~
./R/RDataTracker.R:5981:18: style: Words within variable and function names should be separated by '_' rather than '.'.
    unlink(paste(ddg.path.debug, "*.*", sep="/"))
                 ^~~~~~~~~~~~~~
./R/RDataTracker.R:5981:44: style: Put spaces around all infix operators.
    unlink(paste(ddg.path.debug, "*.*", sep="/"))
                                          ~^~
./R/RDataTracker.R:5982:18: style: Words within variable and function names should be separated by '_' rather than '.'.
    unlink(paste(ddg.path.scripts, "*.*", sep="/"))
                 ^~~~~~~~~~~~~~~~
./R/RDataTracker.R:5982:46: style: Put spaces around all infix operators.
    unlink(paste(ddg.path.scripts, "*.*", sep="/"))
                                            ~^~
